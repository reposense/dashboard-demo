[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d PDF++"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-T12-4/main[image:https://travis-ci.org/CS2103-AY1819S2-T12-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://ci.appveyor.com/project/WeiTangLau/main[image:https://ci.appveyor.com/api/projects/status/ehoaix51okkaq3r0?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-T12-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-T12-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://www.codacy.com/p/210656?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dcs2103-ay1819s2-t12-4/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/ee2bd70ba94d406ebec24148ecfd4c6c?svg\u003dtrue[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* This is a desktop PDF++ application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* It is a Java application that allows users to store and manage all their PDF files."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Users can perform multiple functions to customise their experience in manging their PDF files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* The source code is based on link:https://github.com/nus-cs2103-AY1819S2/addressbook-level4[AddressBook-Level4] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "link:https://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/apache/pdfbox[Apache PDFBox]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 12,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"lormee94\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"JER...LOW\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"lormee94\", \"Jeremy\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"jetkan-yk\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"KAN...ENG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"jetkan-yk\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"WeiTangLau\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"LAU...ANG\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"WeiTangLau\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"githubId\": \"ptvrajsk\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"displayName\": \"PRI...MAR\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "      \"authorNames\": [\"ptvrajsk\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "mainClassName \u003d \u0027seedu.pdf.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.14\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    archiveName \u003d \u0027pdfplusplus.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/commons/**\u0027"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/logic/**\u0027"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/model/**\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/storage/**\u0027"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/testutil/**\u0027"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/AppParametersTest**\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.include \u0027seedu/pdf/TestApp**\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.exclude \u0027seedu/pdf/ui/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.exclude \u0027seedu/pdf/ui/PdfListPanelTest**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.exclude \u0027seedu/pdf/ui/PdfCardTest**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            test.exclude \u0027seedu/pdf/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u0027site-name\u0027: \u0027PDF++\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-T12-4/main\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 3,
      "-": 221,
      "jetkan-yk": 12
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "PDF++ was developed by the https://cs2103-ay1819s2-t12-4.github.io/main/[T12-4] team. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lau Wei Tang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::weitanglau.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttps://github.com/WeiTangLau]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/weitanglau.html]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prithivi Raj"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "image::ptvrajsk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttps://github.com/ptvrajsk]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003d\"team/ptvrajsk.html\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jet Kan Yip Keng"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::jetkan-yk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttp://github.com/jetkan-yk]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/jetkan-yk.html]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jeremy Yiren Low"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::lormee94.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::github-icon.png[width\u003d30, link\u003dhttp://github.com/lormee94]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image:portfolio-icon.jpg[width\u003d30, link\u003dteam/lormee94.html]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 5,
      "-": 43,
      "jetkan-yk": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d PDF++ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":toc: left"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":toclevels: 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": ":plus: \u0026#43;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-T12-4/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":mainWindowURL: {repoURL}/blob/master/src/main/java/seedu/pdf/ui/MainWindow.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":helpWindowTestURL: {repoURL}/blob/master/src/test/java/seedu/pdf/ui/HelpWindowTest.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "By: `Team T12-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Software Overview"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* PDF++ is an all-in-one document management tool that allows users to easily manage and manipulate their files. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "_The current version of this application only deals with PDF files_."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* There are many unique features to the application such as the ability to search within the content of files,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "merging several files together, setting of deadlines and many more. These features can be referred to within the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c\u003cimplementation, Implementation\u003e\u003e Section of this document."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Developer Guide Usage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* This document is for developers who aim to further improve upon the application or change it to suit the needs of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "your target audience."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Each feature and design component has its own sub-heading and can be referred through the links in the table-of-contents. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "They contain sufficient diagrams and detailed explanations that will be extremely useful to you."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This section will assist you in setting up the project for the first time in your computer. This will allow you to work"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "on the application without any issue in the future."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "IntelliJ by default have Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialogue first)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Open link:{mainWindowURL}[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{helpWindowTestURL}[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Run the `seedu.pdf.MainApp` and try a few commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This section allows you to visualise the application in a top-down view, where you are able to see the general"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "structure of the different components within PDF++."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `.pptx` or `.xml` files used to create diagrams in this document can be found in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "link:{repoURL}/blob/master/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the pptx or xml file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "`Main` has only one class called link:{repoURL}/blob/master/src/main/java/seedu/pdf/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the PDF++ App."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Stores the data of the App in-memory."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Delete Image"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::SDforDeletePdf.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PdfListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".  `Logic` uses the `PdfBookParser` class to parse the user command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a pdf)."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DeleteCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* stores the Pdf Book data."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPdf\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Pdf Book`, which `Pdf` can reference. This would allow `Pdf Book` to only require one `Tag` object per unique `Tag`, instead of each `Pdf` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".OOP Diagram"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The Pdf Class Diagram below shows the structure of the Pdf class,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "which is the most used class throughout the application."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Pdf Class Diagram"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::PdfClassDiagram.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/pdf/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* can save the Pdf Book data in json format and read it back."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Classes used by multiple components are in the `seedu.pdfbook.commons` package."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#implementation]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `TAG...` can be used as `{nbsp}` (i.e. 0 times), `MyTag`, `TagA TagB TagC` etc."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Add Feature"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature is facilitated by both the *AddCommandParser* and *AddCommand*."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature adds the PDF file to the app using the path specified by your users."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Other features such as the \u003c\u003cRename Feature\u003e\u003e and \u003c\u003cOpen feature\u003e\u003e can only be performed on files that"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lormee94"
        },
        "content": "are added to the application."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The *AddCommandParser* uses the prefixes defined in *CliSyntax* to identify the different types of arguments that are entered along with the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lormee94"
        },
        "content": "`add` command. These arguments will then be used to construct a new Pdf which will represent the Pdf to be added."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The implementation of the *AddCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Activity Diagram"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The current PdfBook Model is checked to determine if identical Pdf has already been added."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. If such a Pdf already exists, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". The Pdf to be added is loaded into a third-party API to verify for any errors."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".. Pdf will be loaded as link:https://pdfbox.apache.org/docs/2.0.2/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[PDDocument],"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "which verifies the file that the user wishes to add to the program."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Created PDDocument will be closed after loading as it is unused."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".. Errors in adding the Pdf would throw *IOException*. Errors would most likely be due to:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File not found at location"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... Lack of user permissions to open file"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File has encryption"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File corruption"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Thrown *IOException* is intercepted, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Pdf is recorded in the Model and the changes are committed."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". *CommandResult* is returned upon successful execution."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The implementation design of this feature was built upon the original implementation used by the"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/se-edu/addressbook-level4[addressbook]. As the application is primarily meant to be operated through the CLI, it was decided to continue using the same prefix for the"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lormee94"
        },
        "content": "command input to keep its consistency."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Due to the handling of files, additional checks have to be added such as the use of"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to ascertain that it is a `.pdf` file and that it can be used with https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_] API."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Currently, PDF++ only supports PDF files, any other types of files will not be accepted."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lormee94"
        },
        "content": "As the goal of the application is to be the sole manager of files, the application will be upgraded to work"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lormee94"
        },
        "content": "with all files in v2.0."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::open[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Open feature"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `open` feature is facilitated by both the *OpenCommandParser* and *OpenCommand*."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Essentially upon opening a Pdf that is tracked by the application, the user will be able to"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lormee94"
        },
        "content": "execute the PDF with the operating system\u0027s default PDF reader application."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Open feature has the following syntax:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`open \u003cINDEX\u003e`#"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the `Pdf` that you wish to edit."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the Open feature."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: The user launches an application with either an existing set of `Pdf` or a"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lormee94"
        },
        "content": "new sample set of `Pdf` stored within as shown below."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Step 2: The user chooses a `Pdf` that they wish to open, in this case,`a.pdf`, and"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lormee94"
        },
        "content": "enters the `open` command into the CLI Interface, following the outlined Syntax as"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lormee94"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: Upon hitting enter to execute the command, the *OpenCommandParser* parses"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the input in the following method:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Extract the `INDEX` that is input that was entered by the user."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Verify that it contains a valid integer."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** This is done by initialising the `Index` objects that verify the above properties on"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "instantiation."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** If the supplied parameter is invalid a `ParseException` is thrown and the `open` command is"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "terminated."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Upon successfully parsing the input `Index`, a `OpenCommand` object is created with the relevant index"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "and returned to the `LogicManager` for execution."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4: The `LogicManager` attempts to execute the `OpenCommand` by supplying it the `model` and `commandHistory`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 5: The `OpenCommand` checks that the supplied `Index` matches a `Pdf` in the model and sources for the"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "default application within the `Operating System` to open the file."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 6: Finally, the `OpenCommand` supplies the default application with the file-path of the `Pdf` to open"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "and returns a successful `CommandResult` to the `LogicManager`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Should there be an issue with the parsing of the `Pdf` due to invalid directories or a corrupted `Pdf` file,"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the `CommandException` will be thrown and the `OpenCommand` will be terminated. A \"Fail Message\" will then be displayed to the user."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The implementation of the *OpenCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Open Command Activity Diagram"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::OpenCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "For more information about the behaviour of sourcing for the default application to open the"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Pdf, please refer to Java SE 9 class link:https://docs.oracle.com/javase/9/docs/api/java/awt/Desktop.html[Desktop]."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::open[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::rename[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Rename Feature"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `rename` feature is facilitated by both the *RenameCommandParser* and *RenameCommand*."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Essentially upon adding a Pdf to be tracked by the application, the user will be able to"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lormee94"
        },
        "content": "change certain attributes tied to the PDF such as the `Name` and tied to a particular Pdf."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".Rename Command Activity Diagram"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::RenameCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::rename[]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::move[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Move feature"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `move` feature is facilitated by both *MoveCommand* and *MoveCommandParser*."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature functions as a simplified version of \u003c\u003cRename Feature\u003e\u003e, as in nature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lormee94"
        },
        "content": "it is making an edit to the directory of the file. However, in addition to making changes"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to the directory in the application storage, it also ensures that the directory changes"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lormee94"
        },
        "content": "are reflected in the local filesystem."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The design consideration into separating move as a new command from edit factored in the"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lormee94"
        },
        "content": "purpose of the application; as a document manager, the term \"edit\" is synonymous with"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lormee94"
        },
        "content": "making content or characteristic changes when it is applied in the context of documents."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Move feature has the following syntax:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`move`#"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`move \u003cINDEX\u003e \u003cNEWDIRECTORY\u003e`#"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file that you wish to move."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cNEWDIRECTORY\u003e` refers to the address of the new location the file is to be moved."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Entering `move` without `\u003cINDEX\u003e` or  `\u003cNEWDIRECTORY\u003e` will open the default file"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lormee94"
        },
        "content": "selection GUI for the user to select the file directly."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `move` feature."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface of the application, the user chooses a `Pdf` that"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lormee94"
        },
        "content": "they wish to move, and enters the `move` command into the CLI Interface, following"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the outlined Syntax as illustrated below."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Step 1"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MoveFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lormee94"
        },
        "content": "In this scenario, there is a file *document.pdf* in the windows _Desktop_ directory, and"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the `move` command entered is intended for the file to be moved to the windows _Documents_"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lormee94"
        },
        "content": "directory."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: After executing the command, the `MoveCommandParser` parses the input into"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lormee94"
        },
        "content": "relevant objects that are required to be executed by the `MoveCommand` object. In"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lormee94"
        },
        "content": "particular, it ensures that there are correctly two arguments passed as described in the"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lormee94"
        },
        "content": "above Syntax. Upon parsing, the parser then creates a new `MoveCommand` that will execute"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the user\u0027s input."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The `MoveCommand` is then executed. Successful execution of the command would return"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lormee94"
        },
        "content": "a *CommandResult* object, while unsuccessful execution due to validation failure will throw"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lormee94"
        },
        "content": "a *CommandException*."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::move[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::merge[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#merge-feature]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Merge feature"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `merge` feature is facilitated by both *MergeCommand* and *MergeCommandParser*."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This feature utilise the"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lormee94"
        },
        "content": "API to append two or more PDFs and create a new file with the merged content. As there will be one"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lormee94"
        },
        "content": "additional file added to the application, this feature also implicitly performs \u003c\u003cAdd Feature\u003e\u003e to add the new"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lormee94"
        },
        "content": "PDF to the application."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The implementation of the *MergeCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Merge Command Activity Diagram"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The provided indices are checked to be valid i.e. referring to a specific Pdf in the PdfBook."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. If there is at least one invalid index, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The required Pdfs are retrieved from the PdfBook based on indices."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". A File object is created for each Pdf which allows file operations to be performed on the Pdf."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_] is created. The directory must be set for the merged file prior to merging,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "which also includes the name of the file. By default, the directory of the Pdf based on the first index is used."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". A unique name is created for the merged file and combined with the aforementioned directory to create the full directory for the merged file."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. To avoid issues with duplicate names at the directory, the name is created based on hash code. The created name will also be verified unique at the directory - and changed if necessary."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Files will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lormee94"
        },
        "content": "which is an indicator if the application can perform other operations on the Pdf that need it to be handled as a `.pdf` file."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Errors in accessing Pdf would throw *IOException*. Errors would most likely be due to:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File not found at location"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... Lack of user permissions to open file"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File has encryption"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File corruption"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Thrown *IOException* is intercepted, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Files are added to the PDFMergerUtility."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Errors in adding to PDFMergerUtility would throw *IOException*. The cause for error would be similar to above."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Thrown *IOException* is intercepted, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". All loaded *PDDocument* are closed."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". A new Pdf is created to represent the merged file created."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Pdf is recorded in the Model and the changes are committed."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". *CommandResult* is returned upon successful execution."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This sequence diagram demonstrates the interactions involved from start of *MergeCommandParser* to end of *MergeCommand* execution:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Merge Command Sequence Diagram"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The default directory of the merged file is currently set to the directory of the first index of the files to be merged. There were considerations to make flexibility in the merge command input"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to allow for the user to specify the desired directory of the merged file. As the current version of *_PDF++_* is focused on a working product, it was decided to simplify the command to focus on"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the merge operation. Users can also make use of \u003c\u003cMove feature\u003e\u003e to move the file; such implementation is more intuitive if the user is going to be using the application for everyday needs."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lormee94"
        },
        "content": "For the merging of files, the current implementation involves adding all files to a single https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to merge together. One alternative to merging multiple files would be to create a separate *PDFMergerUtility* for every pair of files and merge the content recursively into a final merged file. The"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lormee94"
        },
        "content": "advantage of this would be better stability in performance when merging multiple large files as there will be lesser workload on each *PDFMergerUtility*. However, this would undoubtedly cause the performance"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "to be slower as more merge operations are done overall. As the case of instability occurs only in very large files, it was decided to go with a focus on performance."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lormee94"
        },
        "content": "There are performance issues encountered when performing the merge operations with many files of large size. In future versions, the merge operation has to not only ensure"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lormee94"
        },
        "content": "performance but stability as well. By v2.0, the merging will be able to support larger files without any concern for the application to freeze or crash while merging."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Currently, there are no means to make the merging operation perform faster due to the merging operation being performed through the"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_] API."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::merge[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Delete feature"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `delete` feature is facilitated by both *DeleteCommand* and *DeleteCommandParser*."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature performs either a _soft_ or _hard_ remove operation on a file in the application"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lormee94"
        },
        "content": "based on the index provided."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The implementation of the *DeleteCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Delete Command Activity Diagram"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DeleteCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* _Soft_ delete is defined as removing a file from the application but not from the local filesystem;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the physical file is left intact within the user\u0027s operating system, but the user will not be able to access or"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lormee94"
        },
        "content": "use the features of the application on said file - unless it is added back to the application."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* _Hard_ delete is defined as removing a file both from the application and the local filesystem;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the physical file will be deleted and the user will not be able to access or perform any operations"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lormee94"
        },
        "content": "on the file, either through the application or through the user\u0027s operating system."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "As of v1.4, there is no way to completely undo the _hard_ delete operation. When the file is deleted from the"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "filesystem, it is permanently erased."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `delete` feature has the following syntax:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`delete \u003cINDEX\u003e`#"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`delete \u003cINDEX\u003e hard`#"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cINDEX\u003e` refers to the index of the file in the list that you wish to perform the `action` on."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* If the keyword `hard` is not specified, the _soft_ delete operation will be performed. Otherwise, the _hard_"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lormee94"
        },
        "content": "delete operation will be performed."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The index value can be referenced from the list in the main application, or from the"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lormee94"
        },
        "content": "result of the `Filter`, `Find` or `List` feature."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Feature breakdown"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `delete` feature."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: From the main interface, the user chooses a file that they wish to delete, and"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lormee94"
        },
        "content": "enters the `delete` command into the CLI Interface, following the outlined Syntax mentioned."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: Upon hitting enter to execute the command, the *DeleteCommandParser* parses"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the input into relevant objects that are required to be executed by the *DeleteCommand*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lormee94"
        },
        "content": "object. Upon parsing, the parser then creates a new *DeleteCommand* that will execute the"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "user\u0027s input."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: The *DeleteCommand* is then executed. Successful execution will return a"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*CommandResult* indicating that the changes have been made."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Delete Command Activity Diagram"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::DeleteCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Delete Command Sequence Diagram"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DeleteCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::clear[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Clear feature"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `clear` feature is facilitated by both *ClearCommand* and *ClearCommandParser*."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This feature removes all the PDF files that were previously stored in PDF++. It is similar to"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the \u003c\u003cDelete feature\u003e\u003e in that it removes files from the application, with multiple files instead of"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lormee94"
        },
        "content": "one at a time. However, it differs that it does not have the option to delete the file from the local"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lormee94"
        },
        "content": "filesystem."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `Clear` feature has the following syntax:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`clear`#"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* The `clear` command will be executed regardless if there is any invalid text that comes after the command"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* All files will be removed from the application, but not from the local filesystem."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Since the `clear` feature is very easily executed, if you have accidentally entered the `clear` command and"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lormee94"
        },
        "content": "wish to revert the action, please refer to \u003c\u003cUndo/Redo feature\u003e\u003e for more information."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Clear Command Activity Diagram."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::ClearCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::clear[]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::deadline[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Deadline feature"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `deadline` feature is facilitated by both *Deadline*, *DeadlineCommand* and *DeadlineCommandParser*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature allows you to set or remove deadlines of the file specified by you from PDF++."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The deadlines will be recorded and displayed both in the list of files as well as in the information panel"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lormee94"
        },
        "content": "for each individual file."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The implementation of the *Deadline* model can be represented in the following class diagram:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Class Diagram"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "A *Deadline* model has a https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html[_Java.time.LocalDate_]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "`date` attribute and a `boolean isDone`. The `date` is the date for the deadline assigned to the file, the `isDone` attribute"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "evaluates to `true` if the deadline is set to be done, `false` if it is not done."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The implementation of the *DeadlineCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Command Activity Diagram"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The provided index is checked to be valid i.e. referring to a specific Pdf in the PdfBook."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The required Pdf is retrieved from the PdfBook based on the index."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". A duplicate Pdf of the required Pdf is created."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". For cases of assigning a new deadline,"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. The duplicate Pdf is assigned with new deadline attributes."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". For cases of setting an existing deadline as done or removed,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. The existing deadline from the retrieved Pdf is tested to be a valid deadline."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "... If the existing deadline is a valid deadline, the duplicate Pdf is assigned with new deadline attributes."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "... If the existing deadline is not a valid deadline, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The duplicate Pdf with new deadline attributes is recorded in the Model and the changes are committed."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". *CommandResult* is returned upon successful execution."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This sequence diagram demonstrates the interactions involved from start of *DeadlineCommandParser* to end of *DeadlineCommand* execution:"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Interactions Inside the Logic Component for the `deadline 1 done` Command"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "After a deadline has been added to the PDF file specified, the date will be color-coded according to days"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "remaining from the current day until the deadline date."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "There are some discrepancy for the representation of a file without a deadline in the Jackson adapted storage and the Pdf book model."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In the Pdf book model, files without a deadline will be assigned with the default deadline whereas the date is set to"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html[_LocalDate.MIN_]."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In the Jackson adapted storage, we simply set the deadline attribute of a file without a deadline as empty."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In our previous implementation, we used to assign the default date LocalDate.MIN to the deadline attribute in the Jackson adapted Storage"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "as well, however, this might confuse the users if they read the _pdfplusplus.json_ and find out the non-existence deadline."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Besides, this implementation also makes the displaying process of deadlines through the UI tedious."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In order to comply with the two distinct representation of deadline model, we implemented a default deadline `toString` method that"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "prints the Pdf book model version, and a modified `toJsonString` that prints the Jackson adapted storage version of the deadline."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Our current color-coded deadlines are predefined based on the due date from the current date. Suggested improvement for this area"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "would be providing user-defined color codes for a better user experience of our application."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::deadline[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Help feature"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `help` feature brings up the UserGuide in a browser window as a html file. Following other"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lormee94"
        },
        "content": "features, the command is parsed and a *HelpCommand* object is created to be executed."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `help` feature has the following syntax:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`help`#"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lormee94"
        },
        "content": "After execution, the user will be directed to the start of the _UserGuide.adoc_ as shown."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Users can reference from the UserGuide directly on how to navigate the guide."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".User Guide"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::UserGuide1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::exit[]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Exit feature"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `exit` feature is facilitated by *ExitCommand*. This feature allows you to exit from _PDF++_."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `exit` feature has the following syntax:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`exit`...#"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* The `exit` command will be executed regardless if there is any invalid text that comes after the command"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Your files and commands are immediately stored after execution and can be retrieved on"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lormee94"
        },
        "content": "reopening the application."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::exit[]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The list feature is facilitated by *ListCommand*."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature will display all of the files currently stored within the application at the"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lormee94"
        },
        "content": "main interface. By default, all of the files will be displayed when the application is"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lormee94"
        },
        "content": "started. However, the display of the interface can be changed to reflect the results of"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c\u003cfind-feature, Find feature\u003e\u003e or \u003c\u003cfilter-feature, Filter feature\u003e\u003e."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Certain features such as \u003c\u003cmerge-feature, Merge Feature\u003e\u003e rely on the index of the file(s) displayed on"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the main interface. Since the `find` or `filter` feature would list a sample of all"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the files at the main interface, no commands can be executed on the files not included in"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the results. Hence, the `list` feature is added to allow for a \"reset\" of the view of the files."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `List` feature has the following syntax:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`list`#"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#find-feature]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `find` feature is facilitated by *FindCommand* and *FindCommandParser*."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature lists a subset of all the files in the application based on the keyword(s)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lormee94"
        },
        "content": "provided. Using the keyword(s), the application will check the names of all files, as"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "well as the content of the text within the files prior to revealing the results."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `find` feature has the following syntax:"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: [.big]#`find \u003cKEYWORD\u003e ...`#"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `\u003cKEYWORD\u003e` refers to the word that the application will use as a reference to find"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lormee94"
        },
        "content": "files. There must be at least one provided."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Resume`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Introduction`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Activity Diagram"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::FindCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The following image briefly summarises the interactions of the `find` command with"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "some of its immediate components."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".General Internal Illustration of Find Command."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::FindCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "When the user enters the CLI Input for the find command, the command is first passed"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "from the `LogicManager` to the `PdfBookParser` will carry out the following steps."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "1. The user inputs a request to `find` a keyword within the files of the application."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `find keyword`."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2. The `PdfBookParser` creates a new `FindCommandParser` upon recognising that the user"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "wishes to use the `find` feature."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "3. Parse method within the `FindCommandParser` would create a `NameContainsKeywordPredicate` which will allow"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  the `Model` to filter its list of files to show the user the requested files."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4. Finally, the `FindCommand` object is returned to the `LogicManager`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Upon receiving the `FindCommand` from the `PdfBookParser` the following steps are carried out."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "1. The `execute` method is invoked from the `LogicManager` with the parameters of `model` and `history`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2. The `model` then uses the `NameContainsKeywordPredicate` and runs the `test` method to check each file and"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "verify that it fulfils the predicate. This is so that the `model` can update itself to present the list of"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "files that the user wishes to view."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "3. The `test` method invokes classes from the external link:https://pdfbox.apache.org/index.html[Apache PDFBox] library, namely `PDDocument` and"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`PDFTextStripper` to extract the contents of the existing files."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4. The extracted content is then checked to verify if it contains the `keyword` input by the user."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "5. Further checks are also done to confirm if each file\u0027s name contains the `keyword` as well."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "6. The `model` then updates itself and stores the current action in the `history` object."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "7. Finally, the `FindCommand` returns a `CommandResult` back to the `LogicManager` for follow up"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "action."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This is a brief explanation of the inner workings of the `FindCommmand` and its execution method."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Our application also implements several security features such as the ability of users to `Encrypt` and"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`Decrypt` their files. Hence, a major security concern was to prevent the `FindCommand` from searching"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "through the contents of files that are previously encrypted. This is crucial to prevent the leakage of data"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "as malicious users might simply utilize the `FindCommand` to extract information from the tracked files."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". The main issue with the current implementation of the `FindCommand` is its slow speeds with respect to"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "large files or files that contain a large string of text files. Hence, a possible consideration you might"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "wish to improve upon is to \"upgrade\" this feature by improving its speed of this feature."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". Yet another enhancement to this feature you might wish to implement is the use of Optical Image Recognition,"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "otherwise known as OCR. This will allow the application to translate images within the file to words which would further"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "improve the ability of the application to look through content even if they are images."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#filter-feature]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `filter` feature is facilitated by *FilterCommand* and *FilterCommandParser*."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This feature is similar to \u003c\u003cfind-feature, Find feature\u003e\u003e in that it lists a subset of all the files"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lormee94"
        },
        "content": "in the application, except that it will list the files based on the tag of the file."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `filter` feature has the following syntax:"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: [.big]#`filter t/\u003cTAG\u003e ...`#"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `\u003cTAG\u003e` refers to a tag that is valid, i.e. a tag that was previously set on a file."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* All tags need to have the prefix #/t# to differentiate between each tag."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Filter Command Activity Diagram"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::FilterCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The inner workings of `FilterCommand` can be explained in the following steps should you need to modify it."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Given that they are extremely similar to that of the \u003c\u003cfind-feature, Find Feature\u003e\u003e, you may refer to that should"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "you need more information."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` component invokes a `PdfBookParser` to parse the input command."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** An input command such as `filter t/school t/lecture`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `PdfBookParser` then decodes the instruction by identifying the keyword, which is"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`select` and creates a new `FilterCommandParser` to parse the necessary parameters."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** These parameters are mainly each tag specified as `t/TAG`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The `FilterCommandParser` creates a predicate `TagContainsKeywordsPredicate` which tests each file"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "if it contains the specified tags."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `FilterCommandParser` then parses the parameter, `FilterCommand` object that is returned to"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the `LogicManager` to execute."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` supplies the `FilterCommand` with the existing application `model` and"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`command history` and executes it."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The execution of the `FilterCommand` mainly contains the following step."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Provides `model` with the newly formed `TagContainsKeyworkdsPredicate` to update the list of files with only"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "those that contain the input tags."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** This change causes the invocation of the `UI` component to display the selected item to the user."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, upon successful execution, a `CommandResult` is returned to the `LogicManager` for other operations."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** If any errors occur mid-execution, a `CommandException` is thrown. These errors may occur due to:"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** Invalid parameter inputs."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Select feature"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The select feature is facilitated by `SelectCommand` and `SelectCommandParser`. This allows users to select a file and view"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "more information pertaining to that selected file. They are able to view features such as its size,"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "any deadlines assigned to it, its name, and directory."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `Select` feature has the following syntax:"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The inner workings of `SelectCommand` can be explained in the following steps should you need to modify it."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` component invokes a `PdfBookParser` to parse the input command."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** An input command such as `select 1`."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `PdfBookParser` then decodes the instruction by identifying the keyword, which is"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`select` and creates a new `SelectCommandParser` to parse the necessary parameters."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `SelectCommandParser` then parses the parameter, in this case `1` and creates a new"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`SelectCommand` object that is returned to the `LogicManager` to execute."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` supplies the `SelectCommand` with the existing application `model` and"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`command history` and executes it."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The execution of the `SelectCommand` sets the `selectedPdf` property of the model."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** This change causes the invocation of the `UI` component to display the selected item to the user."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, upon successful execution, a `CommandResult` is returned to the `LogicManager` for other operations."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** If any errors occur mid-execution, a `CommandException` is thrown. These errors may occur due to:"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** Invalid parameter inputs."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The sort feature is facilitated by `SortCommand` and `SortCommandParser`."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The sort command allows the user to arrange the list of files tracked by the application in a specified order \u0026 criteria."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The order can be ascending (`up`) or descending (`down`) while the criteria can be `name`, `deadline` or `size`."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `Sort` feature has the following syntax:"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `sort CRITERIA ORDER`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `sort deadline up`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `sort name down`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Listed below is a brief explanation of the inner workings of the sort feature."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` component invokes a `PdfBookParser` to parse the input command."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** An input command such as `sort deadline up`."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `PdfBookParser` then decodes the instruction by identifying the keyword, which is"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`select` and creates a new `SortCommandParser` to parse the necessary parameters."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `SortCommandParser` then parses both parameters and creates a `SortCommand` object that is"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "returned to the `LogicManager` to execute."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The parameters are the `CRITERIA` and `ORDER` specified by the user."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` supplies the `SortCommand` with the existing application `model` and"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`command history` and executes it."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* The execution of the `SortCommand` contains the following steps:"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The list of existing files are obtained from the `Model` component"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** This list is sorted with the given `CRITERIA` and `ORDER`."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The sorted list is set as the new default list of the `Model` component."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* This change causes the invocation of the `UI` component to display the new list of files to the user."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, upon successful execution, a `CommandResult` is returned to the `LogicManager` for other operations."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** If any errors occur mid-execution, a `CommandException` is thrown. These errors may occur due to:"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** Invalid parameter inputs such as invalid `CRITERIA` or `ORDER`."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "All other operations carried out after `sort` that require an `INDEX` to be supplied must follow the newly"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "set indexes of the files tracked by the application."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::tag[]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Tag feature"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The tag feature is facilitated by `TagCommand` and the `TagCommandParser`."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This allows users to set tags to files that are tracked by the application that allows them to easily organize and"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "view these files with other operations supported by our application such as the \u003c\u003cfilter-feature, Filter Feature\u003e\u003e."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In order to perform the Tag Command the user needs to specify a `PREFIX` that is denoted by `-a` or `r` to signify the"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "addition or removal of a tag. The `INDEX` that refers to the file that the user wishes to interact with and the tags"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "themselves that are represented in the `t/TAG` format where `TAG` text that the user wishes to use as a tag."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `Tag` feature has the following syntax:"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `tag PREFIX INDEX t/TAG...`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `tag 1 -a t/SEROCKS`"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `tag 1 -r t/SEROCKS`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `tag 2 -a t/Urgent t/Resume`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The inner workings of `TagCommand` can be briefly explained in the following steps should you need to modify it."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` component invokes a `PdfBookParser` to parse the input command."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** An input command such as `tag 1 -a t/SEROCKS`."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `PdfBookParser` then decodes the instruction by identifying the keyword, which is"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`select` and creates a new `TagCommandParser` to parse the necessary parameters."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `TagCommandParser` then parses the relevant parameters and creates a new"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`SortCommand` object that is returned to the `LogicManager` to execute. The parsed parameters include:"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `PREFIX` which, as mentioned above, indicates if the tag is to be added or removed from the file."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `INDEX` which indicates to the command which file that the user wishes to interact with."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** `t/TAG` which contain the name of the tag(s) that the user wishes to add to the specified file."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The `LogicManager` supplies the `TagCommand` with the existing application `model` and"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`command history` and executes it."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* The execution of the `TagCommand` contains the following steps:"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The file that the user wishes to add the tags to is obtained from the `model`."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The parsed `tag(s)` are added to the chosen file."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** The `model` is then updated with the newly modified file."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** Changes are reflected in the `UI` component by new labels forming under the name of the file."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, upon successful execution, a `CommandResult` is returned to the `LogicManager` for other operations."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** If any errors occur mid-execution, a `CommandException` is thrown. These errors may occur due to:"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*** Invalid parameter inputs."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `Tag Feature` only allows for tags that do not contain spaces and are alphanumeric."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::tag[]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// tag::History[]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d History feature"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The history feature is facilitated by `HistoryCommand`."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature displays the previous commands entered since the start of the current session"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "lormee94"
        },
        "content": "of the application; each time the application is closed, the command history will be erased."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `history` feature has the following syntax:"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#`history`#"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* When there is no command history, a message will be shown to notify the user."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "lormee94"
        },
        "content": "// end::History[]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// tag::fileprotection[]"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d File Protection"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ has a robust in-built file protection system which allows you to encrypt or decrypt any"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF files you want. These features utilises the"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/AccessPermission.html[_AccessPermission_], and"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.html[_StandardProtectionPolicy_]."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "An \u003c\u003cencrypted-file, encrypted file\u003e\u003e is a file that is protected with a password. The terms `protect` and `encrypt` will be used interchangeably."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can visit \u003c\u003cEncryption feature\u003e\u003e and \u003c\u003cDecryption feature\u003e\u003e to understand more about the respective feature."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Encryption feature"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `encrypt` feature is facilitated by both *EncryptCommand* and *EncryptCommandParser*."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The implementation of the *EncryptCommand* execution is summarised in the following activity diagram:"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Encrypt Command Activity Diagram"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The provided index is checked for validity i.e. referring to a specific Pdf in PdfBook."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf specified via the index is retrieved from the PdfBook."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A `File` object is created for the Pdf."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The `File` will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "which is an indicator that the `File` is a *PDF* document that is uncorrupted and"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "not protected with a password."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Error in loading Pdf as *PDDocument* would throw an *IOException*. Common reasons for error are:"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... File not found in location"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Lack of user permissions to open File"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Protected File"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Corrupted File"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/AccessPermission.html[_AccessPermission_], and"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.html[_StandardProtectionPolicy_]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "are created. The password specified will be passed to `StandardProtectionPolicy` for the purpose of setting security settings for the"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`PDDocument`."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A protected Pdf will be saved and closed."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Error in encrypting the file will throw an *IOException*. Common reasons for error are:"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Excessive long password"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Empty password"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf is recorded in the \u003c\u003cModel component\u003e\u003e and the changes are saved."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A *CommandResult* is returned upon successful exception of *EncryptCommand*."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This sequence diagram demonstrates the \u003c\u003cmain-success-scenario\u003e\u003e from the"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*LogicManager* to the end of *EncryptCommand* execution:"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Encrypt Command Sequence Diagram"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Edit password of an encrypted file"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Alternative 1 (current choice): Execute *DecryptCommand* then *EncryptCommand*"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Due to security reasons, it was decided to focus on encrypting an unprotected Pdf."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You will need to use \u003c\u003cDecryption feature\u003e\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "before encrypting it with a new password. This is to ensure your intent in changing the password,"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "as the current version *PDF++* does not support `Forget Password` feature."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** However, this process is inefficient as you will need to enter 2 commands instead of 1."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Alternative 2: Change the password of an encrypted file"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** This minimised the number of commands to be executed, but there are several security concerns as mentioned above."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d A sophisticated protection system"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Multiple adjustments to protect your interest"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". \u003c\u003cHistory feature\u003e\u003e will not show the executed `EncryptCommand` which includes the password of the file."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The \u003c\u003cUndo/Redo feature [Coming in v2.0]\u003e\u003e is temporarily disabled until a solution that"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "will not comprise your privacy has been found."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Pressing up in the command box will not show the `EncryptCommand` that was previously executed."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "There are concerns of accidental encryption of a file with a wrong password. In *PDF++* v2.0,"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the *EncryptCommand* will prompt you to re-enter the password as a form of confirmation message."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If there is a mismatch of the two passwords entered, the command will not be executed."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Decryption feature"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The current Implementation of *DecryptCommand* is very similar to \u003c\u003cEncryption feature\u003e\u003e."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The part where it is implemented differently will be specifically marked with a `*` for your convenience."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `decrypt` feature is facilitated by both *DecryptCommand* and *DecryptCommandParser*."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The implementation of the `DecryptCommand` execution is summarised in the following activity diagram."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Activity Diagram"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The provided index is checked for validity i.e. referring to a specific Pdf in PdfBook."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf specified via the index is retrieved from the PdfBook."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A `File` object is created for the Pdf."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The `File` will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "with the specified password, which is an indicator that the `File` is a *PDF* document that is uncorrupted, protected and the password"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "provided is valid *."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Error in loading Pdf as *PDDocument* would throw an *IOException* and invalid password would throw a *CommandException*."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Common reasons for error are:"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... File not found in location"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Lack of user permissions to open File"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Unprotected File *"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Corrupted File"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Wrong password *"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Upon success loading of the PDDocument, the security will be removed. *"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". An unprotected * Pdf will be saved and closed."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf is recorded in the \u003c\u003cModel component\u003e\u003e and the changes are saved."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A *CommandResult* is returned upon successful exception of *DecryptCommand*."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This sequence diagram demonstrates the \u003c\u003cmain-success-scenario\u003e\u003e from the"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*LogicManager* to the end of *DecryptCommand* execution:"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Sequence Diagram"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d A sophisticated protection system"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Multiple adjustments to protect your interest"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". \u003c\u003cHistory feature\u003e\u003e will not show the executed `EncryptCommand` which includes the password of the file."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The \u003c\u003cUndo/Redo feature [Coming in v2.0]\u003e\u003e is temporarily disabled until a solution that"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "will not comprise your privacy has been found."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Pressing up in the command box will not show the `EncryptCommand` that was previously executed."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "If unauthorised personnel obtained the password of your files through illegal means,"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "they can potentially set the file with a new password. This will hinder your access to"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "your files."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "However, With 2-Factor Authentication, there is an additional layer of protection"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "that prevents these personnel from changing the passwords of your files. This"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ensures that only you/any authorised personnel can decrypt your files."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "In *PDF++* v2.0, the *DecryptCommand* will support for the 2FA feature as mentioned above."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If this feature is highly demanded, this feature will be implemented to *EncryptCommand* too."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// end::fileprotection[]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature [Coming in v2.0]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedPdfBook`."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "It extends `PdfBook` with an undo/redo history, stored internally as an `pdfBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `VersionedPdfBook#commit()` -- Saves the current pdf book state in its history."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `VersionedPdfBook#undo()` -- Restores the previous pdf book state from its history."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `VersionedPdfBook#redo()` -- Restores a previously undone pdf book state from its history."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitPdfBook()`, `Model#undoPdfBook()` and `Model#redoPdfBook()` respectively."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPdfBook` will be initialized with the initial pdf book state, and the `currentStatePointer` pointing to that single pdf book state."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th pdf in the pdf book. The `delete` command calls `Model#commitPdfBook()`, causing the modified state of the pdf book after the `delete 5` command executes to be saved in the `pdfBookStateList`, and the `currentStatePointer` is shifted to the newly inserted pdf book state."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new pdf. The `add` command also calls `Model#commitPdfBook()`, causing another modified pdf book state to be saved into the `pdfBookStateList`."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If a command fails its execution, it will not call `Model#commitPdfBook()`, so the pdf book state will not be saved into the `pdfBookStateList`."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 4. The user now decides that adding the pdf was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoPdfBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous pdf book state, and restores the pdf book to that state."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial pdf book state, then there are no previous pdf book states to restore. The `undo` command uses `Model#canUndoPdfBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoPdfBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the pdf book to that state."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If the `currentStatePointer` is at index `pdfBookStateList.size() - 1`, pointing to the latest pdf book state, then there are no undone pdf book states to restore. The `redo` command uses `Model#canRedoPdfBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the pdf book, such as `list`, will usually not call `Model#commitPdfBook()`, `Model#undoPdfBook()` or `Model#redoPdfBook()`. Thus, the `pdfBookStateList` remains unchanged."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitPdfBook()`. Since the `currentStatePointer` is not pointing at the end of the `pdfBookStateList`, all pdf book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire pdf book."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the pdf being deleted)."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of pdf book states."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedPdfBook`."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `FINE` : Details that are not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file directory, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The files in link:{repoURL}/blob/master/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The files in link:{repoURL}/blob/master/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Modifying the template files in link:{repoURL}/blob/master/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.pdf.ui` package."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "..  Hybrids of unit and integration tests. These tests are checking multiple code units as well as how they are connected together. +"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `seedu.pdf.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".  Update the version number in link:{repoURL}/blob/master/src/main/java/seedu/pdf/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "A project often depends on third-party libraries. For example, Pdf Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all pdfs in the list."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/blob/master/src/main/java/seedu.pdf/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Modify the switch statement in link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the pdf book, but the model API does not support such functionality at the moment. Your job is to implement an API method so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the pdf book."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** The link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/Model.java[`Model`] and the link:{repoURL}/blob/master/src/main/java/seedu.pdf/model/PdfBook.java[`PdfBook`] API need to be updated."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`] and link:{repoURL}/blob/master/src/main/java/seedu.pdf/model/pdf/Pdf.java[`Pdf`] classes can be used to implement the tag removal logic. link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`] allows you to update a pdf, and link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`] allows you to update the tags."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/PdfBook.java[`PdfBook`]. Loop through each pdf, and remove the `tag` from each pdf."
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/blob/master/src/main/java/seedu.pdf/model/ModelManager.java[`ModelManager`] should call `PdfBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your pdf book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last pdf in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside pdf cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".UI Before Tag"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".UI After Tag"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** The tag labels are created inside link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/PdfCard.java[the `PdfCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** You may wish to modify link:{repoURL}/blob/master/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** You can modify the existing test methods for `PdfCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/blob/master/src/main/java/seedu.pdf/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Ui Before Result"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".UI After Result"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/blob/master/src/main/java/seedu.pdf/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Refer to link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "*** The system tests link:{repoURL}/blob/master/src/test/java/systemtests/PdfBookSystemTest.java[`PdfBookSystemTest#assertCommandBoxShowsDefaultStyle() and PdfBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify the link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the pdf book."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".UI Before Status"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".UI After Status"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** link:{repoURL}/blob/master/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the pdf book is updated."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Modify the constructor of link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of pdfs when the application just started."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Use link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/StatusBarFooter.java[`StatusBarFooter#handlePdfBookChangedEvent(PdfBookChangedEvent)`] to update the number of pdfs whenever there are new changes to the pdfbook."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** For tests, modify link:{repoURL}/blob/master/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save directory and sync status."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** For system tests, modify link:{repoURL}/blob/master/src/test/java/systemtests/PdfBookSystemTest.java[`PdfBookSystemTest`] to also verify the new total number of pdfs status bar."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the pdf book to the cloud. However, the current implementation of the application constantly saves the pdf book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the pdf book storage."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Add a new method `backupPdfBook(ReadOnlyPdfBook)`, so that the pdf book can be saved in a fixed temporary directory."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Add the API method in link:{repoURL}/blob/master/src/main/java/seedu/pdf/storage/PdfBookStorage.java[`PdfBookStorage`] interface."
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** Implement the logic in link:{repoURL}/blob/master/src/main/java/seedu/pdf/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/blob/master/src/main/java/seedu.pdf/storage/JsonPdfBookStorage.java[`JsonPdfBookStorage`] class."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Scenario:* You are a software maintainer for `pdfbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a pdf specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first pdf to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first pdf."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add new test method to link:{repoURL}/blob/master/src/test/java/seedu/pdf/logic/parser/PdfBookParserTest.java[`PdfBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/logic/parser/PdfBookParser.java[`PdfBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/seedu/pdf/logic/parser/PdfBookParserTest.java[`PdfBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PdfCard`"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] s to display a remark for each pdf later."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/blob/master/src/main/resources/view/PdfListCard.fxml[`PdfListCard.fxml`]."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add FXML annotation in link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/guitests/guihandles/PdfCardHandle.java[`PdfCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/pdf/Directory.java[`Directory`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Pdf` to support a `Remark` field"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the pdf will be created without a remark)."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/pdfbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPdf` class"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "We now have `Remark` s for `Pdf` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/storage/JsonAdaptedPdf.java[`JsonAdaptedPdf`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Fix `invalidAndValidPdfPdfBook.json`, `typicalPdfsPdfBook.json`, `validPdfBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PdfBuilder`"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Since `Pdf` can now have a `Remark`, we should add a helper method to link:{repoURL}/blob/master/src/test/java/seedu/pdf/testutil/PdfBuilder.java[`PdfBuilder`], so that users are able to create remarks when building a link:{repoURL}/blob/master/src/main/java/seedu.pdf/model/pdf/Pdf.java[`Pdf`]."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/blob/master/src/test/java/seedu/pdf/testutil/PdfBuilder.java[`PdfBuilder`]. This method will create a new `Remark` for the pdf that it is currently building."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Try and use the method on any sample `Pdf` in link:{repoURL}/blob/master/src/test/java/seedu/pdf/testutil/TypicalPdfs.java[`TypicalPdfs`]."
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PdfCard`"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Our remark label in link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/main/java/seedu/pdf/ui/PdfCard.java[`PdfCard`]\u0027s constructor to bind the `Remark` field to the `Pdf` \u0027s remark."
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Modify link:{repoURL}/blob/master/src/test/java/seedu/pdf/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPdf(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a pdf."
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* prefers desktop app over other types"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |organized student |rename the PDFs to any valid name supported by the operating system |keep my PDFs organized"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |lazy user |filter my PDFs based on the tags |so that I can see all the files with the same tag in the app"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a pdf |remove entries that I no longer need"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |user |find a pdf by name |locate details of PDFs without having to go through the entire list"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* * *` |user with different tasks and deadlines |set due dates for my PDFs |be notified of upcoming deadlines and know the files required for that task"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`* *` |student |view my productivity analysis and estimate time to get work done |allocate sufficient time to finish my homework \u0026 assignments before deadlines"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |user |view clashing tasks/appointments |be notified and make changes"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |class tutor |obtain the statistics of the exam |evaluate the performance of the exam"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |teacher |create new exam paper |create formatted online exam paper easily"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "|`*` |NUS student |submit my files to LumiNUS with command lines |submit files without using an internet browsers"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Use case: Add new PDF file"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*System: PDF{plus}{plus}*  +"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Actor: Student* +"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*MSS* +"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "1.  User types `add f/FILEPATH` into the CLI Input."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2.  User presses enter."
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "3.  PDF++ makes a record of the relevant attributes of the selected PDF."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Extensions* +"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "lormee94"
        },
        "content": "3a. User loads an invalid file (not a pdf). +"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "lormee94"
        },
        "content": "- 3a1. PDF++ shows an error message to user."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "lormee94"
        },
        "content": "- 3a2. User repeats Step 1 and 2 to add a valid pdf into PDF++. +"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "lormee94"
        },
        "content": "  Use Case resumes at step 3."
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Use case: Find keyword in files within PDF++"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*System: PDF{plus}{plus}*  +"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Actor: Student* +"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*MSS* +"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "lormee94"
        },
        "content": "1.  User types `find KEYWORD`."
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2.  User presses enter."
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "lormee94"
        },
        "content": "3.  PDF++ Returns a list of files that contain the keyword in its names or content. +"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "*Extensions* +"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2a. User input invalid data. +"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "lormee94"
        },
        "content": "- 2a1. PDF++ throws an exception to alert the user."
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "lormee94"
        },
        "content": "- 2a2. User repeats Step 1 to 3 to search till a valid `KEYWORD` is entered."
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2b. User inputs a `KEYWORD` that is not in any of the files. +"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "lormee94"
        },
        "content": "- 2b1. PDF++ Returns an empty list. +"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Use case: Delete PDF file within PDF++"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*System: PDF{plus}{plus}*  +"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*Actor: Student* +"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*MSS* +"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list pdfs"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2.  PdfBook shows a list of pdfs"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific pdf in the list"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4.  PdfBook deletes the pdf"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** 3a1. PdfBook shows an error message."
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Use case: Merge PDF files within PDF++"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*System: PDF{plus}{plus}*  +"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*Actor: Student* +"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*MSS* +"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "lormee94"
        },
        "content": "1.  User types `list` in CLI to list all pdfs."
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "lormee94"
        },
        "content": "2.  PdfBook shows a list of pdfs."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "lormee94"
        },
        "content": "3.  User types `merge [INDEXES]` in CLI where INDEXES refer to displayed list index of pdfs to be merged in their desired order."
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "lormee94"
        },
        "content": "4.  PdfBook merges the specified pdfs into new pdf."
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "lormee94"
        },
        "content": "5.  PdfBook updates the list to show the merged pdf."
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "lormee94"
        },
        "content": "+"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* 3a. One of the indexes provided is invalid."
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 3a1. PDF++ throws an exception to alert the user."
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 3a2. User repeats Step 1 to 3 to merge with valid indexes provided. +"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* 4a. One or more of the files referenced by indexes provided are encrypted."
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 4a1. PDF++ throws an exception to alert the user."
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 4a2. User removes encryption on files to be merged before restarting from Step 1. +"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* 4b. One or more of the files fail to be opened or merged, throwing a *Java FileIOException*."
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 4b1. PDF++ throws an exception to alert the user."
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** 4b2. User ensures that files to be merged are working before restarting from Step 1. +"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Technical requirements**"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Platform compatibility**"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work on Windows, Linux and OS-X platforms."
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Response time**"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should respond within two seconds."
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Cost**"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The software is free of charge. However, we do appreciate any contributions to our coffee fund."
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Privacy**"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should work entirely offline and should not collect user personal data for any purposes."
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Licensing**"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software is free, open-source does not require installation."
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Portability**"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The software should not require any installer; it should be able to run without installing any additional software."
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Extensibility**"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should take future growth into consideration e.g. adding features, carry-forward of customizations at next major version upgrade."
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Testability**"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The software should not have features that are hard to test both manual and automated testing."
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* **Data requirements**"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "+"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The data that is stored locally should be editable by user. In other words, expert users can open the file without using the application and edit it for his or her liking."
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[[encrypted-file]] Encrypted file::"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "A file that is protected with a password"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[[main-success-scenario]] Main Success Scenario::"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The expected sequence of events assuming that nothing goes wrong"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different directory. Close the window."
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "   Expected: The most recent window size and directory is retained."
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Adding a pdf"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". Adding an actual pdf file that is on the local device"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Prerequisites:"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Have Read, Write and Execute permissions to access the file."
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... The file must be an unencrypted and uncorrupted pdf file."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `add f/C:\\Users\\WeiTang\\Desktop\\test\\validPdfFile.pdf`"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Please make sure that your command is of this format: `add f/VALIDFILEPATH.pdf`."
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Note that the file path various for Operating Systems and devices."
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Expected: The pdf is added to the last index of the list. Details of the added pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `add f/invalidFilePath`"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "... Expected: No pdf is added. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Sorting the list of pdf"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Sorting the list of pdfs in a specified order"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system. The sort command works even for an empty list."
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `sort name up` +"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The list of pdfs will be sorted according to name in ascending order."
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Other correct sort commands to try: `sort name down` (sort the list by name in descending order), `sort size up` (sort the list by size in"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "  ascending order), `sort size down` (sort the list by size in descending order), `sort deadline up` (sort the list by deadline in ascending order),"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "  `sort deadline down` (sort the list by deadline in descending order)."
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "  .. Test case: `sort invalidOperation up` +"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The list of pdfs is not sorted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "  .. Other incorrect sort commands to try: `sort name wrongCriteria` (the order is wrong), `sort name` (sort order is not specified),"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "  `sort up` (sort order is not specified)."
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Moving a pdf to a new specified directory"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move 1` +"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: A GUI will show to allow you to select the directory that you want to move the first pdf to."
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is different from the current directory of pdf +"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is same from the current directory of the pdf +"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move 1 d/validPathToDirectory`"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is different from the current directory of pdf +"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is same from the current directory of the pdf +"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move d/validPathToDirectory`"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: No pdf is moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " .. Other incorrect move commands to try: `move`, `move 1 d/` (no directory specified), `move 1 validPathToDirectory` (no directory prefix),"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    `move 1 d/NotADirectory.pdf` (not directory path specified) +"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Open"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Open the pdf by the specified index in the list."
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".. Test case: `open 1` +"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "   Expected: The first pdf is opened using the system default PDFReader. Details of the updated pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. `open 0` +"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "   Expected: No pdf is open. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect open commands to try: `open`, `open x` (where x is larger than the list size), `open y` (where y is any negative number)  +"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Rename a pdf file"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdfs in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `rename 1 n/newName.pdf` +"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: First pdf is renamed to `newName.pdf`. Details of the updated pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `rename 1 n/pdf` +"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: First pdf is not renamed. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect rename commands to try: `rename 1 validName.pdf` (no prefix), `rename x n/validName.pdf`(where x is larger than the list size),"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`rename y n/validName.pdf` (where y is any negative number), `rename n/validName.pdf` (no index), `rename 1 wrong/validName.pdf` (wrong prefix)  +"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Tagging a pdf"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Tagging a pdf that is in the list."
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `tag 1 -a t/SEROCKS` +"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: First pdf is tagged with SEROCKS. Details of the updated pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    The first file in the file section GUI has the `SEROCKS` tag."
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other correct tag commands to try: `tag 1 -a t/SEROCKS t/CS2103T` (as tag supports for adding of multiple tags) +"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `tag 1 -r t/SEROCKS`"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "... If the tag does not exists: +"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The pdf is not tagged. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the tag exists: +"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: First pdf\u0027s tag is removed. Details of the updated pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `tag 1 -r SEROCKS` +"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The pdf is not tagged. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect tag commands to try: `tag 1 -x t/SEROCKS` (invalid operation), `tag 1 -a t/` (no tag specified) +"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a pdf"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a pdf while all pdfs are listed"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all pdfs using the `list` command. Multiple pdfs in the list."
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "   Expected: First pdf is deleted from the list. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "   Expected: No pdf is deleted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size), `delete y` (where y is any negative number)  +"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Move"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Moving a pdf to a new specified directory"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move 1` +"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: A GUI will show to allow you to select the directory that you want to move the first pdf to."
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is different from the current directory of pdf +"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is same from the current directory of the pdf +"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move 1 d/validPathToDirectory`"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is different from the current directory of pdf +"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... If the directory indicated is same from the current directory of the pdf +"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf is moved to the new directory. Details of the deleted pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `move d/validPathToDirectory`"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: No pdf is moved. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " .. Other incorrect move commands to try: `move`, `move 1 d/` (no directory specified), `move 1 validPathToDirectory` (no directory prefix),"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    `move 1 d/NotADirectory.pdf` (not directory path specified) +"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Deadline"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Setting deadline of the pdf"
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `deadline 1 date/14-4-2019` +"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf is set with deadline 14-4-2019. Details of the edited pdf shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other correct deadline commands to try: `deadline 1 done` (set that the task has been completed), `deadline 1 remove` (remove the deadline)"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `deadline 1 date/20-20-2019` +"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: No deadline is set to the first pdf. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect deadline commands to try: `deadline x date/4-4-2019` (where x is larger than the list size), `deadline y date/4-4-2019`"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "(where y is any negative number), `deadline 1 date/` (no date specified), `deadline 1 d` (wrong prefix), `deadline date` (no index specified)"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Filter"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Filters the list of pdfs by the specified tag"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `filter t/SEROCKS` +"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: All pdfs with the same tag will be shown in the filtered list. Details of the number of pdf is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other correct filter commands to try: `filter t/SEROCKS t/CS2103T` (more than 1 tag specified)"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: All pdfs with either of the tags will be shown in the filtered list."
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `filter t/` +"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    Expected: An empty list will be displayed."
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Find"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Finds the list of pdfs with the specified keyword(s)"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted and they exist in the system."
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `find algorithm` +"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: All pdfs with the keyword as the name and in the file will be shown in the filtered list. Details of the the number of pdf listed is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other correct find commands to try: `find algorithm SEROCK` (more than one keyword) +"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: All pdfs with at least one of the keywords as the name and in the file will be shown in the filtered list."
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `find` +"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: No pdf is filtered. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Encrypt"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Encrypts the pdf by the specified index of the list with the specified password"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted, unencrypted and they exist in the system."
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `encrypt 1 password/anyValidPassword` +"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf will be encrypted with the password `anyValidPassword`. Details of the encryption is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `encrypt 1 password/` +"
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not encrypted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect encrypt commands to try: `encrypt 1 anyValidPassword` (no prefix), `encrypt 1 p/anyValidPassword` (wrong prefix),"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`encrypt password/anyValidPassword` (no index)"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Decrypt"
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Decrypts the pdf by the specified index of the list with the specified password."
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted, protected and they exist in the system."
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `decrypt 1 password/anyValidPassword` +"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf will be encrypted with the password `anyValidPassword`. Details of the decryption is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `decrypt 1 password/` +"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: The first pdf is not encrypted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect decrypt commands to try: `decrypt 1 anyValidPassword` (no prefix), `decrypt 1 p/anyValidPassword` (wrong prefix),"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`decrypt password/anyValidPassword` (no index)"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Merge"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Merge 2 or more pdfs into 1 and adds the merged pdf to the back of the list."
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. Prerequisites: The pdf files in the list are uncorrupted, unprotected and they exist in the system, and at least 2 indexes are specified."
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `merge 1 2` +"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first and second pdfs are merged into one pdf and put at the back of the list. Details of the merge is shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other correct merge commands to try: `merge 1 1 1 1 1` +"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Expected: The first pdf is merged 5 times into 1 pdf and the merged pdf is added to the back of the list."
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Test case: `merge 0` +"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Expected: No merged pdf is produced. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Other incorrect merge commands to try: `merge 1`, (only 1 index is specified), `merge 1 x` (where x is larger than the list size),"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`merge 1 y` (where y is any negative number) +"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "-"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. When you have a corrupted data files in the application. You can follow the steps below:"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Enter `open INDEX` to test that the file is really uncorrupted and cannot be accessed from"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the application"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Enter `delete INDEX` to remove the file from the application"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Enter `add f/PATHTOFILE.pdf` to add the file from the system to the application."
      }
    ],
    "authorContributionMap": {
      "lormee94": 396,
      "ptvrajsk": 297,
      "WeiTangLau": 440,
      "-": 802,
      "jetkan-yk": 232
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d PDF++ User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":toc: left"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-4/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team T12-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d PDF++ ?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ is a desktop application that is meant for anyone who wants or needs a convenient tool that helps them manage all the documents in their computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This application can be used by both *Text Input (TI)* and a *Graphical User Interface (GUI)*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "hence, both technical users and casual users can enjoy a comfortable experience using our program. All the features provided by our application can be used via the *TI* and relevant feedback, based on your input, will be displayed in the \u003c\u003capp-layout, Output Area\u003e\u003e of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The current version of our application supports PDF documents only. However, we aim to provide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "support for many more file types in the future."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Proper Usage of PDF++"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ aims to replace your existing File Management System, all operations concerning file management"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "should be done through the application. In order to ensure smooth user experience, you should not perform any"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "file manipulation actions on the files themselves. It is recommended that once you add a file to our application, you should"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "only make changes to those files through our application to prevent the application from misbehaving."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Furthermore, due to security features provided by the Operating Systems, some actions cannot be performed on the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "files if they are currently opened (In any PDF Viewer). Please ensure that your files are closed prior to performing any actions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "on them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This File Management System plans to enhance your typical experience managing your documents and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "it strives to be the last document manager you will ever need. It includes a multitude of"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "functions that will elevate your PDF reading and management experience."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "You can refer to the table of contents on the left side of this screen to indulge in the many features provided by our app and with many more to come!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Are you fascinated by PDF++? What are you waiting for?"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The words \"app\" and \"application\" are used interchangeably in this document and mainly refer to the PDF++"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `pdfplusplus.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your PDF++."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#app-layout]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".PDF++ Layout"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAppOverview.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Individual File Representation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGPdfCard.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".  Type any commands in the Input Area, also known as the Command Box, highlighted by the Orange area and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. typing *`help`* in the command box and pressing kbd:[Enter] will open this PDF++ User Guide."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `list` : Lists all files currently managed in PDF++."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `help`: Opens the User Guide."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `delete INDEX`: deletes the file indexed at `index` on the list and all its relevant information from PDF++."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `exit` : exits the app"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "CAUTION: Please ensure that you have the permissions to Read, Write and"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Execute the files that you wish to manage through our application. You may use"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "a web search, like Google, to assist you in identifying if you possess the relevant"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "permissions. If you are lacking these permissions our application may not be"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "able to carry out the actions you specify."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "WARNING: Please do not manipulate the files once you have added them to our"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "application. Unforeseen actions such as moving, renaming and others might result"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in unexpected behaviour by the application. Our application is meant to replace"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the need for you to perform these actions manually on your files yourselves."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If your file is open please close it before proceeding to perform ANY other actions in the application."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If the file is kept open, the application may misbehave as it is sharing access to the file with other unknown applications."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Certain commands may take a longer time to run depending on the size of the files that you are dealing with. Hence the Operating System"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "may wrongly detect that the application is not responding, when it in fact is. Hence, should you see the \"application not responding\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "pop-up from the operating system, it is actually still working in the background. Therefore, please allow the application some time"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to complete the task that you have assigned it. Thank you."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Texts such as `f/` or `t/` or `date/` and are prefixes that signify information that is required by a particular command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Words in `UPPER_CASE` are the additional information that you need to input e.g. in `add f/FILENAME`, `FILENAME` is a parameter which you need to input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Items with `…`​ after them can be used multiple times or zero times e.g. `t/TAG...` can be left blank or used multiple times, `t/TagA t/TagB t/TagC` etc."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ALL Commands are to be entered in the \u003c\u003capp-layout, Input Area\u003e\u003e that is highlighted in Orange."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ALL Responses to your input Commands will be displayed in the \u003c\u003capp-layout, Output Area\u003e\u003e that is highlighted in blue."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-help]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Viewing the User Guide : `help`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The help command displays this page for any references you may need or questions that you may require answers to."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-add]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Adding a file: `add`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The add command allows you to add a file through *TI* into to the application, or through the *GUI*. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The added file will appear in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green, shown above. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "NOTE: Files with the same name can be added to our application provided that"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "they are not in the same directory. Just as any Operating System would allow the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "existence of files with the same name in different directories."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Add feature has the following syntax:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `add`#"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `add f/PATH_TO_FILE`#"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `PATH_TO_FILE` refers to the path to the `Pdf` you wish to add"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Entering `add` without `f/PATH_TO_FILE` will open the file"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "selection *GUI* for the user to `add` a file to our application."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The file must be a *PDF* file (with .pdf extension)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add f/C:\\Users\\Raj\\Documents\\Tutorial3.pdf` [Windows Operating System]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add f//Users/raj/Desktop/CS2101 Lecture.pdf` [Mac / Linux Operating System]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `add` [Any Operating System]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Please ensure that you have entered the full `PATH_TO_FILE`. Please refer to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c\u003csteps-add,`Step-by-Step Guide`\u003e\u003e below for a detailed guide on the steps necessary"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to obtain the full `PATH_TO_FILE`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-add]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-Step Guide"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the Add feature."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Step 1: Launch the application by double-clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "You may see different files in your application based on the actions that you have carried out before."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Step 1"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-add-2]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2: Once the application is opened you should navigate to the folder, which contains the file"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "which you wish to add to the application, to obtain the path to the file through the following methods:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* __For Windows__ +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Once you have navigated to the necessary folder, click on the address bar and copy the path as shown below."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Step 2.1"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddFeatureStep2CopyDirectory.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* __For Mac__ +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Right-click the file that you wish to add to our application and you should see"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the following menu pop up."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Step 2.2"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAddPathMac1.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* When this menu appears, if you press kbd:[option] on your keyboard, you should"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "see the menu change to match the image shown below."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Step 2.3"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAddPathMac2.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Now if you press the button highlighted in [big blue]#*blue*#, you would have successfully copied"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the path of the file you wish to add to the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "For Mac OS: These steps can be replicated to get the path to a particular folder on your computer as well. Instead of selecting a file,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "select the folder which you wish to get the path to and repeat the steps."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3: You may now enter the `add` command into the CLI interface followed by the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "path of the file you wish to add to the application as illustrated below."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Windows users must type the file name *after* pasting the directory, which you copied in copied at \u003c\u003c#steps-add-2, __Step 2__\u003e\u003e,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in to the application."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Add Command Step 3"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "You can simply type `add` and hit kbd:[enter], to open up a *GUI* for you to select the file you"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lormee94"
        },
        "content": "wish to add."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4: Upon hitting kbd:[enter] Your file is added into the application."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As of v1.4, the Add command is only capable of adding 1 `Pdf` file at a time. By v2.0,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the feature will support adding multiple files."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-list]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all files : `list`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The list command shows you a list of all files that are tracked by the application. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The files will be displayed in the \u003c\u003capp-layout, Files Section\u003e\u003e of the application, highlighted in green. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `list`#"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-sort]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Sorting all files : `sort`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The sort command allows you to sort all the files in the application based on the input criteria. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Hence you may be able to, for example, sort the files by their name in ascending or descending order. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `sort CRITERIA ORDER`#"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* CRITERIA: `name`, `deadline`, `size`. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* ORDER: `up` or `down` corresponding to an ascending or descending order"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `sort name up` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `sort deadline down` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `sort size up` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-open]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Opening a file : `open`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The open command allows you to open an existing file, specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The selected file will then be opened with any application that you have set as the default for +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "your computer. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `open INDEX`#"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `open 3` +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Please close the opened file before proceeding to perform ANY other actions in the application."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If the file is kept open, the application may misbehave as it is sharing access to the file with other unknown applications."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-rename]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Renaming a file : `rename`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The rename command allows you to change the name of a file, specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `rename INDEX n/NEWNAME`#"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `NEWNAME` refers to the new name that you wish to give your file."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `rename 1 n/newname.pdf`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* NAME: Must end with `.pdf` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* NAME: Must be a name that your Operating System deems valid."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* NAME: Must be a name that no other file in the same directory of your selected file possesses. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* OUTPUT: If the rename is invalid, our application will notify you in the output area, +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "highlighted in blue."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-rename]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Step-By-Step Guide"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "SStep 1: Launch the application by double clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "You may see different files in your application based on the actions that you have carried out before."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Rename Command Step 1"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::EdiFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2: The user chooses a `Pdf` that they wish to edit, in this case `Monday Grouping List.pdf`, and"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "enters the `rename` command into the *TI* Interface, following the outlined Syntax as"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lormee94"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Rename Command Step 2"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::EditFeatureUserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3: If your inputs are deemed valid, the file is then"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "effectively renamed within PDF++ and in your computer itself, thus resulting in an output"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "that matches the image shown below."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Rename Command Step 3"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditFeatureFInalOutput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-tag]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Tagging a file : `tag`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The tag command allows you to add or remove a tag to a file, specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `tag INDEX -a [t/TAG]...` [To add a tag]#"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `tag INDEX -r [t/TAG]...` [To remove a tag]#"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `-a` is a prefix that tells the application you wish to add a tag to the file."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `-r` is a prefix that tells the application you wish to remove a tag from the file."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `tag 1 -a t/CS2103T t/SE`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `tag 2 -r t/tutorials`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* TAG: Tags must be a continuous word without spaces"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* TAG: Can only contain alphanumeric characters."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* TAG: You can only remove a tag that you have previously added."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-delete]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a file : `delete`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The delete command lets you delete a file from the application and/or your computer. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "In order to delete the file completely from the computer, you must specify the `hard` parameter to the `delete` command."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The file that is to be deleted must be specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `delete INDEX`# +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `delete INDEX hard`#"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `hard` is a prefix that tells the application to remove the file from your computer completely."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `delete 4` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `delete 3 hard` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-move]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Moving a file : `move`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `move` command allows you to move a file, specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The file can be moved from its current folder on your computer to another folder on your computer. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `move` command also has a *GUI* option to allow for an easier file moving experience. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "To obtain the full path of a directory, you can follow the steps highlighted in the \u003c\u003csteps-add, Step-By-Step Guide\u003e\u003e of the `add` command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `move INDEX d/DIRECTORY`#"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `DIRECTORY` refers to the new folder you wish to move your file to."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `move 1 d/C:\\User\\Jeremy\\Downloads` [Windows Operating System]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `move 1 d//Users/jet/Documents/Important` [Mac / Linux Operating System]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `move 1` [Any Operating System]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-exit]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This command lets you exit the program. +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-select]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Retrieving information about a file: `select`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Select a file to see more information."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Alternatively, clicking the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green, allows you to view more information pertaining to that file. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This information will be displayed in the \u003c\u003capp-layout, Upcoming Deadlines\u003e\u003e Area, highlighted in red. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `select INDEX`#"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Example: `select 3`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-deadline]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Setting a deadline for the file : `deadline`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Set or remove a deadline for a file, specified by the index of the file that is next to the name of the file in the \u003c\u003capp-layout, Files Section\u003e\u003e, highlighted in green. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "A file\u0027s deadline is located under its name and has 4 colours to indicate the amount of time you have before it is due. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Green, indicates that there are more than `7` days till the deadline is due, as shown below. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Deadline Colour Green"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineFar.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Orange, indicates that you have `7` or fewer days till it is due. As shown below. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Deadline Colour Orange"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineNear.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Red, indicates that you have reached or failed to complete the task by the due date, as shown below +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Deadline Colour Red"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDue.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The colour Blue indicates that you have completed the set task. +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Deadline Colour Blue"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGDeadlineDone.png[width\u003d\u0027300\u0027]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "All deadlines are also displayed in the \u003c\u003capp-layout, Deadlines Section\u003e\u003e of the application highlighted by Red. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `deadline INDEX date/DATE` [To Set a Deadline]# +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `deadline INDEX done` [To Complete a Deadline]# +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `deadline INDEX remove` [To remove a Deadline]# +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `DATE` to the deadline you wish to assign the file."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `done` is the prefix that tells the application that you have completed the deadline."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `remove` is the prefix that tells the application that you wish to remove the deadline."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `deadline 1 date/20-02-2019` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 done` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `deadline 1 remove` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The date must be in the format of dd-mm-yyyy."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-history]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Referring to past commands: `History`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `history` command allows you to view the list of commands that are previously entered"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "into the application."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `history`# +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `history` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "If your previous command was `encrypt` or `decrypt`, the commands will not be saved to the"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "application as part of a security concern. A malicious user could potentially refer to the"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "history to get your password, hence the ability to refer back to these commands was removed."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-filter]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Filter files by tags: `filter`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The filter command shows you only the files that contain the tags specified in the `filter` command. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `filter t/TAG...`#"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `TAG` refers to the tag you wish to filter the files by. +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `filter t/JobApplication` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `filter t/Lecture t/Week10`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The search is case insensitive. e.g `lecture` will match `LECTURE`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* The order of the tags does not matter. e.g. `t/Lecture t/Week_1` will match `t/Week_1 t/Lecture`."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Only full words will be matched e.g. `Urgent` will not match `UrgentFiles`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* File matching at least one of the input tags will be shown."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Using filter without any tag specified i.e. `filter t/` will return an empty list since there is no tag to reference."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-find]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Finding Content: `find`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The find command allows you to `find` for files that contain a keyword or phrase"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "OR `find` files which contain the entered keyword or phrase inside it."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#find-format]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `find KEYWORD`#"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `KEYWORD` refers to the word that you wish to search for within the files of the application."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Introduction` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Author: George RR Martin`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`find Author: George RR Martin` will not only search for the whole word but also parts of the word"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "such as `George`, `RR`, `Martin` without regard for the upper or lowercase of the input text. Hence,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "a file with the word `correct` will also be flagged as containing `RR`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-find]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Step-By-Step Guide"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If, for example, you wish to locate the files that contain the word `Introduction`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in its name or files that contain the word `Introduction` in its internal content."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "You may carry out the following steps in order to get your desired list of files. +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Step 1: Launch the application by double-clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Files you observe may be different and depends on the actions you have previously carried out on our application"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Step 1 \u0026 Step 2"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGFindFeatureImage1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* As shown by the image, your application should contain an existing list of files."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* You are to key in the `find` command followed by the keyword as illustrated by the command"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c\u003ccommand-find, format\u003e\u003e."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, press kbd:[Enter] and give the application a short time to sieve through all the files"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "it manages and locate the relevant ones for you."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Once the application is done with the task, the following screen should be visible to you."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Step 3"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGFindFeatureImage2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As seen in the image, the files that are relevant to your search will be displayed on the top"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "left. These files are those that contain the keyword `Introduction` in its name, and files which"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "contain the keyword within its content. +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The application also shows you other useful information such as, the number of files that"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "match the criteria you entered into the application as shown in the image above. +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "And with that, you have successfully utilized the `find` feature. +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "When there are many files tracked by the application or if the files tracked by the application"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "contain many pages, the `find` command might take a little longer to operate. Hence if your"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "operating system warns you that the application is not responding, please give the application some time"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to finish its operation."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As part of a security measure, all files that are encrypted will not be subject to the `find` command."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This will prevent any information about your secure files from being leaked to malicious users."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-encdec]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d File Protection: `encrypt` \u0026 `decrypt`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ offers native support for file protection."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The command `encrypt` allows you to protect your files with a password such that"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "they cannot be accessed without the password that you had specified."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Similarly, the command `decrypt` allows you to remove the password that"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "you had set for the file."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The terms `protect` and `encrypt` have the same meaning and will be used"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "interchangeably."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The *Encrypt* and *Decrypt* feature has the following syntax:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `encrypt INDEX password/PASSWORD` [For Encryption]# +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `decrypt INDEX password/PASSWORD` [For Decryption]#"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` refers to the index of the file on the list that you wish to encrypt/decrypt."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `PASSWORD` refers to the password which you wish to assign to the particular file."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `encrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `decrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Please refer to \u003c\u003csteps-encrypt, Encryption Guide\u003e\u003e or \u003c\u003csteps-decrypt, Decryption Guide\u003e\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "for help in using these features."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-encrypt]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Encryption Guide"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`encrypt` feature will not work on files that are already encrypted."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner workings of the Encrypt feature."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Step 1: Launch the application by double-clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Files you observe may be different and depends on the actions you have previously carried out on our application"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Encrypt Command Step 1"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2: Select the file that you wish to encrypt via the `INDEX` on the list."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Encrypt Command Step 2"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep2Index.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `encrypt` command into the text box, following the outlined syntax as"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Encrypt Command Step 3"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4: Upon hitting kbd:[enter] to execute the command, your inputs are verified and if successful,"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "your selected file is encrypted with the given password."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Upon successful encryption, there will be a lock icon at the bottom right of the card"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to indicate that the file is an encrypted file."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep5Success.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 5: If the command passes the validity check, the file you have selected is encrypted."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can open your file to see the result. Please refer to"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003cOpening a file : `open`\u003e\u003e for the `open` feature."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep6Open.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-decrypt]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Decryption Guide"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrate below is a sample usage scenario that provides a clear view to the inner workings"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the Decrypt feature."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`decrypt` feature is very similar to `encrypt` feature."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`decrypt` feature will not work on files that are not encrypted."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 1: Launch the application, similar to the \u003c\u003csteps-encrypt, Step-By-Step\u003e\u003e Encrypt guide."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Step 1"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep1Default.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: You select the file that you wish to decrypt via the INDEX on the list."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Step 2"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep2Index.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `decrypt` command into the text box, following the outlined syntax as"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Step 3"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep3UserInput.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please enter the password of the encrypted file. You will not be able to decrypt the file"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "without the password."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4: Upon hitting kbd:[enter], the application verifies that you have entered the correct password and"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "decrypts your file as shown below."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Decrypt Command Step 4"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep5Success.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#command-merge]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Merging Files: `merge`"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "With the `merge` command , you can merge two or more files into a new single file."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The Merge feature has the following syntax:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `merge INDEX1 INDEX2 ...`#"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `INDEX` refers to the index of the `Pdf` that you wish to merge."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Minimum of two index values have to be provided to the application."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* It is possible to repeat an index value, the PDF would simply merge with a copy of itself."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `merge 1 2 3`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* `merge 1 2 1`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `merge 1 1`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The newly created file will be stored in the directory of the `INDEX` that was first specified."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If the combined file size is \u003e 100MB, the operation will take more than a minute to execute. Please"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "give the application some time to completely execute the operation."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-merge]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Step-By-Step Guide"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "workings of the `merge` feature."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 1: Launch the application by double clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Files you observe may be different and depends on the actions you have previously carried out on our application"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2: From the main interface of the application, the user chooses the file(s) that"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "they wish to merge, and enters the `merge` command into the *TI*, following"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the outlined syntax as illustrated below."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Merge Command Step 2"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::MergeFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3: After executing the command, the above two files will be merged, with the _\"CS2103T_PDF++_UG_Intro.pdf\"_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "file attached behind your other selected file."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 4: The *MergeCommand* is then executed. The new name of the merged file follows the format: \"merged[hashcode].pdf\","
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "where hashcode is a random string of letters and numbers. This prevents any naming conflicts between files."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* \u003c\u003ccommand-add, *Add*\u003e\u003e : `add f/PATH_TO_FILE` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `add f/C:\\Users\\Raj\\Documents\\Tutorial3.pdf`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* \u003c\u003ccommand-rename, *Rename*\u003e\u003e : `rename INDEX n/NEW_NAME` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `rename 2 n/Resume.pdf`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-list, *List*\u003e\u003e : `list`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-open, *Open*\u003e\u003e : `open INDEX`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "e.g. `open 3`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-delete, *Delete*\u003e\u003e : `delete INDEX` +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "e.g. `delete 4`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-move, *Move*\u003e\u003e : `move INDEX d/LOCATION`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `move 3 d/C:\\User\\Jeremy\\Downloads`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-tag, *Tag*\u003e\u003e : `tag -a INDEX t/TAG…` or `tag -r INDEX t/TAG` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "e.g. `tag 3 -a t/DijkstraGraph t/Tutorial`, `tag 1 -r t/Homework`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-filter, *Filter*\u003e\u003e : `filter t/KEYWORD...` +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "e.g. `filter t/GraphsDFS`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-deadline, *Deadline*\u003e\u003e : `deadline INDEX date/DATE` or `deadline INDEX done` or `deadline INDEX remove` +"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "e.g. `deadline 3 date/20-02-2019` , `deadline 2 done`, `deadline 2 remove`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-select, *Select*\u003e\u003e : `select INDEX` +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "e.g. `select 3`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-encdec, *Encrypt*\u003e\u003e : `encrypt INDEX password/PASSWORD` +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `encrypt 2 password/superPASSWORD`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-encdec, *Decrypt*\u003e\u003e : `decrypt INDEX password/PASSWORD` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `decrypt 2 password/superPASSWORD`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-merge, *Merge*\u003e\u003e : `merge INDEX INDEX...` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g `merge 1 2 1`"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-sort, *Sort*\u003e\u003e : `sort CRITERIA ORDER` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "e.g `sort name down`, `sort deadline up`, `sort size down`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-help, *Help*\u003e\u003e : `help` +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-history, *History*\u003e\u003e : `history` +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* \u003c\u003ccommand-exit, *Exit*\u003e\u003e : `exit`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Command* : Keyword that tells the application what to do."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *GUI* : Graphical User Interface"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *TI* : Text Input"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Merge* : Attach the contents of one PDF to another."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Encrypt* : To lock a PDF with a password."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Decrypt* : To remove the lock from a PDF. (Provided it already has one)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Filter* : To sieve relevant files from irrelevant ones."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* *Deadline* : To set due date to a file."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Tag* : A text label attached to a file for identification or providing more information."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d Upcoming Features in v2.0"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Connection to External Servers: +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "We plan to allow you to connect directly to your cloud servers to synchronize documents across several devices. +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "These servers include popular sites such as LumiNus."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Login Page: +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "We plan to include a Login Page to help authenticate you to the application so that you can access the app more securely. +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Furthermore, together with the connection to external servers feature, this feature will allow you to access your documents"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "anywhere you are."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Text-to-Speech: +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "We plan to implement a Text-to-Speech option that could potentially read the contents of your file or the name of your file to you."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Multiple File Formats: +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "We plan to allow you to use our application with file-types beyond `.pdf` files."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Undo/Redo: +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Due to some security concerns that we faced with the undo/redo feature, it will be delayed until we have found a solution"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "that will not compromise the privacy of our users."
      }
    ],
    "authorContributionMap": {
      "lormee94": 40,
      "ptvrajsk": 445,
      "WeiTangLau": 86,
      "-": 141,
      "jetkan-yk": 48
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Runs all tests in the `seedu.pdf.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Runs all non-GUI tests in the `seedu.pdf`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "jetkan-yk": 2
    }
  },
  {
    "path": "docs/diagrams/AddCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-12T11:49:50.227Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"0SxqfH9JE5ig9t5hrtbV\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3Vpbc5s4FP41ntl9SIf75dEX7LaTbjNx2k36kpGNDCSAGJATu79+JRDGXIyxDS5ZPyQgHUno03c+HR0YiGNvMwtBYH9DJnQHAmduBuJkIAi8IHPkHy3ZJiUyxycFVuiYzCgrmDu/IStk7ay1Y8IoZ4gRcrET5AuXyPfhEufKQBii97zZCrn5UQNgwVLBfAnccum/joltVsorelbxGTqWzYbWBCWpWIDlqxWitc/GGwjiKv4l1R5I+2ITjWxgove9ItEYiOMQIZxceZsxdCm2KWxJu+mB2t1zh9DHTRqM3+Y3L8FMX/x0v/4Es+E6EOwblU3mDbhrmM4jflq8TRGCJgGM3aIQ28hCPnCNrHQUowDpODy5y2xuEQpY4QvEeMtWH6wxIkU29lxWG+EQvcIxclEYjyly8Y/UlGfJJh6hdbiENVOTNcYmEFoQ1xgqamJI57k3BENxBpEHcbglBiF0AXbe8sQBjH/Wzi5bA3LBluGEJUmfu3ZJXJf4ByyAaIOA1kdkxniOAab1K8d193BVuKHOq9WIK8ZwSlsgH++VM07XrMQbDDHc1CKX1irMF5hWEPlI7t8zzxOZib3nc2lZ61gr0ilYpwBD3zwAL5R5KaZtCd6RwAjdIbx6CmcKr6L8WXg1rufqAjcOfmRW9PqJXHOfZHY3obimZpNteuMTaB4zQ3r7tF+XNYvv0nbnKxnZjMpSZsivL9PI/PrLuP+1mUmfl4+z9Q3ftpKxpnfIIQ+9I5rMFfxYUPNdJFNirTISDcMQbPfMAmoQHR5H0arHyTiZ9JgxdDfH80mrin0n7ZkETMmeEfxpj/rVZD+ftOmuepSz0nU4K6gFLukF1UsetMTZ1milfhha5UiVcax1XauiSL0Adk0S8YDgXIskSgOShDbyFmvyPKN328FwHoAY5HdyPMsvdSE20fXxeDptJ9LYnfpSnDi1FGlIFZGG1FWkoVYEcvIIuiRukyclCMkscR6rEEbOb7CIDSip2c5ErOUR7UEcUVeKEq+iDYDrWD65duGKdkWhc8ihcsiKMXXHUUTWxvGth9g3idC1g3061xR7mW+EvdAV9jvv3AP/wSYn84GgAI/i4C8i+m+MPA/4prFZwgA7yCdN/vpmzOfDmfE8+XF3+2U8fDCe7ybTv8ukz+neacSfTic6iYRbAV/S1QLxxRL4vCZWMF/tCn1J7/nGcv4GwUsVge8BS63tHeLCValKrCgu1YqAXFj04kdg0lMkGT4IXKIezCe8JMeWGJPRd/a99QqRF3NeIepa2SuEa+4HvPxRo3i+YRR/ypH1Eg+syKJVhvHydSK04pFwR7UjEdqpR0+1cFyQeK1Ayg6Onju061TjHuJ1SHWCbaf3MFoTi4+kF7KgfZJ7pxgVii2PKqWZs8nwBFngUfW+M1f/vyBTLwSZFQE+r3cUZVbqS8t6zp2n55cdkgvieFSS63J8x19rSJ0IsCbnk8wi19kRuW76Vzghl7ylYr0OOpDG5WESlGantDb0rS7N1nfcipkFkS9vDFfFTf4YuKl9w60ikyWPpo5Ld0y0YtumwK39eEOkL/3JnwW9chGgGt3DLfUyZhe21KoVuu6WyldoaX+TZpeBrxZOqIrQyD26w15oN57pzeuA898ytRIdSQ2jI5ag6eA1U97LJbHQxYHw6GhHYvF91YF3rK3FWQ02visE3C1SI01SNUtlXCFzWPuUlyTTp19ujed/vj88334fToajW6PThPpFwixppVQAL5WkWeA7SqlXL0GTr4I+7mcrf+zkWqHNNS7Q/lcrcp5oDQW1nIJU8v3wnNxI4k9NQe4UP3UMUat9riP2F6csq9eq7x+QXj/P3oqvyE19pRNX0bViuNwsy17OFhXSIJJQ6KilL8U0IT/Ohdwnt9mH2Yl59vW7aPwH\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/ArchitectureDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-13T08:19:20.005Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"i3CjsLWf4bfV5MwyxYBS\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"75ae5057-2f1f-a65a-41a6-c58fb5237df7\"\u003e7Vtbc9soFP41fqyHi0DSY2In3Z1pppnJdts87WCL2JrIwivh2tlfvyBBdLWtuJLjdpqHRBzgCJ3vg3M4kBGerHYfE7Ze3omARyMEgt0IT0cIucBXv7XgJRc4PswFiyQMclFJ8BD+x40QGOkmDHhaaSiFiGS4rgrnIo75XFZkLEnEttrsSUTVt67ZgjcED3MWNaVfw0AujRQCUFT8wcPF0rzaI6ZixubPi0RsYvO+EcJP2U9evWJWl2mfLlkgtiURvhnhSSKEzJ9WuwmPtGmt2fJ+t3tqX8ed8Fh26UAD6BLXD4Dv+g5E3gcn1/CdRRtuPyEbqHyxxsk+j2sFcISvWTI3+DmqFLB0mVUBVUhlIp75REQiyXpikP2omqcwiqw8FrHqfb1IWBCqUdfEuQ4LAtISazKtaC5W4dw8P4lY3rJVGGnS/c2TgMXMiM0IITLltjEt5Soy39S0ojHsd55IviuJjFU/crHiMnlRTUwtslQxM+AV8W3BJxcb2bJEJcc1QmY4vHjVXeCoHgyU7bAGW+l+9Vb/PH/eOXf3z+41hVcfSAu0NJLGJBWM6b8bYSs+pJnxrlQDZZNdUameFvrvl5QnVpMaWK4sr2pwR2xkFMaKE3begjpptIlDNRM/sRmP7kUaylDEqm4mpBSrUoOrKFzoCinWmoamNFeQqeFU4FSMWev3r3YLvVqN2TbF402aNSszUbFhiqZ4ivfTsQdmUFIhBgZNYlDa5IVHB6KFe3zG8zi40quqtm/E0lRPubKBlTGSl28GwKzwqAtjRGx5uivXTl9Maa85eVBZoJvGLFmLtMwiK0t4xGT4vbqst5nQvOFehNlUsEhiWgWLuGNSVZKKTTLnpl95pa2pQhQfUyVZsuCyoSpD9fXTTwcaoh9HurZ4OhDj29vyFM7osAtlxoYxMaVHi756LqigC5YJGvAHMw6RyKVYiJhFN4W0RLIxpFWekWM8y0r3PAmVDfW0P0y+HIdDlnQuiqXYdrG+hrqncdQhVacFIejEUEUZ9lJqttYN0u4Dhg44PC4XHGqvHvIR9Dtd2kKhH/OXKl61U6cQ2gik4Ve/8llXt6o+R4XGvOTr5pHYqK+73i5DyR/WbK6FW+X+us3nHvxcg0wtjg6illnhDRUAQW84V/ezezrs1eJV3z9tDSGAHlY0tJfzfxzknw0sBzmngkUOKxoYLItNPzOymISP5bp9McEJUcqlE4PQWrzq4xOJUVeEu0UCvRED9+58c9c5ZZKpygcpEp0D6uhfrVcNVO9UdeVv9qwmC9TYcAYeAC5uS5ZcEQCcg6Tr7otdgmq8QC2+2Gvykg6160Rt0dUvtkxTVJ1EDiKn7h5dAo+pGnpGtqWPfjHAvIZfPREuFevWHeuZ0aLH0bKLWixkh/WsyGx/znN4Rh6w5Pmz6hXKzEmOARl2WwEBrIKEXdJYy7wWjrzuP/pfy9pSaH04qzsWxm91UXynqwOxmUUWomrCvh+/xRAAWXqv4bforUmo9wC2WkIrWBP3vfeQqMMesrB3+YgCtp5mlJbMWSTmz38tFeQNQF6PNSaZMhW/sDhVf+4e7AGHefvPsMrWdy+kfuLROV2Faoqc8wapNia+YC70usnJcemwEF4K0SDph2j1fCU5926oQ07jYoiGPbdMtbHro8OZf1XonJq/FGZ5Vb9E64nyUzPuDUVvzrj3vsjBFu71Edx8/PJn19hmiAAGAI+BPbcU1ELRWwBTO5rpGsBAf6gIBqOBADW3gN4PUjhjkKN2SOnNVU8bkEaCuyukdDBEh0qWfRILvfC/H6JMTdFM3kDUVVN0MukLUbeCKPabO8ozI9r/2WOOmnLlK6G9+HsuvATwVkwBgNPrvjAltdjPa85SZDMH58G0Q0rmjdcvgE6G4NoZSB5+FSeT1EHHTkLabkfsu9FRi+6M9l8quqO0tq+sh/tdo7uGonpaYugNag93u35T7hyUU95sTPohXYuqc9PubfcszNXKEucqRNhLQEMQWCEHOUyNgrSU+mXSwjFw8Cmk3cuso9kS6+SPXjfD/kVx1cO1PWs97daVqfXjFlLf8/R03az+HrvJHvT6GG7L2fQUlOsszCS/6PyOgdwTo177DnriYtLXDtoDtdxb12tkgwVylu6/veqle1WKwBiUfqpJu9PDusNqe/O2qlj8J1DevPhvK3zzPw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/ClearCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-12T13:49:11.199Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"l7asAJuRXyYfaVA6Icm2\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3VjbcpswEP0aP6YDAoR5jPGl02lnOvE0bR4VIwOJQIwsfOnXV0LLzXYcN821fvBoz+qye3aPER44YbadCVIk33hE2QBZ0XbgjAcIBW6gvjWwM4A7dA0QizQykN0C8/Q3BdACtEwjuupNlJwzmRZ9cMHznC5kDyNC8E1/2pKz/qkFiekBMF8Qdoj+TCOZAGrjoHV8pmmcwNFDhI3jlizuY8HLHM4bIGdZfYw7I/VekOgqIRHfdCBnMnBCwbk0o2wbUqaprWkz66YPeJu4Bc3lOQvC9fzirpgFt9fsyzWZXZYFSi4832yzJqykdR5VtHJXM6S2UcVQxkilUGiQ5tFcEqmhZcpYyBkX1Vxn4tmuZempUvB72vGgsY8rz5LnsoMDZ87oMB9IcU2FpNsOBPnNKM+oFDs1Bby+7X7yzCLoRmRDPpu2tg4UJOlUtcYIdFPc7N0yqgZA6l8Q7OMzCI5UR4LJhUx4zHPCJi06qtqM6nNsZbVzvnJeAHhHpdyBvEgpuYISmTHwHpTDqj7Ko9gWu18KbIwbbSgewRxvu87xDqwHy7XipVjQUz03BJkTEVN5YqLtAnmaoJP1F5QRma77kj5WS1j6nacq6qZvkGf1uwb5/S1MqLBqryOaMJ7eJDUj56mwW1YQ5EoFKB+QJLYuA9s/3gN4cjl9WUnaeI/atxZkE9C7VeTTldUI5nFpecFzS+vfquIe+53ETOUwKtQg1oNQUN3hyMrpRoeeFVJHSIqCpQsVJM/1c9dcUMxSFUuz+qDI/RJuklTSeUEqgjfqqtMv156optNxgPHzSAS5exKx/AOJ2OiIRtyX04h9pBr/iUbqzj/j8TN8XxqpIz+lkR9FZDTy0VXhBM7+Xe7tdeE571wXr3+ba1TyqJ7qd42Xvs152O33DUaveptrGDml0ysqS6GVGfIsI3l0RVelmvGRFOq5+BUVqsz2XdmUqv0/wpn8AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/DeadlineClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T10:02:13.636Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36\" version\u003d\"10.6.2\" etag\u003d\"E0BAuWuKDCpp9MWLl21i\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"bGec5cT-nm7uJQJHCF7w\"\u003e7Vpdb+I4FP01SLsPW5Gk4eMRSNrpqgOIsLOdJ2QSA9Y4MeuYAebX73Vi56OkKtUKdx9SRSU+tq/te46Tm5t0nEl8euRov/vKIkw7djc6dRyvY9tDawD/JXDOgZ49zIEtJ1EOWSUQkF9YgV2FHkiE01pDwRgVZF8HQ5YkOBQ1DHHOjvVmG0bro+7RFl8AQYjoJfo3icQuRwdut8S/YLLd6ZGtrqpZo/DHlrNDosbr2M4m+8urY6RtqfbpDkXsWIEcv+NMOGMiP4tPE0yla7Xb8n4Pb9QW8+Y4Edd0sPMOPxE9qKV7GEWUJFjNT5y1T9IjiSmCCme8EzEF0ILTDUtEoBp1oRzuCI2e0Zkd5PipAH/o0njHOPkF7ZHuDNVcKPbtvrRGKJ0wyng2pBMhPNiEtZ6BtKjG4jiFvnO9WKuAnlEq9HwYpWifknU2Q9kkRnxLkjETgsWqkV7aQ314xRxYlYTiSLfWnOX2YxKqc4rWmI4LBWhLCcuclgrOfuCK+V44wOtNUaOFpr36gGJC5f75hnmEEqSdnbvLkgMiSrYJFEJwAAarY8Um5gKf3lSEVegMti9mMRb8DE1UB9tR0tRbVxWP5T4osF1lD7h9BSK197aF6VJ/cKIk2CxH50KOHbtHpXYOcLIV2RLh6H71g2D06K8ms2mwXIyepsug44ygIhCcJFvdC8ardHwlaPCRqIu5TpHirapJBWm/U7yRFqS/CVw8RgoWbC+N7VEIU3nO2nj3JbJQTpPQcUcEDgCXczrCtRQwBvY2NFPYjkQRTjIFCiTQuthme0YSkTnaHcMBrp9079yOC+uaQNkqy3DI5lxMWALrQySTAYYdcsSpuFYzdrNmlEZg716lEbv33yVyf61EljNQxtP0cfXFH3n+YjVf+A9PL61KPk0lrmNOJe61KgmWo+VfwcqbTf1WIZ+tkP7QnEJ6H1TItFXI/0AhVtc1J5H+ByUymz7O5A2nVclnq8SxzKlk8L5K/oD6+WI29xfL76sndbd5mnq+Eon0QasQowpxDYasww8qxBstW3l8rjwGBmNVnfS6Wh+BD7+j5ax9pvl0odhdgyGrZV0IReqCpF5GjhTBmjGKUdIyfjvGHYMRqHWZn5WMR0govp8ZcOHJYsv4zRjvGYwmraYU6CtqcRKN5EuOkrIKy/hExIvyozz/LvG7br+vyt6pUumdK4U55gTmKxPJOZbA3F+0WVmo2ZJAaSwrnaul1+byZeDo4s3LuzxU/O42ZZ4VxjFFgvysm2/iQo0wZ1lgVdA86N+59U4pO/AQq3bVtyi66+mVGt42JRDfYnFhKpNDsdTrFNKUAZVPoWD/m8R++729Nhi7NgwMPkdYTVnNcREBaN7bGODWrDuWyceDpkylZB3/c0A0bVk3xrpjMtZvSj5K1gX7M2VJ/rDXcm+M+57JqL8ppZjt+BNJRbvjzbE+NBn5N6UJJeshi+WUl0wTr2PIlvRbkH5vGQzp7KbcnwrmPXROl0x/j6XJp0wm+Vr2b8X+vcHQzr5M6OmbfHuDN8x7z2Bwp3M6779ZTrFY4BjcqZVQfp7Z5vlNymNoMP67/jNIkEf1yb8Vx43E8bFPZt3B7cJGKJZfh+fZw/ILfMf/Fw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2
    }
  },
  {
    "path": "docs/diagrams/DeadlineCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T11:52:53.749Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"vfvqS6pLYTbTf3FMrXpg\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e3Vvdc6I6FP9rnLn3oXcI4UMeVdTtTrfXWfd2u/vSQYnKLgIDsdX9628CiQhExIqo7UvhcALJL+f7xBbsLdfD0AoWX3wbuS1ZstctaLZkGUBDIf8oZZNQdENLCPPQsRlTShg7fxAjSoy6cmwUZRix77vYCbLEqe95aIozNCsM/bcs28x3s18NrDkqEMZTyy1Svzs2XjAq0Iz0wSfkzBfs022ZrW9iTX/PQ3/lse+1ZDiL/5LHS4u/iy00Wli2/7ZDgv0W7IW+j5Or5bqHXIothy0ZN9jzdDvvEHm4yoDe6/juVzA0Jk/u5ydr2FkF8uJOZ4t5tdwV4uuIZ4s3HCFkE8DYrR/ihT/3Pcvtp9RujAKi3wHkLuV58P2AEX8hjDds960V9glpgZcuexrh0P+Ner7rh/E3oRT/kSfFVbKFR/4qnKKSpaltJk1WOEe4hFHTE0a6zp1PMBSHyF8iHG4IQ4hcCzuvWcGxmPzNt3zpHpALtg1HbAmfd+mWuC7RD5QDcWEF9HlEVozH2ML0+cxx3R1cNaljAF2MuNbvDOgI38M7dCbTJTvxikKM1qXI8aeq8Y+aDGLWAmgyp7yl2geZyix29I7TasdbU47Bm4OMPHsPxEgFSiy6BYi7MhPqc0IMpDzGsiJdGuO2dOVmBq0d/My46PUPck1RS+5MCi5nMzf8xiPQPKeM9PbH7rN0WHzHx73fpBGvVLRpffX3r0Fkf/7Z//pzPVQ+TZ+HqztQt0ljQ0e+Qya9lTbFKCi03uYU/ppkWWxkKkidMLQ2O2wBZYj2fwtIYP/HUuFMXit+RVsGed0Acn66CbaF6cZyv0Xu/aqg69euCluxzgh1KuO1izV3wAc99Vb+zy3XUK8g1/UJivH49Oe7YX0aeRP1aWTff9vowzu5XjmR3icnQrzr22bhyi8afmkV9DNc+MvJiny5+7ZwMBoHVrzwN5IhZdHLhQaG0esNBvU4emJ78yKq6gI/rwj8vHIuP68LYim1i1wSOqlmAUayUpzFK0SR88eaxAxUYJlPINxql74BdqmERomw0gGW68w9cu2iGX0Vhc8huV2HkTGV8m5E9sfx5t9ikb9TasI/NQjcl0jtSujL50J/ax534P+2IClyS9asJUXCm0T0X89fLi3P7q+nKMCO75EhfxEeFydgkXttTq+/9MfjzrD/cv/41Hm4N19G5uDFvB+PHjo/+iahmv1nPoxMeHek6G1/H+CdhCklr3AZd3ec0g0GpqFp9Wy6omsFpVMESie3oUDr9NP3XWgva87hL+8pgCKIc4VLVy/pKrbTzCCfCHPAZfkr+ZSDyFQINmsnwsQQkUsbWbbreJQ6C/1lPOWEzybXI3u2oyvB1asFBDCjFIqsCpQCcAVoxBUBFdarFmcMtLP5IzgQaL8nVz1FFwV1NGHOqQotQO2xucaLCUzYoNHOvmJPXH5svmnwSJALNdN2YapZV3a4RbvMpDCfLh3rxh//fTH7HfPh/pG6dOrND7nkm7A+WiESFtufbeDVkP0ROAe163jk3qFG3iHgrSmiAZo6M4cA+dFCZAjyITJQiyEyOFeMLDRSNTuFd8ZKZ62xlBUEDzdDlGasuKFkQwYIwfnqK2WIXHuebxRKrDIUWbdz5flC7Cq0TK4BO1nNhQqgWoZeB27iml7NfZCTzc9xkafQNLzPHqlFe7RfS2u3PkDS8ok8hNXCyLrMj3obKmQoBaAaVCIhcoICrdq1oojGM7Lkobfd/PqjxVSykY+pIFCKMZWou3u2mAoIXOmHrfrmwhZdrqQM58NertejXE07kVc50srG1kOdVuUoC2gOdyCVhjqQMm+l8JQW5l6xxz0dfBE0cqK4pz1fVxsTXEfGVWPowld0uI8pnSgap1mGIvDmKnCJocS07BzXmKWJFcUV57h4VChBE6tGjFrBpxbilCspBClpL6bMNxqyIFipoTcj3oUqp8tu9+RTU+ULgX0uFfpzm2dVzQpaRaNaLGZruQKZVK0Icmwxe2v1c9nOvnkd4D+5+C20lzWrSqOeYv9BlgpSqzTkJ8omWbGHKXAbrJDdbMeg4BUEO7Q/igdZ6RafkAXn6hcIt6HmY4GnV4YUeExpKL4bodAhaKCwdUq9aH+jv7IDuJQuVTm6f1MWTAB7Wd/yUrg3V0w7ye6oINdSFvYpG61IG0Xkrrd0cxr4ejsLPtAqgl9H8Ubsej9exCMVDYaYsalDvqXTLAt6/gvsJFO2giRrTk5YLJNfQN5QtKPpsJAWi04KA9Ck4QEVbPaNyX7VcL+pQ4ulszwQ769CKuzshNFXFK0Ixy0JfRvkW7+XF3ku4Vlny88DiU6HfjgfrBRMUVsu7kpNTpjcpj+vTooU6W/YYf9/\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 1
    }
  },
  {
    "path": "docs/diagrams/DeadlineCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T12:06:37.016Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"ac1-wmf-48ElLFMnAwFp\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"IheaQrNoyI6tYjZXQdyI\" name\u003d\"Page-1\"\u003e7Vxbc6M4Fv41qZp5aEp3xGMcd8/MVndVdvphdx6JkW2qsfFg3In3168AYZCQDTjgS0/nIRWOQMD5vnN0LiIP+Gn19lvib5Zf4kBEDwgEbw94+oCQx6D8nQn2hYBCWggWSRgUIlgJvob/E0oIlHQXBmKrnZjGcZSGG104i9drMUs1mZ8k8at+2jyO9Ltu/IVoCL7O/Kgp/U8YpMtCyimo5L+LcLEs7wyBGln55clKsF36QfxaE+GPD/gpieO0+Gv19iSiTHelXorrPh0ZPTxYItZplwv+9ON/zf74y514/0bRdvL739+TLx/ULN/9aKdeWD1sui81kMS7dSCySeADnrwuw1R83fizbPRVQi5ly3QVqeF5vE4ViBJBeRxG0VMcxUk+FxYwoMKV8m2axN9EbcRjLvaZHGm+VvmMIknFW02kXvM3Ea9EmuzlKeUoVirf61x6rQBkJYDLGnicKaGvSLM4TF3pVf6hVNtDzaih5s/xIpw1dC1fMNUVqitqHa+FoVUl8qNwsZaHM6k2IeWTTF2h5PGjGliFQZDdxopghTHQQURgGEgIBg7VQMG0AQqxYILGggQ3mY8fc1S++Gtp1UkDHGnAm+zP3Sr6HM5FFOaK34gklE+U6XwaKfFzJWszGOm3Ul9ekhyOo8jfbMOX/K6Z9hMx2yXb8Lv4U2wLUDJpvEuzOz0d3J7F2nwfgPncZm2uC8DTk4K6Jp/nPwNZoQvaAD84yzri1BsLctLu7GrIbOJwneaPQCcPdGpAHSfpMl7Eaz+qg21azpiAnGR1d8PUrZI1XSW0YQTHwog1MBJv0gBS8csDYn/vssVyEgg/yK0PAZiFFtID/nr7rhSiJrxo6jIwlIvVzY17TSSJe0EH67Zbm1gHj1mMltnTRkjVTqTkUxiViMmjuvLscUZuaFJtyf6/mdIduYyXgr8UCvnB9E072tePajZsc6QM+B60hi3tAIpACzCb8NUBKs0vEZGfSpevh7MWhNR0z5mvOkoFCDx9hm28S2ZCXVQPGY15EKTGRLxcxcupUj9ZiLQxVc6Yw0ueTyJuW6Wfg/kkjr9JhxBlJv4il2q2yP569pPtz4X7vY4EA9Ieq1mXbozHcibej7908744mUt3EyTP4u4JHQmiMiQYyeH3huOmPLIMmXRPitzzXDKm4PREIztk2KwYbDKv+xSvVv46aPrk03FbNXinEdzjIwCfPg3jeGXQZiy3lmjcFo6PFsNBy/qrEM70oOFVApkNfCgWvMcMabh5qwbzSl2pvEpYOsuaqGCPnGOqWHOUYeWqX8jlexaPpia4+2BgghgbimGkXBIO3sOSJZQmXmcYHC0ph1df2k8o+LRRnLtSk25J9mhWjTqs1D+Yyr1uKuejqbxDoX24bPjOgyXMoJGAQGoA0zVcIog3poIOqP0gfNH4qcS9IxFeonj2LQud/O3y0IOpaAFGpoV4C9OiqgIIV8dZUUWqkEF1XNVVsoN97cCsqtwUyYhLHOgiArHrYQiwwRLuOtQy3D9cb/CPXzZgR5ZGxzXTsq1835KVbr1yB7WqnePStsJdxU2Ma9wsLx2GmgXQp/SrugoFjB1OvIpHpa5GQoRcs5DXldEUmVOxC9cEUbOPk6egtUwT/jh5ZeS/iGjiz74t8uuNJzrK2x7lPop1QIGl2ocsOQE+QcP3BUvU4rLel3WWyaA2y0CZaCPjNBPUn6lpBxpSI2JHkFhCdmqhocvG4mGzGdnA7LbypIPl3G1q2qFr+IOpHHLYSeeQeWMpvbXKZ/WUL1JTNk8p1/6pmCX7TSqC52D+y69d/V8WGX1VhxV2Hytp3a+Va3Ek5tlkW+kAw/Xic340RUXQamZR+gp8JPK0rM2n1+BGrHsuhVojQ0UgGeFyqC/acJg4kRp9P69bl0Lq2d/XTlNm2fU2SG0SPRZycvCu09X6UFlI8bjGxeWzx/P5VowSt+Iby8SqBIpp6RPkZap/r6k9hw7jHqMqg/cMumHsVIMyve/E8SaJiZEIYaJPdCQNOm4sgxOuw4a3W6w1kUNtSRESuL0JWdsQ5MmFs2dpwbYn6KYoTj3iUBcSxIvfxHB52KkNUn4ew0lz2ltjuC1TvFmG3xSDiGtWJpHX2N11fpnTMllvthwr6Rvru+cdX98HI1qHVLCWvk9FxoJ9e3ZekKX8sgSfSEfG2JTvQj3cg+ql6nSzZNxwrC1EuN+e0Z/mXLNA4pmb9jA515xR2ZQ/PtXINV5sS0mvGCvfFNZZBmgmauQ8pKnXMtHYODd3f5T7/e+9cD+Ag8ae2QjHrsVF24rzo1XoSIfNI/0+GdSNMfAFn88sem4YJ5tx8TLQnmcO9KACW+qg2FKUcwkeS8/j7hjpn55VCRU75E9ZPvUBOAAeSmiDZFStvdRS69fwvsygCmFnplcc8NMTjex7CbIwrF72tTbN2ltv1Np6w4/q2/B/etMMvvhQ5A6tuI4Am90BwD4+lnH/SB96cIgds/1j6//YmhGYH7eb9/m9DlXScTtAFUADgHLa8s7+1oNbYGqihEdbnJqVRWXdtx6yDZU78/bG6UU/Z6c2syk86Hbjrzs57jH2TKi9EtJL7qK0xflLcfGsx9eEe3f+Q+6YYMxMAwk/5OltDrzMI4Yn4tW/su/bfqXv/Wj+2psmaL8q+OVShTw10L/GdhA/7PrskytU3SHM9XYlo/27Q0etr327pypRtqYo9KopCjU8AwVnlgIZ9RwGXUZcQDk/9DgPcQh1MEUegcUp3bY2X64/RDuU7W+noFzrgGq77SXnERmO49dgpGSPfImKKnp9mRKZiOT0Uiecx1XqeQ4/9ybX52qH5sfdtZhcoO9TopTaIpRLNplov9bC7fgETDWf4FJ83z6BetSpbVJwDaYwYhvt3cpCMgapb5Qgfe5yfafQ4evYn2S9UM+N1YliBEKQ68PnsdU14zZWdmIvwEh5WP03yuL06l964o//Bw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 1
    }
  },
  {
    "path": "docs/diagrams/DecryptCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-14T05:10:39.435Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"EJDRuOxy6936G7uIelKn\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7Vzdc6I6FP9rnLn3oTt8fzyqaG/vdHed2vauTx2UVNlFwsTY2v3rN4FEBSJlFRC71weFkEByzvmdrxzsqP3l5hq50eIz9EDQUSRv01GdjqKYkk2+acNb0qBrUtIwR76XNMm7hrH/E7BG3m3te2CV6oghDLAfpRtnMAzBDKfaXITga7rbMwzST43cOcg1jGdukG/9z/fwgrXKhr278A/w5wv2aEsxkgtTd/ZjjuA6ZM/rKOpz/EkuL11+L7bQ1cL14OtekzroqH0EIU6Olps+CChpOdmSccMDV7fzRiDEZQb0X8ZX36Nre/oY/PvoXnfXkbK4MtliXtxgDfg64tniN04h4BGCsVOI8ALOYegGg11rL6YCoM+Rydmuzy2EEWv8DjB+Y9x31xiSpgVeBuzqCiP4A/RhAFH8TFWKP+RKfpVs4Su4RjNQsDTdYtLkojnABR0NM+lI17n3CEbFawCXAKM30gGBwMX+S1pwXCZ/822/HQ/IAWPDb7CEz7uQJUFA8AEyRFy4Eb2+IivGY+xiev3ZD4I9uhpS15ZNMcWNQXdIR8AQ77UzmS7gxAtAGGwKKcev6moyhOkKRWZLe90hT2VwWexhjrdVTmtLarn4g42Pv7Fe9HhCjqVPOjtzKF15N+eNn4SENN/2T/ZG0dPdsPiMjzseakRb5rG2+hwocPPVUB+/du+vvfWX4GFyxbV+dVhjQ0fQJ7PeSpouSWlJU8z0LZI1sVH7WjNzI+u9GyVLzt0oFsfteo6XUFO9EAndSeVkT17fk9CdUE5SMlm1hHId/64xkA21GQklnlNKsFRZalawzLYLVuNqrLyQcH1Xt5Co1nm1j1FCSNACLqdrMp/e68LHYBy5MZFfSbSQZnXGFbHtfn84rMaxIPo+TSfJzDkWmsCx0OpyLEwtTzi9BwLis+lOjoRklThNKwRW/k93GnegQh1RDseT1Hv0DmqPQmmVoIoOcAN/HpLjADzTW1HS+STI6bJmTOHYWxHe+OH8PsbmlVYR7flaOe11rRTtlbpov0XnHvHvFyRS7CiGu6R0CKcr+tOHy6UbeoPNDETYhyG5HlDiTRE5mtOjvz4PxuPu9eDp5stj9/bGeRo5wyfnZjy67U4GDml1Bt/+zg/LYySlJn8PJ8OhYxtGNbzSVDODEyPHK8XSBUBR6mIWf1pr7dDx9kTWBG7xASpoVRuU07iiifICiZhHXMrvwBKSiRBCgNka+ZhO7xnBJfkZ+oQrrD+ZQNR6YKianALGNou1BwxZadKCyFbbHbQTgMHFvQQwKve0TuSKwLBngTF2Y1gQ00K+ZwFcgUuEhK62DhJ2223FGVIvVnkbY1UNpQO5FzstOGY2fVdz0LIlSRFG+wjQBKkihYD4hdLIe95ZLw/M0FuEgfcRYGvIZ4dt61MNJ8CPp4veh5/ZMktmiDKLORcPIx/E1ixByNRdxbCgwZLkE35sLgoc211HHv/Y5weH3XJwnMGmmaVtmqE3Y9Oy2VqN+4FN2TThRu0hm5YYLQlOv9Mdc7opjrYIRgzS3kUDVzXySaam47OPCtxj9hxPcWDL7tPLWkMOrGVbn/RiF/bA9uERcBdvkyrVypZ0nGwd2qeT61P9mkAaxCRqaJ9OljKpIaPpcEYTFYTkHbU1oj4Zy2nfgdWa9LgkFW9lTGwLAherBOUfIi8xum4UBf7MTTYSpGVSJ3dB9Del1tFfFzg9es8PybnvbQOQD7ehZmc21ASbmbaAD1VsqAlVbcUlKEcaoxOMCo8S3jUqStU25cQQvUS+sw3b76qVNpEi77yu7XchH8uUULZEYovksIRLfLakUtG8L01eNT1v6hotF5G579PeYLKuoLCwTLREVlWuGgDiMMDOeKeKUVtEWLzQcmXhvBYchN6BSnCgy1rM2RzPewrjeZ2V4ES0Pkm2bZu6bum2aqbj7SYLw8UCWHFy5+QAvLncq8D2iElUecnKIeRlnIvGU695q3ZqOZkz6N9NRvdxOdmwe3P7cDe4pDIyQ8/6e3m4ig2odpj7JxrQ1tfJX0Y2VhQqFcOi9hpoJeOslbS8uRtp8js3ql2RCIuC12GclqCvPZKvALo0szFyHDhbL0E8//2iuo+W7NCUrCpR86pElHWqr3zYEqiSD1q7rUlpv0uTrBz166rdFjsVFZeKVLzxUckLSuKFl/W6mtr2kKWMtjRr05ZFBKnJ6ere3g26zsR5StoGzkW6YZmdKU3Lo3f7BlHVbpiQaR+1PrPZ7EfpCKwZVaBlvH09+6ZiWQdMzURyOrc+DakU4W4Sq5VZkDkoUkhdMBDG5Z9UmbTK3u9rkhCGoB4HTJQLlRv1AQSplz/F/eIF7mdzv0qkoduQwJe3EnmGFz7FlKvY9DVcsdNwel9QNN1QjvE0JpdIMrUCHlIGHrra3AaX2KVRLhoeJ4i64E23s/4ziqxk6nxqzKcXUqT9IMr8+cLZqxqUEtb5jwmv6MkIIJ+QFqDfgen/rxyQ093fziXdd3/tpw5+AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/DecryptCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T00:23:43.550Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"T8U8Imir4UJXCHbzQFav\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"oIkx-gFuPF_Gsz0uqnnu\" name\u003d\"Page-1\"\u003e7V1dc6JKGv41Vp29GKu/gcsYJ2dP1UxVamdPnd29I9oqNSgu4iTZX7+NNEp/qKA06ExykQoNNvi+z/v19NtkgB+Xb7+n4XrxNZnyeIDA9G2AxwOEPBCI3/nAezFAAlgMzNNoWgxVBr5F/+NyEMjRbTTlG+XCLEniLFqrg5NkteKTTBkL0zR5VS+bJbF613U458bAt0kYm6N/RdNsUYz6FBzG/86j+aK8MwTyzDIsL5YDm0U4TV4rQ/jzAD+mSZIVfy3fHnmcy66US/G5pyNn9w+W8lVW5wN//Ll6+TFd/eevP982PzYknq2+/vOTnOVHGG/lF5YPm72XEkiT7WrK80ngAI9eF1HGv63DSX72VahcjC2yZSxPz5JVJpUIxTccmQ9Z3pGnGX+rDMmH/p0nS56l7+KSEkI+Kz4iEYTlDK8HdUBKi7FFRRUekdALJQTm+6kPUhJ/SEE1EBpyKDSQH0dx/JjESbqbC3M4pdwT45ssTb7zypmAeThk7YgZYqCKGRhiZgSYYvbLwdbFjE0x44cvyTyafA1Xwu5SQ+rCxNb5n9tl/CWa8ThaiaPRmqeReCKeCy2Ww8+HsXPaEZ4lC8VH0v1xHIfrTfSyu2uur5RPtukm+sH/wTeFGvPRZJvld3rcOyaLasMQgNnMplrPA+DxUYKjMj7b/bSkck9VOTVVvndnimUFrlROzltWRTPrJFplu0egowEda6pO0myRzJNVGFeVXbE15FohJ1FdW0uEKkoKAouSTB0xCh3piH7o6JyOiM2QTB0hV2bEbJ7zeTobJcn3AWKxuP/oRbhPNs//eg7TzYczvdaZYqBiwK/pTLGz+On9/IbKmmpJd6amkgKLnUJXKvINFfE3gf+M//Y3Q1fiG2aqMaliXSU7A63qQA6FcTRficOJEOZOb7m8IlHjPMgTy2g6zW9jtd5DKgssCb6mQDT2GABuMlKIzNDndelWA0Nbu2z09jWFWtIIwWCoGhCmhkpsRYIzlZSWecrJ8dX0IWcCcje25kKKIzHyFMWlcsRRFdHVwqyxPzsqZD5VeAZTxNU4weS3SnkcZiIUKjPZZCine859+EFdIqNXDcjT1LBJtumEy09VqQNtIkzB6YmyMJ3zzJhop9L9d7xCyzVoiiu0rBmKUF36/q/ciobIZ+XAv6VZ7Q7Gb8rRe/WoEiBtWQoDYQCt1fx531mI+YSgSH9g2yc3JUZ0+qUu2KAONtox2Ex6Z51nyI/JchmupvcamR8eAHh6aicO7H28rutqZIZdhgELVyTrnFwMirrYf7dJeeJTUWI8iAsgXL8dTg5yRrmU3WGwTFArQ0UNJeYY80n6vs4kTI6XWcW4+JrFk8nP3331NUKMtYUvM8+AzEZ7WDIN6Iybgr2TUydEfNoq7pXHgL1zTZ2L3FKR2kTuOxO5hTtyl2rdeYKNGVa9lO586uY8RC91AzgElR+Eu02BalBHFRC8xMnku9DNNNws9mteB0gAx5Dgb1FWpOuA+PI4z9aFCBmUx4eEPT94rxzo6fpRgBW6rBEg+kCiDqD9ceNSj6kTIX0i19AzKbE2/U9jcG3E9y3x6VWLQ6gUhkOPnqsNDyjFuILS8qNdgVTmUWdLyfLCfvwqVEHISJkPNsUzxfpUWJ/KNaJN2nBXT959IRmHLzwehZPv893ntSc6CtEGSyrUU3VHsJkcoS7rTGSjG6+rM8v6T5mlndrTqDH1kvSjGK2BQqrxUYjWLEUpPOH4roNhDT70tuqiveHcaylaSvgXEjn0LZ12thVsELgS+llaz+ooX4SkbI5SRHnpKPn0eTrLA3A9/5fnQN/k4UF3nw+jVb9WhuKYz/LJNsIBRqv5l93RGBXpqV45qQH4SI5pCc2nQ7CR1V4KobPJIvVrJosSaSLp9aFWO7eTOlJtfTLwauWNQiHhe+Uyab91b4NkwnosC/XBVZd7TDOl4nG1D5fPnsxmG+4klUU1KNAui7NDTRWwQKmpECuZgE6KKloT/i4q/0ADi04N1q6UKDo90ZE66bjptA6/GnTwLdJSZE9DFeCEwGsMzsqitMR6E+7Bti59FO7nqYEe4U4DOqQeJMgvfhPV3cNgWDlZhqXGdKxmU1hPK/s3hWY0fc+mcBRqvThMLboaDZiXUqXGRI6JJVSDpa9U7mOeK+j9fGFe6LHc7YRPVCIuWsw8ZLSY7Rk7ZcvPwChEID2OhevqkGak9K1a21nHjvuzSr3FDF+axiB9H1PNNKY1qzTp3lNY6a8j8SwayqB3C62L5FInTQg+PZFjOJRo7GU9/Zpew156CKFqu5f2q+67hY7M41rnzdpVWw0XlarDU5cZYdC86rhzPCHo631kILh0JdFocNV3hbhGFTqPqmbbjlXlTkPuzyYWktFQNpv4/KWlbVMBVf0zlkltBQ2IyTF1dzc+jobrth2bpLN8q4Em7JtbrW0rB4eAseHZ5ZdO93lgG/NYXQmwLqOeX4yl1sXY3WbJj1VU+BJCvvMAxecIsHkDANjnh7IadLS5MtBqdlpWZOfWYBlxBcjeW1MP2mlBI6eNzvGirbPtldhtM2tzSrgkcT+BIUBaBxmi+4FuaFxcd9HOQWbGtEyfXJrqs4Cdnsh1VmYj4RoGId8WhB6Ey19wcfp5/DRK3uoGmZ82KfEMYpBYWEHPQgu6S0pstKDLpGQ8TibbJd9N/avlJtUcpAU4+VDfYkQItfHMtqzCd9XwgmuQhy1nFXVzAb+phG+sgYv0uHhcIWWo2qfAEGtMyhzag4aAYC2J8PYD3SQRlPWXRPhUjf0U4KFfWRy+cAMyA/q0aHhYUvZgedeOMgxSI4m9u2U+n+rRnCKT+el0kY82Y227LRao1vKByUXFQumIhOfATHFEKECNHdFRHJxtmCobM87XKD3uqdJrFOZphl+fOSbe6ZkcuxBq66PtKPY1Zy2qrU6e3upEuo5vPRbJEGiroNTzLl29YGXv5vGpXIOwRvPo3cUxoSIjkPnWOqLTUGbmunf+XrE2316CdcoIWsjkTreV0RopXntlXyFfdxummLZQSphl256NBiaeK/meJeka7SOZFptIPraQOC4ZJZ5E/ouRto23pd0iDBCDBUI1Q2zTLSMM6PSl9r52/Xp9S3/T66XZ9b5rhNbonrwn74b1gI+JlTg0PRx15uBsvKFDJlo2RPxyJPTNLpBDCNQ+GspsfKst6mLfESjLJ/iZl8j3hncpLc5sjQymlrCrbid2q6wXGBLsq8U/FTVst8V/j+9AMdinsv+vOfukvUaD+d2yTwwdDU4is13VCkQuXpoh35YhvP42PreiKoaLZz0e4+49mLWaJGlboxhhdddWPXTcUq7zdDVI0Nt6g8PecO51zZXVoPx6W1KB6qudh8jfv9+rm+hSqreX6KIVo4zVe0+CORENhhB6jHiA+j7CKsvsE2+IKQqIvES7Se/baNm97ihXXnSY8yNk0NrqXR949AAZCvTsoaLv36FDuoOXvOAyrNIgyJmky27SP1Z/xj4AD+jLJx70+l4+YXf6+lOCqeIVPIrv2yvkBssqrTcqxeER33a28YZhRNQ3SpAmd+nfLTTbb/wBVodbloewChQNRwLL8Hq0ahth8lnrLeO3gUhxePh/tcXlh3/6iz//Hw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T06:39:37.423Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"ieI-CM-TNFIfoeknY78J\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"MpsyHRO5OMc3KuJwnuE1\" name\u003d\"Page-1\"\u003e7Vzfc5s4EP5rPHP3kA4gxI9H29hpZtKbTN3eNX3JECPb3GHkAblx+tefZAQYiQSFGkJylwcPWkCG3W/3213JGYHp9nCZ+LvNJxygaGRowWEEvJFh2JpLP5ngMRNAU8sE6yQMMpFeChbhT8SF+WX7MEBp5UKCcUTCXVW4xHGMlqQi85MEP1QvW+Go+q07f40kwWLpR7L0rzAgm0zqQK2Uf0ThepN/s67xM1s/v5gL0o0f4IcTEZiNwDTBmGRH28MURUx3uV6y++ZPnC0eLEExUbnh+qthos8339eX9xcHMzKuVt+XF3Y2yw8/2vMX5g9LHnMN0FmosulgQt9gx4QoDhbEJ0y0CqNoiiOcHK8FCOomVQC9lCT4H3RyZmJo2vHMCsfkRL46/lE5fxCUEHR48g31Qm8UbwhvEUke6SX8Bkfjr8OxBnLVP5SWA1y0OTFaLvM5VtbFzKU66QHX6Au06yhoN6Bw40OckA1e49iPZqV0kuB9HCD2NTodlddcY7zjwr8RIY/cd/w9wVS0IduIn5VsoWncFugQkm/8KnZ8S4+1D5CPPKbW/DLvkQ+yN2CP/byV6FvifbJEz6iHhwbiJ2tEmkAqWz1BkU/CH9XnqLMhv/UGh/QJC7To0KigRdcFGGTPz+8SkFA8RntwuM3gSDZ4e7+njzN52IQELXb+UZ8PNNJWTSy4oetOp/P5eZzKBoJT6VByKrPGqcyunCo3k1rMOvUDHr5SCjjyRACztLGr2/VOY83G824DWP5qOSJlTfcavnRD0vQlYh5ENoh+RmHKBnhFP26CVcroNcHb4vw2ywVETFfC2ctwPZ97rmWdiSycqq5lqtCNXmFtDp0sYvqa33JKYIMTumDDki+Oo5cTRiMRZIA8OxMAWIGC4SrxgEwoxvPzZK/XGZ/k0WLohKIboufJrtcvoVgD9zx1D2pMuTryIF0TcinbbulD5hPg6MuJVAqi/3oUdjrBkAEF0xtqppcxZDVM1HFir8tl35dNQkt/Q5vi7daPg9lhiXYkxPHIsCKq6sl9Qo/W7Oi3T7PFYnw5u7v648/x9ZV3d+PN77yrxc31+HbmUak3+/a7fNtg0yzDEiJDTbQ3HL3PcF9TeMFJGNMxvY/eTPV2GEFPUilVAqnqLUFp+NO/P17AnGzHIHV8XjhhM4AJc+0083J2A/2KdUyPI7RiUzHNhks/GnMxYeFhklI7hfH6yzFWXJhnYl272Q5uDeuKvnM2MxgqZVwcjFkPj46WkZ+m4bKq/zIYlvHvthL+6oNhm75Hc9Q/J007irHYrTf6iVFhjVFz2S9GbEvooBiKHRRpIltMH6x+WT9/9TfA+i8Duiokz58QinmcY36ALelcnMrUxak6JvQcDVXGQFGK3h9NiE1Rs7BbQ3nWHVEASfunXaibgPWfKo2nmsaUX96Q7tAyXIWo5Pqh5k620A50LMkSOrR6TJ2MoVfKObGXZH57QvOdL2hkUO0gmLoCzwpTtK2uC4T1xbMK1fUQW1QgL2Jeq0Vl1NQsw3K8jtsS5+82WHrVxI4whXq3wX5+oo6TE1BTR8HJxk8YvwUoQuQdZim2YDxLLmadPnMUIBcQpzkKDVVITFLSx5Sg7WBzD7FvUxcC+00+gJwHUmTu4yNk2a6gEu9c4+8N9kBICE1YY5O6FeLucC/zUotWpze7nn2Z3X0cf/bu5uOr67fU34S6gk1cp0c/MRUaa0NIsordWc9ortcky6wp8weVZL1asgRMwVR5v+6lBYg0ERQm6rgAMQdfwHbc6FNoKcNuiljJ9O6ZMATNnjH0/xJxI4bAE+sSv4ghE5pVDNlSK1i1bCtKhqen6rhwM+VlYi9PX2uamm9qN51hAzkL6nU7nTn4jkmLVuUA2MHoaDO20JkEOmjHDtJEUNiJ1DE7QIXsW31Z+2UBvB5S2vOQ6nNZOy8Xh72sDd0qNQBHCFKqWLSETAWIO7W7xmLNsvY7XbcEZnXvbZFdvtaqZV7YnOj+6y7wj+yeEbq/20VUO1lvZOD0DkG14Vr8iu/VuoGwphv4FrocdZrrtcsBVUrgXgmqIefpk6DyBcrWRXI/DCX+UMgSiUWVoQyhCoIi1XXNUDW19DtlKB1WQ2jRQ3s1hlL5dWpTIGizkbLz9kSjm+fk0ezmxmu6ubi2YInbNVTdHApubilurT+bm6sU4y33+uqKnDPYvb55pjjsosgWIeS2xKIjglrMdFpjkQ7L/6aQXV7+Swow+xc\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T00:21:17.594Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"1BSglMlZaiU7BAcPagp8\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"IheaQrNoyI6tYjZXQdyI\" name\u003d\"Page-1\"\u003e7Vxbc5s4FP41nmkf6tEFCXiM43a7O+1MtnnY7SMxss0EGxfjJt5fvwIkkEA22AHstPGDxzqAgHO+c5c8wrer5z9ib7P8GvksHCHgP4/wdISQDVz+nRL2OYFYICcs4sDPSbAk3Af/MUGUp+0Cn221E5MoCpNgoxNn0XrNZolG8+I4etJPm0ehfteNt2A1wv3MC+vUfwI/WeZUh4CS/pkFi6W8MwTiyMqTJwvCdun50ZNCwh9H+DaOoiT/tXq+ZWHKO8mX/LpPB44WDxazddLmgm9e9Nfsz+/2xP0bhdvJ5x8/468fxCw/vXAnXlg8bLKXHIij3dpn6SRwhCdPyyBh9xtvlh594iLntGWyCsXhebROhBC5BPk4CMPbKIzibC7MoE+YzenbJI4emXLEpTb2KD8iHojFCXs++Kaw4B/HHYtWLIn3/BR5ARYsF5iTw6dSgFQKcKkIz5HY9ARoFsXUJV/5D8HaE9iMamz+Ei2CWY3X/J0TnaE6o9bRmlW4KkheGCzWfDjjPGKcPkk5GHAc34gDq8D309sYJVjKGOhCRKAbkVgYjIkuFFITimWQCepLJLiOfHyTSeWrt+ZaHdeEwxV4k/7crcIvwZyFQcb4DYsD/kQpz6ehIN+VtCaF4XYr8fglcTEOQ2+zDR6yu6bcj9lsF2+Dn+wb2+ZCSanRLknvdFuYPYO2eR4A87lJ22wbgNtbIWqFPs8+HWmhrWshqWthYSxViRO3L5FbzcZOkcwmCtZJ9ghkMiLTiqijOFlGi2jthaqwq5ozsEAOA/2wYupaSU1CMsgI9iUjWpMRe+YKkLB3I0R/7FJnOeEhBuc3Pwu+v34LClFdqmhqU9CRZXV1LXNcgwDtAe2q3axkbO3fpKFZqkYbxlk74ZRPQSglxkcq88zhRaZfnEfx/t+U6WPkUEn4LqSQDabP2mivjhTVNdlPCjwXGqOVigCZXwsiG8WnCkhqXcxCL+GWXo9iDRIS092lJkqBgq1BAQJH+lw5xzbaxTMmLlNjxcpMCJKmqRIvXrCkNlWGmeI1z4eRY3LPd/58EkWP3BKEqZI/cB9NF+mvOy/evnnsl5oSDFo4A4M3wL15A/e39NjOSR67Hke7BnPfm4jkxD0Z/JPFcVUWmUdKuh1F9nkGGRNwfKKezTGsFwo2qc29jVYrb+3XLbIxXCtprzRwu7kB4NOnbqxtke4WIq2Hbs6QGTE0+Fwh15QNmrikHNMDH3Ind5NKGG6ey4NZWU7yriRKE6mQcszwOaYZVg6iSvr5nM7fMn8wcfmrd/8TRGlX8LIknI7Ay+jNYW/5N7y4Oz+NwUe0pK13ttrl073pNGrhnX8xlrvtWO70xvIWNfXuMuBXHiBhCit1YUgqgmkbIlnIqU0Fx0D5IDxozCTl3hIID2E0e0zDJW+7LNotJSxAz7Bgz0GSV1KA5YhxWkjhLKRQjMtaSjrYK4NqJaUtyDgzMvE2eo1B0FiHEK46w/YBew2N1an6hp+hw3HJxGzL31di1FZrd1Cr241t0lS6K5GKsYJUeemlgIpEfyGXa+OJw9hXotcEEbLPrQkSVJ2KDlwTRPUGTpaEKrnmL5Riht4DCyfe7HGRXV95olbRVEO5j2BdoMCqR05y2mGiVWIwWS/LQGVqqM3SSVZayz6ryepbmtoChKQSvSNoAKGx6GzTvlBY70HWZHb1OVOuSq8mTW3RNfzFWA4d2IrnkLp9Mb2x3me0kw+cUyY7yT3/lM3i/SZh/p0/f/e+rf1Lg697MSxl97GkqnZNeuKQzdPJttwABuvFl2w0RXnIWs2odP97IO40eObjHrgW6VYgdDSmPAdAPL51oO6yYTdRIqkmPe26FJzP3l45Tahl29sgCo8GnA540enCP5Qakj9u5WL57NF8vmW9RK34yvKwMn1yuWlR0ydEZeLfff40TP7uWDoGsNUKyAakwuMTHch0DmtE56hqsZjtGotLVlFMyjGXLk46FXPKqh8B4VOqB6aFP1eFYuJaY2JDCzn5dwXTNh4rB4lzHsJrqmK3K44OiHBTMni1CL8qBFl2tfiI3LPXgtUrmYbJeq784BYpmZJGT1kqqH1zlpzLU27swEfSgj7WxNu6k8FQvJSKCMFnLSMgh/HwsiXxp63dfNM4RUkst9o5wNb5qy/dpqn61jdTanjBmPWqZJ1mYtWE6dw4022YqG8511dkyOX2r7183oGBxm61OY1tg4ketERutVjQcdqOPV0ZfY8585mBzzXlpDOHPXS08tgBevJu2LFXbOpT2WxbuC8+97uK4/QMqsx5aJHipCnPBzAGsChl9ZH0tOhoWgc2GfVgfWkFKhY9MwNygHN8op5tr4UMCFPLr8bWVXMDjBgbYPhGbM3+3ZtX8MGDLDNo+XUWMOkdAPTjjYz7e9pu4UA8rrZhWu64gNg5rDcvs3stqpX9dmJKAfUjlCPK2LZ3Iy1FQ+sG9+ac6sU/od3XHrJ1lTs7zQ3MQXeTW/ViVb7tIe2Ebfz5WzRdd9ySZxeLpYnJ1uVub7vx1q28bR/LTcRCE+7admHS4LE5OX/Ww478tXvsLpebUFrN3S2nKK40eV2Z/HUPxIv/M0EHyx/ISX80cOkVJ+S07sJw+V2Wz+lb2cfIKRbMnpLglV03nG+OL7pulJzedRt1ly5Kw9u8pNY2Y6qXvJJULAMBZ9ZvKXHHFNrUsgFxnKJ3XASPZIwJci2Yn9JuI+dwfTfSotdyPV0ApbOsbVvgmEdWbxgfBJEcPfwlSqjoTQFi8ewxg5c44TysEtcdO+fe5PJYbdGxenV9QRvoi7wIIaYIZcjOIDmtH3Q9NgETzSbYBL9um0BcMlYWf9gVpFDLdPTk/iPiMYi6AMU65S6XNwotthm/gXWgRilVgVIJhKCjHz4PrXY1bqOyfT4AIvmw/AfP/PTyb1Dxx/8B\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/EncryptCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-14T02:37:47.326Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"NsWg7J_2V6sdG2mjjw_3\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7Vxbc5s4FP41ntl9SIabuDz6ms1O2nriJNs8dTAoNi1GDMiJ3V9fCYRtgewQGzDObB4ICEmgc/3O0cEdtb9Y3UR2OP+CXOh3FMldddRBR1EMySJH2rBOG4AmpQ2zyHPTJnnbMPF+Q9aYdVt6Loy5jhghH3sh3+igIIAO5trsKEJvfLcX5PNPDe0ZLDRMHNsvtv7nuXjOWmXd2t74B3qzOXu0qejpjant/JpFaBmw53UU9SX5S28v7GwuttB4brvobadJHXbUfoQQTs8Wqz70KWkzsqXjRnvubt47ggEuM6D/Orn6Gd5Y0yf/3yf7prsMlfmVwRbzavtLmK0jeVu8zigEXUIwdokiPEczFNj+cNvaS6gA6XNkcrXtc4dQyBp/QozXjPv2EiPSNMcLn92NcYR+wT7yUZQ8U5WSP3KnuEq28BgtIwceWBowmTTZ0QziAx11I+1I17nzCEbFG4gWEEdr0iGCvo29V15wbCZ/s02/LQ/ICWPDB1iSvfdBlvg+0Q+YI+LcDun9mKwYT7CN6f0Xz/d36KpLXUs2xBTXh90RHYECvNPOZPoAJ15hhOHqIOWyu0BNhzBbochsaW9bzVOZusx3dC5rq5zWptRy8YcrD39nvej5MzmXrgG7GlC6Zt0G6+wiIKT5vnuxM4peboclV9m441WNWMuirsVffAWtvunq07fuw427/Oo/Pl9lVr86XWNDx8gjb72RNCBJvKQpBj9FuiY2atdq5iYy35soXXJhokQcN+s5XkIN9UIkdCuVzzvy+p6EboXymZPJqiU0s/HvOgNZV5uRUIKcOMFSZalZwTLaLliNm7HyQpLZu7qFRDXPa330EkISzdFiuiTv03ubexhOQjsh8huJFnhW56CIZfX7o1E1wILYe55OklEAFpoAWGh1AQtDKxIO9KBPMBsYFEhIVol5WkUw9n7b06QDFeqQcjh5SdCjM6g9qkpxqlV0gO17s4Cc+/CFTkVJ55Egp8uaMVXHXkx44wWzh0Q3r7SKaJ+tNaM90ErRXqmL9hvt3CH+w5xEih1FtxeUDsE0pv/6aLGwA3e4cmCIPRSQ+z4l3jQiZzN69teX4WTSvRn+uP361L27HfwYD0Y/BreT8V33eTggrYPh97+Lw4o6wpnJj+nJaDSwdL0aXmmqkdMTvcArxQQCRVHqYlb2tPb6obZBcCGwVtSi7xJ3rNpzlWW/+G0EdvIU7kvHcf94zCBrZUMfpXJgeZriaaLUT2rJwsyQ9SNI0wiK1HUcGMdjGC28OE5NJWdKs5HEwwRbK8j6pEcyywQTc2tH7jhCGDrU5I6R7znrbDRZSG6CrDlsvWlVFf0acMZV04vZDVmzisZVr8ATHhS5HRZPIIWXMXSWkYfXySnGBBPE5BS9kMN4MEDOcgETGPrmkRcnsj2nMhCH0PFePEJrSqo4fkOR2152qDrHDKCBIjMUATNAbbDEFNm6nMJN7FdKaqIm5Oj4KIY5llyQRmgmDwz1jLQcC5pE5bLVerBxJHA4BqSc4PQyzr4fKZtm1V5vT8LPkjlhM/I54z2RcmEiXeKl1tCUa2DIGoHFybFcHrGqAFxufZrmBCnSBZh1DxUqz7ecZkd0UVY2Z8rvyaM8mJjzsUs969SOE99J0ZPkEX6sLsqcb3Zss9jROrs5N6yWK8cZtmIMQTyyR4hBM6Y5n+ne4IKGkpiycJN7X6Qz8nz6D01/0moDWlAQJSRIldnNtPmCFVfViwm6hhXX/KyK2zQOK1vjIGsN4TDTMnNhcAGJVQeZxFvMSrWydWRKad8ep1yf6dcE0iAmUUN7nLKk8ahcL4nKKzP9mqiYpgjUlhHFZGw/4B7GS/+yQm3T5PP6LQi1zRKUfwzd1OnaYeh7jp1uwkgLVmPIsk8wcKJ1iC/S9+o57KOL0lBALjKmvjQUEKAh0PMCcu25m8jk0+1SWrldSsEOsSVQkCp2KYU2uOK6noq9VH2VOJuwowRmaVvUXyJ72IZqCNXkva4I8NdVDSGWdfl9wrVll+/QpmmJdKd2LpE99N5tF1ig8MYZCOBLo+U7cua22xug1hVoHizbLZGplatWAHFoYeWAVWETtfbEfBmbtinTz2rzYeDuqcyHQNYSzhZ43lMYz+uszCeidS1ZlmUAYAJLNfgYvslCfbEAVpwwOhkuNZfPFfgeMYkqdz37NC+HLhpP5xa92qnlfcOv/fvn8UNS3jfq3t493g8vqaxPB3nAV1RXsQPV9nP/RAfa+u8WLiPDWz5aytSi9pp0hRc2raTnLUykye9MVLshERZpL4Mko0E/QyUHH9k0KcJVRb1EaNFhO0WfLU+iKXlTohZNiSiTWF85tykwJZ+0ll6TciWEklmgfl219GJQUXH5ScNpqmajJKX0V5CN7b/kbbVxpK2WZemdmaoz1kKSffbCPf7zSakuCS0poEpD37dpOeAK8h9BlpVPXTuveAr3VB45JMG2sVoJHHZjkwAFsKK0HuB3JcUF8U26M0EW4ZMiCZDXLOvcSKJERrUNuWh5I5Fn+JZUTLmKfV/DBS0NZ6rLfgdXfbrsNCaXyJe0Qj2knHoAtbm9GjFWKaYDL0k9ThB1wUcYZ/3RFVnJ/VhKjanhgxRpvxLlftfh7Dv0SgnvfNHx1Ye+3iYXYxh5hLQw+oia/l+RX1Laqv+BhgvfwdkUSedz4TXs4JDL7a8Opizd/rKjOvwD\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/EncryptCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T00:24:16.099Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"b98i6QMiuZLc51BNO-oQ\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"4LZETkMeOWfY7U6HAgqc\" name\u003d\"Page-1\"\u003e7V1bc+I6Ev41qdp9GEoXS7IfE5KcfZipzZ6p2rPn0QEBrjGYNeYk2V+/Mr5LAstg2TCTPKRiYWTo/tT6utXducPT9ftvsb9dfYvmPLxDYP5+hx/vEGLAE7/TgY9swPFgNrCMg3k2VBv4HvyP54MgH90Hc75r3JhEUZgE2+bgLNps+CxpjPlxHL01b1tEYfOpW3/JlYHvMz9UR/8I5skqG3UJqMb/wYPlqngyBPkra7+4OR/Yrfx59FYbwk93eBpHUZL9tX6f8jCVXSGX7H3PR14tP1jMN4nJG6b/nKLt8o9/hS76/U/yzfn3imy/kHyav/xwn3/j/NMmH4UI4mi/mfN0FniHH95WQcK/b/1Z+uqb0LkYWyXrMH95EW2SXItQfMUH9VMWT+Rxwt9rQ/mn/o1Ha57EH+KWAkMumZDsTTmIMCgG3iqdYJyPrWr6YIX0/RwHy3L6SlTij1xaHSTHLAoOpNdBGE6jMIoPc2EO54QzMb5L4ugHr73iUYZ92o+oIQaSoBUxUweoYvZcW2JGqpjx/ddoGcy++Rux+GJF6mKdbdM/9+vwa7DgYbARVw9bHgfiE/FUaGE+/FKNtWlHmJfEF2+Jy+sw9Le74PXw1FRfMZ/t413wF/+d7zI1pqPRPkmfNC2tk0a1vg/AYqFTLWMATKc5OGrji8NPTypnTZUTVeWlTWuo3LGl8sL0n1paNdVso2CTHD4Debgjj5KuozhZRcto44d1bdcWG7KtkZOwNlaT07SAnqfRkqokt9wK+1aSo1mYn0pqKsnRLSVVSda2KEdnO1/mi4co+nGHaCie//AqDChdpn+9+PHu05xeak4xaGLANTSn2J45JT//SnW6qkk2p4YrFdpSElV0xN/FCkj43/6uKEt8xaS5nJpy3USHJVpXQj7kh8FyIy5nQpoHxaUCC4Szc5+/sA7m8/Qx2vVb0VmgIfqSBtEjowDYYaUQqbsfG9Kwuoq2Doz0+jWFetKIU3lghaegOmQ6R8GaSnC7keOb+X0aEUjN2JYLIT6IkecgLHQjruqArvtmne3ZURnzeSPeoEq4boJoLq2Yh34i9sLGTDoR5tO9pDa80pYg9c31wyQt7KJ9POP5u+ohBGkiTMDpiRI/XvJEmeig0fI7XrCVGZDOC7QsrROhuvjjP+kimiCXFgN/5qvqcPH43rj6qF/VNkgdTaHA96DWoW83nZmYTwkKjIe2kt4UIHG889AGZbSRgdGm2pRtypGn0Xrtb+a3ujPf3wPw/NzPPlDaeFnX9Z0ZDrgNIF3sIPN0UjE01EX/u4+KF75kTsa9uAHC7Xv14l0aWi5kVw0WDLU2lHlRYo6nzSz+2CY5TI47Wtm4+JrZJ8vff/P+1wOitC98qTwDUl3kQ8M0oGcNYwYxc7sO1QkRn14VtxrJQKP7sIOL3NAltRd4H5Rr3TjDxhQ3rZRsfEw5jyO7up70WSxzHqSJGZ7Q+msYzX4IZcz93ao86KowACxjgL8HSUbQgePm1yk/hxNAYX5dUfT04qN2IRP0o4jKlGewI7Tycmc8iMrIKq87Q1Si5UieyDZE1VhZn4apMwh34vsWOGZ1txE2XMYJI21eY4VmjGtoLt46FJhdQzAXN45jcGEThNQpiGJXPBMsT4XlqWwjWo0nHhzNW/Uw+/QAMGGStXFVXoQGdTE9jf25zMUsXL/GLP24nYp7KXujn36oAQqJvOcRQy+UAVsH8FgX6bhul8jrKvYr80Kd23P8LxU5dKGRzB3XsyR0pvqhYi/OjR2fv8wXmm0ypSTf88tK0E/VaN0IFTtjyBep5dsJaxVsll8PV48oY4uyw9PcD49QPs1OGfqvPHzwZz+WhxnkbfvIPqqQz3Nx0MrpmKkTncMl9bwg64XSEelA0WNGfE5oxv+o3ZavuqOPcYH2MRVEswmlNxezR4vFjlshgdhuvKW/+Eq7AzHi4ROVvFzEqBGKNGhEzYnkQNsRn+A4HHsHTLcj76sJ1ThlaCZzbiFg/Xm3Y2COeGRCGHSQm/1uOiwYepPai8Q9D48O8xoPQV0eMj5WbyqseBRdVx3fkzc2OaHQHGlucyLsDRwPwQanPTV39JGnqvxo9zYzjRdlPPgEvbaRMsWQkjKFNWUsUFPFAslxNFzmRKqRp59yXaLx1qWcM4VlImG6LhFVyqAMOUlv61IX+bpGitqOB288QMjZeM7ZhtrBpyeyDAfHbs7laXNxSfrcKFlxsGkGzk3BLPNfjsxjW+cjErmaC8Ga52PQ6+5C3DieEHTlzCig8DRjUMkpm3Kdg21UGRC+bsW0TeXOfe4uZppwnKJsOnP5a1+VlbBYLcdz5BHNvcVGaSWlx+FwWQRbPTvPK/YlaV/dOWNfNBwi4kgLR1PxOmjpgqMrJa8fBWqPB9sPGYn2kPFQAfh5OghffcgPJiB7nwN05gAA+nRfOIS2CrAhkU05pboGB9oDRurYQqWBa2j3sKtSUQ9qOb3yLJ9IWisbLEzXtXhk5UHYFzABSEqAQqQc6FI3c3SJtXp5BI/Hz6jE951zCT/16OmJLHOz4hykBrF7YbFXXIy9PD4/RO+/DnlwlRCMrlsG00TwrJEHonPCbZKHx8dotl/zw9S/Goeoc4U+4ATl6hbHIaYbv7WEC2Lg4ve88Rtu1yXWbzWBiFxZ6nKtwhWAMnc53629suR1oN16xHRi4nmyYYcSsTbdr8vD13IiaaHa3q8NGpMNEKFzmof8jBb1GeYRuho6XSZxSYxRr+hsTWohplnx7ohnwB6QsHdu6TUryo6OTWQbxDrnswdWo8+7xvf3sxnf7QRa1sFuF0SbT25zKbfxlMrdsvNna860NWZjcH45ErNxu8r3yphNUY5zdcwmDUQAJRDhDUttKBlvT6BSQzLinn1M5GIosyR1Mss7A1XDEWPQmwxBJb2hiF5CbxiRyLcgn30CdAzcuYSKlVf9oCZwAJ64tXzGM3kKBVSaFk2qLEgGCR0WnAYZETeXuOYSOXGNIKbuNkOmrVGDEMXNydljzXQeQtnY6YFUdy5vkYZ/T/zN3I/nL3GUCGZaI+K17jlRGMw+Pgn6pXAT1Ftm6ITpWOSQDJ0aBMjGYejlUrhZhm4QF7o5mwmBlANJNQ3IhjWZ3TKqB3aEml0MJxifFeMteDCcQFBvu5IGjbuH+Y7CoDUmx0z9r+Kc/xoOgum5FWkC6+z0TLbZbbf074FcL8acS1wvt3K1clcOu736Xq0oLnaWq44sQ4CanhbFZxayMUc+alGmsoxj1i1pxmbRi0GK01FgjQIDBJo2qPz/Tt09dzmPfdgTBmbANG+PDqGi3UghVeiN7UMylXfeeGv79vqjDu2N5OwuOHZ7I9cgttKfC5bJ117jHipVNjhFiK7NDaPMlnzbYir6xk+vQii6xk88a4SSt0Exi3XcaHeULl1QTD0DY06V40l4URhJDeOgnYOasryv5wYoynOI9H8DW1pqdL4/X3Kjd1gp3MWfxbLJNQOOkWUj1gzbwGUseeHSLxcHvt5CFuTKpVUMac8wtP3aZS+wP2D+ApUs7qWVLFTDO3X/pgzbUtKV9RaohYicKiKUhYgI6vd4vr2jlmn7NnfUQKc38Wo/roSvs8OeUgdYZSbLkQJPFy7KNhNBhjdGe5iNfq95o1exYezDtmIMMZx91uPb463vg71yK9qksK7mH87pD0aRJfPoDcpd+2g9Wi6bWz0w9a61WONwklemvxdN9PqtrRwnU7EZEnYdsw6g6kTEm0DIqMMAcV2EqTztBBPkOfkt0kNG75XnjVjAcVFfx8a/4EjjJN0P5q4Kjww4E4GeEioSjFwyyeCV33AeVtPKI3zuQ8bHqoFrdXOnKAzICY8e0OxFQx6ieN28o+uxCZg0bAIj+LZtQtrrtdZnVUrZ9JCne7Vzp7+0rXatnavURqjlKaMbBQgMyOonWgdAqzBITaRIQKJkQi+HKwPSrGb+eR+AFJdxlDrG1e1iL1lloWH89H8\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/FindCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-12T17:50:09.988Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36\" etag\u003d\"Z3MN1RaM0-BUGORzU6o-\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e1ZhZc5swEMc/jR+TAWGweYzPTo+ZNJ5J2kfZyCBHIEYIH/30XYG4DHbSJPakfrClvw5Wu/tjlfSscbifCxwHP7hHWA8Z3r5nTXoIueYQvpVwyAXbsXLBF9TLJbMSFvQP0aKh1ZR6JGlMlJwzSeOmuOJRRFayoWEh+K45bc1Z86kx9klLWKwwa6tP1JOBVk3HrQa+EOoH+tFD5OQDS7x69gVPI/28HrLW2ScfDnGxlz5oEmCP72qSNe1ZY8G5zFvhfkyYcm3htnzd7MRoabcgkXzNgvF2cbOJ5+7ykX19xPO7NEbBjT3It9lilpLiHJm18lB4CLaBYEBnBEeIlUgibyGxVNKaMjbmjItsruUY2DUHaqoU/JnURtBk4BiGWsEjWdO1z6xR+zz6iFsiJNnXJH2+OeEhkeIAU/ZF7mlf61xEpj7NroqspacEtZgWGta55Jc7V/6EhnbpP7gXGa/xrwcJqbtcyID7PMJsWqmjLMuIepAJvWrOd85jLW6IlAdNF04lBymQIdOjrWgY2QdGwNni8AvEsvNbdW7tojvZ1wcnB907Ga2Ep2JFzqWcfmFILHyi1zp9h6yXhoF+Po3w5hv27U1wozdU7jkbfEEYlnTb5LkrlHrpPadgc5k0ZfSLpEGD5ha5oXrVUUKUZrw9Rwp/vA7BelA1jQkYKE/wCO+xoXsiA5zp3eyyPPY/HY72J8fx7ViZRd2tc9U9sz/8aLLeFZXS8kZUHAZnGMXQ8FVjRpkkQhm9p4mkkQ9NBi344VBxjXtvnWRFOYHAgBYpNwri0ZXiQu8G5pUbtuLejOouoJIsYpz5fAc3n2YEjzCbzSau43wMNMg+osZoU2N2YWNfChvT7grQZ8Lm+lWshOhF3Ior1qXrmDVwb+1G5pgDdNVKVvrkHMgPRKZC0TnmYYgj74EkKcz4nwjtG00/l7e8OqGog9D+BxDaeVV6H47G23B8H3RHOLxI4bkr4sslLy8xV6hw58w8h8VE4LWC+b6qWc1iliZZ+aNRnF6dlhYaHdE6SYt7DMvlyhl0q7+n87da9T8La/oX\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1
    }
  },
  {
    "path": "docs/diagrams/FindCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T07:47:42.332Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"Ai1mzZULlc-P1bxtlAYV\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7V1bd6u6Ef41Wat9CEs3BDwm9nbbdfZus5pen7qIrdh0E+NifBKfX19hI4wuYIwtbCfOS4wAYc83Gn0zGg13ePD28Yc0XMx+JBMW3yEw+bjDwzuEkO9i/i9vWW9bIAm8bcs0jSZF267hOfqNFY2gaF1FE7aULsySJM6ihdw4TuZzNs6ktjBNk3f5stcklp+6CKdMa3geh7He+s9oks2KVgjA7sQfWTSdFY/23eLESzj+OU2T1bx43h3Cr5u/7em3UPRVXL+chZPkvdKEv93hQZok2fbT28eAxblwhdi2941qzpbfO2XzrM0N4S8/3v8D/vE4DmfB+1+eh8M//TK8p8G2m1/DeMXE79h822wtJLT5jSzvBd7hx/dZlLHnRTjOz75zpeBts+wtLk6/JvOsABmi/DiK40ESJ+mmLzwaDQZBwNsXLI3eWMbSvKtoPuWnAW9eZmnyk0k3+ADkZ4rvydKMfdRKAJZy5QrLEv6AdM0vETdABB13e1ehrveIbo/fK9jjoudZBfaAFJIKC32blt3vZM4/FGI/AAJoGYFTCA55QBMc0QSHfNCn4JBFwQFddRmcuMwz6WhAPRzS04j6HgohloIONEEHwCRoYZhOLmjq7Zd0bgkXtb+/MN7hi7gcHCoXD6ti0Qcu9rw+xYJPrX+yvk1C5r+ODQNa0z869tnLa1v9a4BYl/75pOtq0i3IhyJi/lMzWY6yfObJnCnCLZrCOJrO+eGYi4bx9sdccBFnBg/FibdoMskfYwRuBy2QMUKtZ6uDkBDdUF+xxIJIVaAiBvOArAFFDOOAxlkhFf55mm0kUm2rIEj/t0rEifvlRoYP/ALoLj52J8te8EOhBtve+Dc2PeQlVVu0CxU14uxskX9cvcXfo1cWRxsVKVkKPxMXzU+7tn0jmpu9LOS3pOVxHIeLZbQ1g7mepGy8SpfRr+yvbPvTN63JKsufNCgpr2E6go8P8NvGHGzvI0b6BAD99jAqpFtpL5iqRUV1kaSlxIWampoMCrZnUPz99rqC3SKJ5tnmO7iPd+5QUYYkzWbJNJmHcVUdVCtQC1mPMG2HZy1MmEgwiam+SjYMtkR4faenGi1IHZtPHnLHL4dhwbihfuQtoygWyPGj6nRZP8PW41Ge2T6cTTQf8vj5FNJC01MWhxk3AdITTJItunvKNXOHoK9OCC705T6WySods+K2qoeo9HSPtcnFhZ7j+wgjgqDvuXK/WZhOWab1uwG+/M3ddSFoMWAruvASJ+OfHLJJuJyVlGunGaBZM5pHbhgCsBmHmqZ4HgCDwXVoCsfXk9D1MO2mKb6r6AnvyWmnHRyucF25rLCzFvRH5yXfk2k0/kwMstlnQiCQQLpHZ6aKBj8SP2xA+RHOwykX4dXTshaW4qg5fl/0AMojHOpRGmgKHviUWsL87KzLNiL1ml4LE5GNZ6BHeKABIw83WPyjMGoRBP7qGBHddJowsmY6xcNk2/k0eX1Mkp+62/sUpsubOT3WnAoiLciwSQcMSoA9a1rQYrHgE45UCBphUs2pDpPRh7UGUp8+7Gk8k5phYMMHoVAhKEoXbV0QSpr7seycQj36v8ht7iB5ewvnk9/9XoP84tyM7fqsPFgfHgAYjU5ERokcAoQG98MzLLXam0NNkeprDij0N2ypbGJxoGDUOsREkbOnK8sDFxmI1M06i1VWecQijLvBDAOvuSPbIOs8aWOdb2aZu/oKNIKunMsqoxbr6EcMSMUOcyGl63/lUneQT0XDv0t7zg+GH9LRunpUYcomd4WCMIDGHBE09Gglj+lCxvs99OUQIYTICSp/4vTBdt4Dm3UDFwUEQo9iZc0aYqc8RzxA+yVv6DAicKTKXb2OeFSesUlHnVCDk2pHtlHXU0qaUD8p/WMfUba1OsTDxfHG6Dj5VLk93tmd/GBdOfhsVkfLJvSwunrUXqkUC+b1rFRUUyr2wcar7Gq5hqIzR65HKGkggb4e4fUZRkWfbU25v1ELAzkaimnQddBq49/Ql+1x22LNwxoFuDbohT+wVro92C0kWkcOqPyhfr1EfFgo4MzGYEchAPErFAI6OX0+lEJclH7BADgbP8AtfAYsqQkC3F7snAXX75i14rlqt/2qWwtH13YaPRTrmGvluIqq+F49LZeYdhccmCsMa3KFR9F8UkTkxYroJ00HPsu63Fajm01Ez8r0NdNN4J5cbNnvDvSIn2GBFGLfEkgCkxtIEkhqTiUOHOK7iAL+nQLPBYadiibXCTnUcz3OqCkkLkTEVmIXbhFEsz2dld6+mNKFfyeRFIMFcq15mNgUZTpwOgPG6cy0qSa/3jij/Tl8yyeMfL5Z/sLW70k6eUrZJBqHGbtNgiedBGs2WJxPBcnXtK/bkVdrK5QotnBFz5XQR1p4A18QJGVxkuI2VMUeSrgFn6yYySHLZbnebwW3IhcFJ7AOziOidDQygGhP9Fjb+2NIHncNRNG1JHzUYt/5BQp/jwceyJQF+2VGzLnkTC4sJWYX6QpocFddLENURL6uNNKFgOfASqgLy5MSIoFTiXP5HdNvNFqs+tvn35vVIpH5ckKvF6VCmLgOCALuEbq+G2A1qOl33PyJgL/pljuNLvB8iNR+vcvb4HcBHihBckAVBdhkzo0OgG+NW57AB0XH+6CV6OvN5TwliSbNe/qpIaYP+lVAPStCg/oTOjekmWGTC/NAW9DrLw8SxLoTZPBAcWArzEqu0wNtnjVdJK/w+mJ+PJsLZDcd5OYCtXaBMHQdTCACwPcJdUFHOks8tZRJ3jHJk0wIgQRQdGls1j3MC7+5RFVzQlWwRVWyw90g3lW9G6T1e361OcyT/lr7me6VXaIEaWVq2iqGixT2hvxL0wSkacKVpyKfctsT9OT0VQJ0N73XfU9ufd7TchHOhYu8WkzCjPHByoXNJk+T1+/RMqu409VrbzjzcUrVcaovIfWLcwtf+MsaaBd7ysxNSMeZm3oqCdC6spzgaQL6wKibb4q6PfChNWP89NNw9Jh8tI2lXdzQP9kSGlZY2b0hNUotVni6ImYmnn4KmPNQacJtOfh7FsVRFrHlDWmI1UF9T03xdZEc108ZOxPltljx+DlLo/k014pb2ePyfRCNZY8HA7rdw2azOBQk2tzVssgxUmtenE41dR9Aw9xuTHcHkB1QGkZkLVSdihxDa0WOxdRUJYCcjj0Xhzuxf9u1KrZ2d833JFkUaP6XZdm6gCZcZYk8KnchRbcSUGzeOVRfGLmulHIzs9/POrlUNnyvxQS8ZXN7L9S1ojVnPQ7lFrzf+nYfEBA1qwvoKdIYmhwiaM1I9fI+kQZQGl2bvoVx2I5kW+6h8p6lw+tYe/3VsVaLC6GuMb2y9k1tT5Y9Rs+07HQCJklqmOTTcJiMV29snn1BJllljEdQjeZdPAjqFNBccdmWQfFbrCOdmAIeIc2gUZoXVoTXb8GubS3RXYFdVt/54mopg20Ns2Lh9Y4s22W/BXe7wKSLTgbLVfP+vbMnpActTJh16qySA9c/O3EOLmOt92iuGNQ4ZjZWgMUtZYZ9N4t0dqooNm2fmiqa83xzqjj6G/vI8tjjYtFQOOHGF7vp+sXwxaD/jYhHSBM1SvPC+KLY6nVNfLFH23w6vqhaebddbs7JbHOLypLXQhf32atLpIstkndt00UX+U6l3q3IJ1ZftCaPIodW8mDFGwXk1zJZElk5xdRmH3WuuiQTkHGprLsLxYqPiXYU+4X47LyK9wWplOwnExe5OtJRN8CPGNDNIRZNCw2bvk18RKw0WlDNFl6O3TXME0i9kNm1MJVyf9ilZKmVddrvgQOgXKjdyWvYdyjW3pkS1YwgG5U2zYOxrFjYlSDVjfLajs+ezQzBYe8FuJjqnESqzgkcjMidhQ0759ZUbqbVleXAKQt45iQIdlTVRk112xYK7lNTW7h5V0P/m9kCH5XS5i0o7+PzDMGMPj0BakJiPx+FLyFkqJ7LVllmxhrT7680YdN6Vr5YOhN8x6ApvWble3bfOnPdWfnY1bKGoN+VekDoq+/80t5Qf3YbHrRISbJFNo5aX+mxSDf01bL91OtMSDFV6YOhs85hO36YJrkp313ODeDsRzJh+RX/Bw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-13T08:33:35.083Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"3GFI6RK25TIiHDdxHo6n\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"lqJgwdgU07QzmivSlqgu\" name\u003d\"Page-1\"\u003e7V1dc6M6Ev01fowLISTgMXGSnYedmtRma+/M0y1iKzY12HgxvnH2168wCEMLG5lIYOfGeYgR4kvdOt19upFHeLLc/SMJ1ovv8YxFI9ua7Ub4fmTbCHk2/5e1vOctvmXlDfMknBWdDg3P4f9Y0Si6bcMZ29Q6pnEcpeG63jiNVys2TWttQZLEb/Vur3FUv+o6mDOp4XkaRHLrH+EsXeStHrEO7d9YOF+IKyPxfMtAdC4aNotgFr9VmvDDCE+SOE7zb8vdhEXZ4IlxyY97PLK3vLGErVKVA+7TrfUrWD/+kf7nffHnj3sb/5zfFGf5K4i2xQMXN5u+ixFI4u1qxrKToBG+e1uEKXteB9Ns7xuXOW9bpMuo2P0aRtEkjuJkfyxmaEaYy9s3aRL/ZpU9PnVxQPme4gZYkrLd0SdD5XhxRWPxkqXJO+8iDiD5EYWKucXmW0VeuBDCoiIr6hQdg0JH5uWZD8PIvxQjecao2g2jSqM0G5+YP1J1eOl/t7HYcbPZq/8t74DoenfYyb/Ns///jOfhdJTJOT/bSyL2TKJgs+F77sNgngRL0YHffX7FvJckWz7maV2AdUGt4hUDUi2agiicr/jmlMuI8fa7TIIhnze3xY5lOJtll2nUmINOWcWzV1XDx/jxUY9qOM64rhy+rBwINSiHmLXadcP9sG7w52/QDf4/WGZjG8lbYSaj10wCorl+iNgCSlWo2xFVgr1PAIelABx1HXjdf2RAKXVDAhTXtazJRBOguFBtPFltHL8JU0ypjWdIbQSkfA9W3JQlqsBxxbL1fSBb1IAJjtOncBFtN8NsNbvN/JkMczOw51KrDfIs2CxKK30MUdkuTH9mQuNDkG/9KkSYfb/fVTfexcaKP+LP4sT7jV+HM2Sbh8P2W+I4IN0gsKy91Nuky2aSRwZky8cl3iZT1j5d0iCZs/TUyONmZamoAmnQBNGWsChIw7/q99ukHsUVnuJwP1mFdUL+GNHDx3Vqismd4DGuftz6BfJRKM5Z9fwaLgNUngLXJx8o6VR7bS6H5QMKjtsVPE3CYDU/6jIcdzJLzTqGM0mccinFmVdy41umAcaxPDja2JEARgxAVascY/hiyumYxMtlsJrx/d/CTRpnt2rCfhyxE8fkbVS81LNarQeyvD6tR5NvcKb1aDMYqGouSuPRYjCsz2gw3CENBoJ+KSUAyFVtgovhqfhNKtkErkfBe6XbOuuwMWI1/J7cIqB5ryT7a9K83ExnEVMSzEJWO9vL/u8MrRzS6wAGqqMSyWfy+vUrRJRe0RAkqchlkBxqisjbCw7UtjTZK6IQ7TQRINSQubJlzvFp9noXx79lTuEpSDZZUKrRe7izKW0cayCTx/1HjwyIW/cZMFJkoYz5DAJJTfoM1tinNbfBd8T2EceBbzyxJOSPmM024EyM7dKB+FXd2bs3MRRuU5tAk03wuCN0yyfDiI69SrD5UW9A+SE8WrQcFDo/q15TIYegX6YCmArbPiqbVnNhDKkcPUh1Aupl5OoU7YytbHAPCHXDWyhugan9FgS9q4iE8nDh+iMhu26bKdRkTcAHLiOiLbOYR6S5U2ToNTpU6CVAzG6fZcfpGcuiD7e6XK3aKLtC22q5YNqno9VEvV0ifJ3J7tdtlCpelc63Rrwqy0JaAcsbFLDq89+FGqfsuIHzIDW40gYpMtl4ezeZxDkN/EnjN2wrxG+NJSbGYEWBGuucUFEd4kMiNwrX3xodZt25FeIBQSBZEL4sBzE62uWA5Th6krAgZRtZHJcZWxTyRZ4sX2v/0SQ5HwPJ2UNHFvhaIotLNc2tFhcPGiJw1D6VXceO380C3yAP0t4ucnq1wlh27HMrnJthjeZ2MvH93ulSaG19GeQJ6tHaOg1lsu5d8MInUTBNR+59Q0GmkIXmMrnhnSEgHWLJIVbP0lEoLrm66qle8Nmxh8RnZJMxPYHPrnOKj1ZF65arODaFFLph7HZkl1H2FbW47i21UOZLoZDE0jmujBbi+XsphXI0OH2dfOhmD9BVJpcvJfulkUF2Bk2nwaC+NGTnIgwG2V2HmGGQMWCQHev0bYG7Qqe7e96p7mb4aUeh7llPWehFsRi2VCHaSCj1yWM4Mk39xWM0ys7BDXnzgZkMR6EC9BPOIxeG4baw7oNNI5mWfdix6fZrHkmuIbYk4dFhZ5Ew28O5hrW4UpRcN3uGg6bchnXcdGXSEEwWQ0LQcCBIGlillpc4z3+HU2TgPh8NBRKhuOEVzX5zcsQED6WEH6bf0DPBPZFBuafy/c5SezqCCKH1vJZjqHwI3rCDeqgfIpdCVRlnqggGieWGKnnx8L3wVKShziKZb5dsrxT/5iOxCnWXVjTlevbAc3z1job3YEr5aRALN8rAS2xMN9i9wryJt5LOgvkKsqtwgV3cywzin4vniZN0Ec/jVRA9HFoHrvlSpRip1axfPVGM4F3Rkik828oAMo9A3NFFMXqArqenSUPH9k71N2OVqBynVaDx+zZKwyVHus+NjJhCDnF4ZKRyQDOJwuf3VRrsPrk4CMKXJgwF302nmSpjuy8z1cFMDUqoEL9uXaRXIJRrk0GQQqC9G8hMERef6m/ITMl0wN8FDSm5PLedyrnGp4S9hp9dFrKjQO0GpqxfWWh4KeaDtskQU1bKX92KtBsHOqRxgIUBpCvdDglbYy/agRsWLwaaBXsNa/B00+guXlNHD83kLGj1pYT2XPh0oaA8lnYN+V2r23TRptE901wyRp+ZzRg4fjCi81diInxgIrrqPHYBdFNSWwCx30JdUSlsatW8f7HNNkr/BivmYYhkDf4n6XPFPFd+faZfa91pOb1rWn/VVQSufI4NBVwucElRV+DyQC0xgiuqafJtj11H9b568YVdE6sZf4R5RC0z5eA5uFdVgHXx80sq1YKLFSiv0QJjR2gaNM0vBKo53JaiedfyTvU3M788hR/tuLR3/yu1HMjTVYoNaWvPaSjE7rX+V/zaTY1kjGfb6Vf9r1TZAUjJ4Vca83p+NWwQDufTZMwGXbjfBSyPVPWn7DgClkeqENGWMaP1G27JmLliyfg+M2beYGFZbyuWdwkANU4vciV1Uw5kDLoSSsBFUE1Ia9PowUKhL5Nytkkhg64PZ8MC7655NugWO4orxJk2KbY3hEkZKtPc3TScxUJU5qx71qTVOMFU59dlcX2laTjbZQOkBjZUiwtrfm2v5QV+9LH+pKW/63in+huav62/ezctp9IhzSIi1UqTwk9ukqZcTXVZLWt/uPWwmibv67Rs5k9m3bN6m8XS47+cCPBnswjW2ddVnCrwNS/B9Pd8H8P/2KZRuGIlSiW/f/CjwnQ/xccWkVGozFGeqjlSRbjRx0kA+SXgclZWGRwRF3wwN8Q3D7+2myvo4TeL8cP/AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/MergeCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-12T15:45:51.670Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"MLe4jAKSg0-RYBfKFvGr\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e5Vxbd5s4EP41OWf3IT0g7o++ZrMn6cnGbbd56lGMYtNiRAE3cX/9SiBhI2Qbx4CxNw8xCHHRzDffjEYDV9pg8XYTwXB+j13kXwHFfbvShlcAqIqtkB/asspadEXLGmaR57JO64aJ9xvxM1nr0nNRXOiYYOwnXlhsnOIgQNOk0AajCL8Wu71gv3jXEM5QqWEyhX659V/PTeasVTWd9YG/kDebs1vbwMwOPMPpj1mElwG73xXQXtK/7PAC8muxgcZz6OLXjSZtdKUNIoyTbGvxNkA+lS0XW3beeMvR/LkjFCRVThj8mlx/D2+c5y/+31/gTW8Zgvm1xQbzC/pLxMeRPm2y4hJCLhEY28VRMsczHEB/tG7tp1JA9D4q2Vv3ucM4ZI3fUZKsmPbhMsGkaZ4sfHY0TiL8Aw2wj6P0npqS/pEj5VGygcd4GU3RjqEZNkMTjGYo2dHRtLKOdJwbt2BSvEF4gZJoRTpEyIeJ96sIHMjwN8v7rXVANpgaDlAJf+6dKvF9Yh9IEOIchvR4TEacTBKY0OMvnu9vyNVUeo5qySVujnpjegYOko12hukdmviFogS97ZQcP6oxW2BcAVQ2tNe15fEu8w2b4221y9rUD5E1FzAK3C3iRYaqp7AtibcPGKCbFK9qFOWrayeWL3cOnaUX9OYlX1kvuv1EtpUPBtsbUsHybsMV26lESfHvp0Tp3wSfR/8AaKLl/c837Zq7gv2UpNdNSezUB+yRh84RYyiCQQKreIlsSOwsAQz5Y7wfH5bWdXwEZIBf16Cgu08cFHRnDZF07yCM7PRGezFig3YwApwiRjRdwEj2pM1hxDobjBQQsgbM6TBCwth2QKLZe4ikYZCYFUASzfHieUmep/869xI0CWEq5FcyrymqWnDqjjMYjMf1uGggeGigWCUPrUs8tN6Uh7YkEZDRRz4JeIxhSYRklElRVhGKvd/wOe1AQR1SDacPafTpFbQ+NaU4syp6AvS9WUC2ffRCL0VF55HZWI81J9Qc+zHRjRfMPqW2ea3XJHs+1pWgiz2yB41FR5c7+eLOab8XM+omqONUAkoqeSQX9hC5MVAe3Jc4nfnHRN5AwQG9XOB6UxSX2aaglsMYZzweOqZZE+pVgXGcMupV0Cbl5E5pQ8if5hF+vQImXFDJBM8x/RngxQIG7uhtisLEo9I2fcoZzxHZmtGtP+5Hk0nvZvTt9uOX3t3t8NvDcPxteDt5uOs9jYakdTj6+mf5tM4qSzecve4B2GqLyrKrZCPOlKOMqhzVrQQRf+4NlUxgyk9jz6c/+Pk7zZTSZGhEHxtO5+nDZTzmZkTWWRsQCUvjNnE6wtLLEr8YI6g8leDi7YoVlCP+QYRoVo7Aezi+R2Q80efE871kdTZY10GZ79vGepWUaDem222lZHLo7/cUTt02siUnYxVxY5rtTrdziWz6IEQfcBl4P5fUBgO4QLkLCtBr7p7OxBTz1OjJTNE5n+ToYYmvxpLuO21yr/E6ajvGq4tIU41KxtuLIrja6MZSLVvvowmrbYajb16u3N88rr/OEsNrzGdPXCvzOF3PmXBwrwH9tAH1usHNMbsf3N3Ks6ig6yH1e0iq/ZWAyvrPXVfT7GYKoYluC/5xC7uVLmQpavFCRrtrk1y0XV9S0BWjKCfJHKLVJQWVV3V017a3TCHUTgUuTtX8VGu2bQgmaVVcCj40crEcUIxEDEVAZQORhape6sy35ZCkOmxbCrhNrZhVN01QCba1eZIKsU4XPYmhlafArXoSR7o4vQzS9WZaJ0z++Ri6VzTlN8TT5QKlescv9GmCFc85XNpKti7W+UlcvrTQr7GlbEdSf3GhZQS6MK3WzWrxVmOyV5VyMo6IbQqDAFNrgK6bJ98ymynlxy9OR4KByJgsT/i1oyRVoqSLii7aCYrzWHczvJAW29rtBBeGJsTEVrVpaulCtlEsTzJ0s9UoRVUlYcr/hMMNq1qk0xw9gDI9HFsTcz96JP9pRcy4d3t3TmUwplM0BemyKI+q645EpWRSc9ZZeR95H7f0KTDhe/lXknGUisxohm6FNxbMiunFQ1MQOijOhSzF3snee/o3lLIA5RxlGtjRgaan06gvzmLAtPBHHv51lQc0syhUUxLGNbYmKwV1ze8ivJMH3mfP2620SrJGO9aej5J7OTQZ+Dhe45xmAZA8D8BMoDmIl/As0URliHPeOGUFUNdfuDnCe2mV8a7X/ubMcVrRZEnELKILeUCXF8Bl9TZplWdG+REKSXieWcWCcj+1lZc0JZBdgzxU2Pm40ADFuLALxuJcrrFwE6hgLLVPto/UiixeF4zlc+hmxgLD0Cfzzmw2pSyyL1yckVWYNvjQOSdinE/x2mFrwMfYk+SLFKdMXamKUlwYs4BdvEbjZaSyt0sEO31EyTKilslSH48oXpIe52Shti7kCE9un7bMbQmC5w1xCAPelhX5uihOvIAzZki/dMOC7Q21bJ4mu1R5Frrz1LNQdKmImH/g4IRELHGFRh9SNfoIxuk0KaBu0AtIF89Nt1wy3EvL+QIhqSh7ty7/gErdSV8pzdddcHIWWUX5h1EqOka1GUfoWEU/qIkqr88P7hp+I7n/0cfB49PDp5bT/0flRExTUIfkVQxpeUNjaT9JKSjh0LTAJHV7yXzj9ct59jImCqbRKtNTB6n0KAXpQjwjU5DqtEmlnS/dk5bg5eviDVST17LaIysv385gtfOyJX6eyqnGy+XVGX3PhbYs0h+7asQdSV2rQHJyKruPU4QRNYYDVefJR4cDR3FOhS8j1FTVeRRZO6BI1m1Wdcq5osKLFeeFV7UyTSpyVbUDWLWC4LuAWFUReL/NV1p2frix+5Kzuya5bjin9osb66m2USVLMM0wizygsZ3iVCxfhjy0ulFVgBCC6aB4pXfPscnu+ivaWff1p8q10X8\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/MergeCommandSequenceDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T08:03:06.725Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"2fDYr5rwS-QocvgywK2q\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"oIkx-gFuPF_Gsz0uqnnu\" name\u003d\"Page-1\"\u003e7V1bk5s4Fv41rtp9aJcuIMFjuzuZ3a1JVW+yqZnZly3axjYVbDyYTrv3148wyEYXrkZgJ90PiREgwznfueroeIIfNodfYm+3/hQt/HCCwOIwwY8ThJCNMPsvHXnLRmzHzQZWcbDIhuB54Evwfz8fBPnoS7Dw98KFSRSFSbATB+fRduvPE2HMi+PoVbxsGYXit+68la8MfJl7oTr6W7BI1tmoY4Pz+D/8YLXm3wxBfmbj8Yvzgf3aW0SvhSH8YYIf4ihKsk+bw4MfpsTjdMnu+1hy9vRgsb9Nmtzwz6/b5++L7X9/+3rYf99b4XL76T93+SzfvfAlf+H8YZM3ToE4etku/HQSOMGz13WQ+F923jw9+8p4zsbWySbMTy+jbZIzEbI3nKkPyb/RjxP/UBjKH/oXP9r4SfzGLsnPEk7AHEE4n+H1zA7MZ10XWOFaOdK8HAKr09RnKrEPOaFaEA0ZJBpIj4MwfIjCKD7OhX24sH3KxvdJHH3zC2dcQrFH+iHzHUYimYFCZmIBDZm5KPROZqySGd//Gq2C+Sdvy+QuVqjORGyXfnzZhL8GSz8MtuxotvPjgD2RnxItzIefzmN13GGaJfHYLfHpOAy93T54Pn5ryq/Yn7/E++C7/9nfZ2xMR6OXJP2mh5Ni0rDW8wBYLnWspRSAh4ccHIXx5fGvH5Y7AsNtleEnZSYwHJliuFUvVwW+7KJgmxwfwZ5N7EeJ0VGcrKNVtPXCIqsLkoZMs6MS0415ZNkCk1xXwySVRw6Ahnhkv/OojkeWTpBUHhkTI6LTm0+L5SyKvk0QCdn3z56Z8iSr9NOTF+/fVemlqhRaWMCA01CZYssUCuiPL6ikLZdkZaoyydXIKTTFIkdhkX9g+E/8v/1d4RV7w0QUJpGs2+gooEUe5ENeGKy27HDOiHnkW0qvgEU49/mJTbBYpF+jld6zIws07r3EQPRICQBm/FGIVNNHh1SrrsKtoy96/ZxCPXEEEWcqChC2FZboQgRjLOGSWaXk/O3iPs0DpGps5zMqztjIxyDkzGFHRUQXw7LW+qyUyP5CyDKoJC7aCZK/VeyHXsJMoTCTjob5dE+pDi/EzaJFglTiwj56ied+flMxbyDNAx2neqLEi1d+okx05OjpFS9gcoMcxQVMluSEcS5++z0VoilyCB/4I5eq48HjQTh6Kx4V7KPOSSHAc6E2lK9XnRmZKwhljYe1OyIpazn30hRsd1CaSM4umAabmtvZpQ7yQ7TZeNvFrRrm+3sAPn7sxwxQR8/qol3WpOPMGQFNniiPclIqCNwif75E/MRdFmDcswsg3B3OJydpNpmT7jzI3dPCUBZBsTk++QyVOUbKQ6xsnL1k9lz53Tcfec0QIX2BS/UxINGlPDReBnSNIWz0xFQFiatl4lZzGHD0PNPgJNdEo/rUnimSa/JG5vysG3euoStZQVeaoqnDwxSePNEUFP74+ulQ/k+DtFEBBM9hNP/GeLPw9uvTatcZEsAwJPxDkGS+OrCc/Dh11RkJCcyPz956evBWOJB99VKAZbxsYCDGQKIMIAt3jfMkSCN5ItPQU9Nhfeqf1uDas/fl+KTFyBAKUeGU2nWB4RmlGBdQym8dCqS5H1UbR/ILx9GrrghCYnF/sC2eMZGnwvJUphGtpgyPweTNR5Gh9+yHM2/+bXW8X3qiUoi2WE5xLZF3fHmlCDld0YcxhxTpUo2XRZk8/hNm6SPyVCJMOSB9D0UbYBBLeU9kNwxEiewL9gfCBqnQ64qKTmJzq4Eop/BPRHLoqBV2OppbrmuK6A0SLkO6gmcPzmVORdGDS73vAV04ezzPDEvlYkoiorFfxhMdZROVeGWM295b4bJc1Az4bahB8ukag2DrFPRm4ISAtgZnYf0rx3qbSEe3BFYK9/pAZES4W5hFCxRayMn+tUSHFEN3WjhrOx1lQRIqLNux8WWhXVZwZFkoxdooGhNKzJVrvbpmZpSJDMexqEFSsBAqPPopg97qI4GMj3xbBa5wfQxUs2AIlGqWU4KgiAZb9XygXY6Fyxyfdjmwa5W2Ws2Ox5NKuZwFd/VjSM08poVSTS5VQWW82qdaMHCbdwVFUlZXFY14zFQ2kWE0YF16qj80VKuKS6qaRqlWspHArK6VcbRyFtMcb1cW16upKIQcVFzRgG77kOPG0WQTuWIFuF3XLJQ6Orn23DSoGmS72m1tFHm78HxnOdesNCi8JnPHf+5pc4Zri1oe54JbAAMi+Zi4gxSXg+GyrY1qzVq+dVoi9tWtC/XlfkNAZLnRpHoHrSbHujCn5RKPo1viuWe0Xfvs9NPjx1l0aLr68sPynri4jvGQasIuY5y31YTfje/E6bPgF2Ex92XxvMZoi7HkRquULMwLPnhClXtPPawejJMlpdNCFpRKSHGxI57u5hURNAXlqdiaLxk9g0oa5HRuLnt2qjLjTLA0OsFQ5gz9bn/53wGsH+M/Pr/9699/vu62n3XNImQip8Uqu5IXPTWQ8Z755aCETOU0kYBpA6LJJ2Ko05R97DHV0qWBQ385Xco5UqmFzJFC79+ZLXDuIWNWxcFRcqUCnlHnUjwk7epCaOBKPKzTwUXXXluLVe/uI21FF75njv6xMCv+mgRhkLz9hJVZ+XlLb3AqdVVzz5QrkLqSLINKpUEavuf6IJWa1Zi/gdIrLRyG72BRagQbErtxhZUmA6UjrbHWWtaIFS7nOvopsPBEqDBB9DRwWYnJtVlSJC052LS1LS2907DttBq4TTcXvxCXStlHCjQyOWQE08CQmI9gJAtgIYUmRNcjB0PFN+yNLg3gZyiCcWvVg54YwJRFbFAWa4gU5NpI0WSD8OABv62qEIsQlSzmwn1tR5weAh2rNNB5jOYvG/849XuIU+M6ViC5vE6NA6g2xuEGrH9QDb/t5AJygkpyXlmM02SnwxjOlQnKS/2oXA2uh/S3tH1jymOggdKBUnBygf4wsdwjcJDTq/3GXCLOY6zGRU+vdpuLbiP2vW7YSOlfu319VOmdpsEySPTRLipzMNCsK1GisVsQO+XMuqxkQheu9uBo2iWOZl4e9dP5mJIdgc8e9JHkeyo2BQDy4Z4b92YNdqvR3zyvwlGYY/XO0npYulwnNQVVoouJzLqvpVzrgVPV4tg12U806/e6ftU9VETqUxujN/y6mEld1g3skhxTSbRCtDuUhuSTtg/G0AYR0ylG2EauBSElliMW4jtEV3fBnJkpYRdTYDsOu5m7/0JvNWJKBaFSa7nfedtGltFE95C8cQgzQy9hXQaHDWfPWm50b926VrRaqBaG5vZRBqHVzDpSZAqZDaLg6+pvcZKlG1jX1r/AtXW34EHpHZgCKPa8niLn1PvMxIrsiFv/qF4ST0mJrsVOZSJeOvH4Faq32u9CaPoImE9gTS4vp746oEIApbVq253m6MpcoI69R0klUBvnWgYE6g2UIvTkKECAp1DjrvJqBU3h25DJc3QF9dZYqqkhkE6p67qIUJs6EKkxAKanMgXB0ttTBACgTH8g6FBjNFODgE1aJMpXUPc/yGajLmtHqKRanE+DXVkFqvg3tQVJ/8Bmf5XExOrRgNuCLDELSHihROsd9qBmIsPp/yadb4ZO/1NmmCFTc3Zq+E/aaswKrSZdawzVJWUMuqbCpCZ9WUwRo6QIeTxiaNuSGFwlelos39eIel0j6mTMq5PatuaX/LRJrz5+6kIPy9H76JpebKiQxp7TZMZKGZv0IhmjCSycAkyEvANyUce8Q/uyjTLZMr/7r+PmbRtJ1T5oUA9O02mlCkUmc1sNZL7YfZXK3VfPBUND1AcNCDSbSg0mOtcHyT87aBpcP1D1ZpknfeKRnISkaOxumfZVxuDX0prDQlPLgghjF9rsgyhhHUrwOJ4gE0+XAgc6AFoUEHliUxKoh8BNqferAgiEdrqEAlyLEDeto5A42fUXzZRNZPJEhiFB3rVClVYQE2qO3VkN2DUzdWYzO4yjNLI/X84s5DqrAMUf/gI\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/ModelComponentClassBetterOopDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-14T11:29:01.436Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"7oUEEhYp9muS25EswMri\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"aSh8x19J2bZZuc313bSB\" name\u003d\"Page-1\"\u003e7Vvdc9o4EP9reLkZMpZlG/MYIFyn07vJXHJt0jcFC6ypsagtAvSvPxlL/hCODZyJHZe8gFar1cfu/na1Cj04Xm7/DNDK/Ys62OvpmrPtwUlP14EGIP+IKLuYMhiAmLAIiCOYUsID+YXlSEFdEweHOUZGqcfIKk+cUd/HM5ajoSCgmzzbnHr5WVdogQ8IDzPkHVK/EYe5MdU2tZT+CZOFK2cGmuhZIsksCKGLHLrJkOBdD44DSln8bbkdYy86PHku8bjpG73JwgLss2MGPP5i/9DPuy/G67j/fexu/JfxtK/HUl6RtxYb7umWx+WN5pSLjc7Vo8G+x/q5jpY66ulwvv/LkrSQ7cSRSWIkoB/uFXrLGYC52mZHWIvo81+f/Fzje2f+hYRMTs33EM8e84jjSybQA7r2HRxtS+PdG5cw/LBCs6h3w62Q01y29HgLiGWMk01ATRsOjUlEJ56XoVvWSJ9Ok9leccDw9s2TBon+uOFjusQs2HEWMUC3hcqFzevSJjapBQFD0NyM9ViChoTRLhLRqV75F6HaE9QMq9RcqT6+/wL1gWNVhn3nNvJG3qIr7OdVxDuF4wN+qqOQoYBJboegJfWdR5f4skvyGpIwJV4iyuHeK6alAXPpgvrIu0upI+SRBRc18fA8WmmkaMLd/VaQXyhjdBlJ2hL2JKXy78+Rud2YojXZCuvbN3ay4TtiLdqhhYEXBHC8v4D+wDmbtO5up0mPxBmYHGS0q3Jb5IdN18EMl9iAUWqz2o2Rs1mJvwH2ECOv+emL7FNIvqdkb1DSd1RXgIqJx8sWo7LopQg68ClVEDeEBWYlgiQjnc9DnOPZu1RyJOd7mdEwmH7FQUiojx2OpyNKf3QFT822wandiqj5iBZdjpq23rCWh9eg+RGCJjevYPeUCOONzKxRM51235LzXj7Y8qvKPihVIUlJULZ1C1wiLicYKjHVODcuDysE/Y+4zM0Z7TIcq2hEWLIpUJwjvLl2hR8AXQGNeAW1JglyzgJYCVfIPx9W/sjASizpCitdgxX7SFgB5aFWu4G2PbwErhgqHAzOxBVTyQZAC/N9ABrOA3kG2JXszxjq7cr+QGVprAacPjb9yyNvHtpSxNYNFcsFhIFTISwD+iJEZMFdYu1T5vsxkHwIjafDco1gKkvTlWiql1puvwBN+3rBFdWqCWIHNZVUDJgXBGtM3WqD2MrK5YUh9t6ZdxVim6+jAOvDY+xJWJng43Mmmf0YWCnf3iozT1gFlqaClAWBviakNDXF4M+95KpIWecltzakHBT4Umdufqe4Tv2vMOldMM2dnnOpU3Ei1USyAspLSko1Cdj15CSKgySv4Cdf+6y8y0L1/tgGT2u6/P83WuKuJCXK2w40zaZzksqy/4W1OyEBnjEabaUbKlbLrM3rWG+6cLMPnh1RLxy0Tr1Fl8ZrKvT7pULDBlIhc6BcOs6tgKtPdHDYvlRIb/pfXiYYOR7xOwOmplqTax5MzYZV3KFHDmvYOu0WVeCuofK3C5UVhtv2UKn6VRtD5bU+d/W0JGV6b0+zFU+zz/Q0qCSlhlroa4OnVdbn3vFV6erHXfVjs9SPtRt7YChOV9OrVl1R01Lrcu8aNXkz/e1bzJ7+ghDe/Qc\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/ModelComponentClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-13T09:40:48.026Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"SRydk24PwPBjvx-DuvTm\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"lqJgwdgU07QzmivSlqgu\" name\u003d\"Page-1\"\u003e7V3ZcptIFP0av0xVVPTC9ug1marJxJNkkvhpqiVaEhUEGoRsab5+mqUFNM0izCIrkqsS00ADdz333Ea+Qrer3XufrJcfPYs6V1Cxdlfo7gpCA2H2bziwjwdU3YgHFr5txUMgHfhi/0eTQSUZ3doW3eQODDzPCex1fnDmuS6dBbkx4vveS/6wuefkr7omC1oY+DIjTnH0u20Fy+SxVCUd/0DtxZJfGSjJnhXhBycDmyWxvJfMELq/Qre+5wXxb6vdLXVC2XG5xOc9lOw93JhP3aDJCXfBVnki64fvwbf98p9PdxD9WLxLZnkmzjZ54ORmgz2XgO9tXYuGk4ArdPOytAP6ZU1m4d4XpnI2tgxWTrJ7bjvOred4fnQusgg15jM2vgl87yfN7NFmBp3O2Z7iY/B7on5Ad5mh5LHeU29FA3/PDuF71fiMxMT0ZPMloy+UKGGZ0ZWqJQeSxEYWh5lTMbJfEkkeIVUokarmBKF8PPaUWfFq/249vuPdJjL/a3YA0Na7dGdk31x06SACUwIozA5pi/D/xAs1sgrV404363hndAtTnx9265DNhs19Z5OFT1b8APbI8W3GRxUMgmklyGs9r13Xc6lgCskQceyFyzZnTNeUjd+EOraZs10nO1a2ZYWXkZpZaohKIrCMPSns8/DQjT1hPMlblFm0KAAkFsVdvXOD0l9tUEwku6Kh8Fk2a+K+apbY0pzilh1qeh7qkQ/nT8ndBpNNfCf5u+vmGVO7LzX0yuHXyYi7ZNVzZu+wNAgrDYJw3jXm0acYnMHNNbiHsuCsKNr9dUfOBHTRm4yiN2FT4k1aX95k9ORNkY4/EpdhAr9pMO1FsXFa6FuxpikoFkjiJMZDahZo9XiGutZ1CAzDPBQmQHuWF7JFNssD3BEkbpoIRVmG7uzgR6g0JoJ46ylRYfj73S67secbLnvEH8nE0cZTOkO4mZ4WbfHzOtTuxtv6M1rvGgHxFzSoEjSKD6RWDj4XjSVjCqoMgyVjPnVIYD/nQbfMPJIrPHp25Kk8YwNzArT0o+OcYbJqYoKyHz1/gVgsyZxZCC25jGDyIoaMJVeYKrLmg1heYeCo3sAD3ybuohRGlaP1g2WVxRnfC5iWvBCpvTOVvgMMVgxR2ryazFgVF0DWqnBv8cUcKL4Impmr4Y+0joo+IZDyiWXT3GzT6KdKGSfkvoKmBbdq76FGbw76/Lvx8fvnzyb9cD3b7v5yn6aPWFpQ57CFtJBLPCxb8NWXiKoMg3yj/oZ5KLUerfmN5/0cAocoimniu6LVatoNzNRkBc+XmGR5MDDzIR3xij5bk/WFNaSalhX5R4aCshr2gBQy4OCALyqQQi60cIjCf8+AjVKI0hZqCHGkHfbQi9hDKng0ZqjSeY2/l5tX00Cl6/l5gDBPSZhi5kT2mcPW4QGbittVhcskgTU1/HjGTmOgDKO8rr5qGjU75iPSgvzTdEP9ZzJ16B/2JjiCUnhjYVYzBHuRUV+Dhll8VJi1bLLyXOvr0naj6Gg92OHlkljJ+wsQHx2H9VwgPlRwJYE4LQ9h8/qwPMiWh2XiB/zRvTV1+VjmqdsF6CpsU1scGrUBGmjdRGOo5M0Viwxs03CMtJqJeoaNRd4CFMz8JHl3xGqWuGJh49y9lG6CkQr1POZTiuWfLBZ1QcNLtVRLw3cG7uUE498sCT36dL45l3QDFSSUa+Pjehk7PELCgS0Tjn5GCUdSEYydcDCcqNDEAOga1hXV0ETrnUCUHiDM3zQb1VwFqniS2WmgQVNVkQK7pKoQOAupStIKGTJVgeGIKHmuOjP+SSyMxs9ToAEB1boVcBBdg1ZAk0bA62QvgHOEi84FJaJHvYn+uKI0CW2l0VCUdzY2lcWwFClcHdVMbMMKdpjRJSVkhXGPRfJpSKgGjZZlpRg1sGiSfXcj1I6ywFtaLlRk5RqvupO2VD5TYn1ynX1dRvtVOEGsjp76GizzGCT1NWqCv0r4OhaJKTRy7pORILW5L9eZ6ikRTtpVzCMlQq1pJhy1M68K5qeKSyuaZkLVFOzYHDgTdkPrgEpa5wSs+Yj1aEN3D8ymFl9r8F2xOUjEeaJRNl52MrZ1y9Yl9bTsxJAy067975YyhJRtj7514IPNPDc9PvDhmf5CvuX6RAL5hqFR0NOg5BscjnyTlyzMEc/FCZEpvj+AcVG9MgjUnxc2YN4GaBH1T/ycfIMINuaTzMFABcZ4opQ3bzDspEVUcxWEx2wRweIKsN8uaQojTYxkxtiJSkZkX/jBdvxg/eqMc2UIoWjY43fHoIz5HoMiBEbvHCHQxBdlZB0y3gsYhCWEx72INyBL2A41jcQSciuuxTd6LbzpkSQ85CdOErZdhQmFRfFYH5ZGgcdx29J3Oiowc1NblXJ5oNLm2r4xUobj29lw01dKK7D8WDaMBaIbtX2xQ6QCUcM3Ozqz4SLRfcHeEANVxN48RY2GvYucLSuSmVCZfKDiRDzqyaqtSRwT+6QdqBEZIO9cquybWfCAWkRFRrYqZYzfVxqCNarngMLM8iWRkOcHS2/hucS5T0dvZt4qTK1dIyoEu0tHnbWhMJ6gDCek5V91VaHRBWOEMJqAmA2KZhPCoVZ5kZ6TFtfKaIT5n2RFz6UaB2JXUymyTNJinGuh+yBZ+0Zoz+q9s306C7zwUc5Ux7iIZgbWcTcval4SoZgIu0x+6PSSHzRAVSNDxcrkkLLYQUa75IcVdaIX0xu/iGFOMpkRD5z8ulqk2zo6UmI5tns+CRCKXwKj8kbHeOFRRogOqeQoOJ6tgrHkSwUHVvBwLwfLFfyVLM5Xv6pWXPY8sH7f2gLSXxHfNF1UPWhxr1XiG02fGJl3fbWW+EZXKvCNBsHEHA/fHPeleRfPGcNzmjYah/QcvXKJk6rBTjzHNKo8B2gjeg6+kMun7zlNv7ZuSM9BcAjPUbXT9ZziCuxLF7SwvkKVfRV7Nz1Qtpn+aZNYq+nfh0H3/wM\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/MoveCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-10T16:06:21.149Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\" etag\u003d\"cpkv_tZ6MQtRQf2aONI9\" version\u003d\"10.6.0\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7Vxbk6I4FP41PvYUl4Dw2GrbW1u7VbPj7Ez3Y5So9CChMLY6v34TCGJCbGm5iN3bLwMhxOSc71zynTA9c7jaPcYwWv6NPRT0DM3b9cxRzzB0A2j0H9ayT1uAq6cNi9j3eKe8YeL/RryRv7fY+B5aCx0JxgHxI7FxhsMQzYjQBuMYb8VucxyIvxrBBSo0TGYwKLb+9D2y5K267eYP/kD+Ysl/2jHs9MEUzn4tYrwJ+e/1DHOe/KWPVzAbiy90vYQe3h41mQ89cxhjTNKr1W6IAibbTGzpe+MTTw/zjlFIyrwwfJ3cvUSP7vRH8OcP+Hi/iYzlndVPh3mFwQZl60hmS/aZhOgwVBn0ZkCXELFGFHoTAglrmvtBMMQBjpO+pq1BV++zriTGv9DRE2PUtzWNvYFDctTOZWYOiuvhS3xFMUG7oya+vkeEV4jEe9qFP3UsM32FY9EGIL3f5po1uTqWRzrN2iDH0uIwci5PesFF+g7x9u0S4vUoHvktjskSL3AIg4e8dZCADLHf0eld3ucvjCPe+III2XPjghuCadOSrAL+tKAMLfl7S+hrvIln6C3kONxYYbxA5I2ONocYW+ebSoxRAIn/Ktpl7SrJ5l0O8cdC5OBf0xWTE/CnbsNxT0jcfrgfNwt/PcMxhz/1zteFvw3q9S7I0kEC24J4BwYHdIve5eridbSOexe088kT78Wun+m19sXidyMm16zbaM9vLvdI1PjKuiRQt0vir37FPp31ATGWJhmk0ReHSNfE35LQcJhGhfBjdh0gIV3gU44KdvucoYLd5BhJ7qqDJItGZzHiGO1gxHBFjJhAwkg60+YwUiYD7AZGBITkgLkeRg4ep2mQmM4ZR9IwSOwSIImXeDXd0PkMtkufoEkEEyFv6bZRVLUU1F13OByP6wnR1OOKctL6hRANFCEaNLYBUGRA1gAFNOGxRgUR0lUSUVYxWvu/4TTpwEAdMQ0nk7QGbARzwExpnVoVewEG/iKk1wGas6GY6Hy62b3nzYSZ42BNdeOHi++Jbd6BmmSfrXUv6eKM7I0aZD962qLlggxHHgzDH7P95HHyz51ec/TTLvNs1WKc5Fkuc2hZLDvr0NyGYlxfNEugSzpv2H1l6z9Cwjc6pI/oigztqzdP6Jw11bKh4ZCNRlW+K3o4Ici9z8uNxyPXtmuyNF3ycm7R0nSjTTd3CIRHEv6+jPG2Z9hwxSQTTtdRsno7YH5pGtOrBbsa4tUKht7DboYi4jPpd1TqwHLPxpZ2pe6UoTI+V+rmWGU9ndVS5maLUREAs13XZxUwMowRY1fY2qkteQcPuPUpjA0tRNRqNc+P0YxgjtIu2qPsBUHG7F3NHt2us70ZH5NzMM+9nJ1R8zHtb9GzAtL5LXrtNlxN/UVTKxpPBzZJppyNKQyn1U2Sq9hdfpJNEtDLyb6OTZI6c9MUJLI1KAQBbQ1XKJ2Aoc02cSIDsQee81Dy4ZSWOfaMost41SOlHbY47WhN7zz1f2Hq127JoHSoOSQSjZcMpBqeLVePTpQMigM5ZwZqOPHUtXcVWm+t+Gf2i4671eKfrivSjQ8aNU1XjJqWVnTA7UZNo+h/PxrfYfVFvkMV9RrbX6kJXb0g9EpB70JCVxkILixZG2VL1jqwK8abioAvsbftwuYGOH3RVVjFI2Ctbm50w1X56bEfsHQaT1/YocZEjXiW0jJz6Aeb+ON5ccvUz6pGt1t146ZRr0f5rIxNWdZVN1uiXYElbtlsGUNl02gA5DQaiAM1nUabiirmB03zgCaleW45392cfwD/H445acIl9sy1n46p6O1VBG2an0dZen5UF+YhWigMiyWT9F06mcPrxZyoI9m8KfEKyuDbbs0YKBKjThlXBSMB5fN6p1tGAlSJvmQk/0ZemqrCKApocEj3sdoq/TjohqwCAHG3YJvuta3Cup0zu62FHFD2WxOr9m9N1FmhI7O02dmQtrJCoCJXi6FsEzO75JTTN7Te0B63ZJ+2JWff17dPhX+0Bn5I732WGPCjY9o6QjN/7lMhfrQ03ZDYWOVBqFbzdLcEMdgFcko+nqyiVJsip5SM6q3QH++pBlaLTzXRulrZ9C+tktUeoGxNIu8194slDlKWAXEc89xQ9UU7JUpvJyMSCTf9DOIur3XXgtLyrN3R9+q1knRZCTM7DNPXL4Oo7RriQG67AFV+5OFt0r1RfsQcsinLJ2s6mB0UApoCX6e3VLroLpTHMp2GsgOldmqmGVqtGioXpLBbZb+qoaWS1ItcWwcL5JWQbmdp5zUoNaXMO89W32o6p2DzToO+9jjZl1gqYEjfEJRO5aRDTIWBTsTJ+ziG+6NuPPyczj5tiWzmp15Pxu+3+9OLdAa1Bu2uHU+r5ItkzVpWkShp6nia+qyO8lhxV8uWlWRv6VIcaK5sSW/z/zAqNYT8f+UyH/4D\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/OpenCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T08:37:16.332Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"Uon5m3emtCvW4zmwsr4b\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e5VvbcqM4EP0aV+0+ZAvE/dH38VZm1hvPZpOnFDYyMMGIAjm28/UjgWQbgW3iwcTJ5CFBjRBS63Sf7hZpKd3FehjbkfcVOTBoAclZt5ReCwADyOQ3FWwygWoamcCNfScTyTvBxH+FTCgx6dJ3YJLriBEKsB/lhTMUhnCGczI7jtEq322OgvxbI9uFBcFkZgdF6f++gz0mlXVrd+ML9F2PvdoEenZjas+e3RgtQ/a+FlDm6U92e2HzsdhCE8920GpPpPRbSjdGCGdXi3UXBlS1XG3Zc4MDd7fzjmGIqzzQfZnc/IiG1vQ++PveHraXEfBuDLaYFztYQr6OdLZ4wzUEHaIw1kQx9pCLQjvo76SdVAuQvkcmrV2fW4QiJvwBMd6w3beXGBGRhxcBu5vgGD3DLgpQnL5TkdIfcqe4SrbwBC3jGTyyNM1kaLJjF+IjHXUGWLrOvVcwLQ4hWkAcb0iHGAY29l/ywLEZ/txtv90ekAu2DW/YEj7vo1sSBMQ+oKBEz47o/YSsGE+wjen9uR8Ee3rVpbYlG+Ua1/vtAX0ChXhPzjB9ZCdeYIzh+qjm+F2V2QLzFUBmS1vtLE9hXbw9m+Oy2nVtKFcOf6LrePNAhNJfGm8+0iZv9Na51oa1zjcbbg0nzcYEdZsNe3SMfDLpLWiAlQeNohr5IbKZsqcEQGyn8QsYMT4MRnII2QHm/TBCaLQZkCim4FlAsyDRK4Ak9tBiuiTz6aw8H8NJZKdKXpGwKr/Vgs+2rG53MKjHAwNN0JNkFDywWuKB1Yt5YLWoOK0DA0JuWq+gQrJKnNdVDBP/1Z6mHSioI7rD6SS1Dh1B6VBTSjKrog/Yge+G5DqAczoUVZ1PosE2E2Nqjp2E7I0fut9T27xRa9I9X+tG2IsTugc16L73sIKei7s9xw7D+9lmMpz8eyPXzH7SeZ6teY7j1HWa47SGOM4QOI4HJg25L66QPSTckSF9SFYEpLEzT/OdhOwykFBIRyNbvi56uBzJvc3LDQY9S9drsjRZ8HJW0dJkcCE3NxpPFeDJt1r0/OoExqM5HY0IEV6ZqZ0TKghWcJ7tbUOCfeMr1Zl+EVMzwftGCtv170HhuxejVQvo9oLaSDhN6J8uWizs0OmvZzDCPrU6PaCMNY3JlUuv/vjan0zaw/7T6Nt9+3bUexr3Bk+90WR8237s94i013/4s/jY1ZqtWiE42ZpyI9GJWSUX/71if06JJ7nTaog7FT0fVqlqw9ypHePOgR9AkTxTPr1SGxSpU9HN5qjzKI6uPbVSxBiuRHONplay9KZKIi8fwtA5UDyEmqymXqfgjzqA+aMLFg8tIKRP7108lOUSZH7S3FWxQN7Jlij/UrlrufKVYspyZdS89vFeVktajzwKJ9c7XqYNTsvN07lVlc5l1WyGz1VNz0FNFzGUranA58XAQCgcq6Yw0KUjfe3jnC40Bbctik5mf0ozaNOtPNo0rWGQqGUknaVsEc/YSDy5jGnkyHLCO5gsSQ/Wjbw3uv7cTjRGVSsQSLNxpayVnH1rHT8kbd/Z1bikJIIzf+4TJX42VgeWEFKVJNxyoyXpz+oxeTDA6X/vqYPBQL2kXn4C0BSn81CZW78hDFGV0zXhCwKFV2jqd9elCis9rVqGqbnTD5doih/BkCf+n81hqHKeLStXBy53hlWkz1+tptIq6j/j/renQXt0+99d/yOVUDUVnNygbYmnkZOPCh69pupNQUslujyoOMM4HZ9cqnpTfmJUc3575olRKT+cZKXD5zlVMs2sbtXA93fHpnntgDWV04clzQL26mO3M2KwQ98mbA9Taz0wPeZA3+m41BDO5DS+q2+N3ExxIMO6VORWDs+S0O3TwrPapzNvhefRAKxaQad+fAof/iliub8yPoXvAmQZ1IRP0tx95Z913/0nhdL/CQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/PdfClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T03:01:09.507Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"AlpUxfGhymLj2cdcUIBm\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"-vGS-9sDKqUiw6snmUmn\" name\u003d\"Page-1\"\u003e7VZdb5swFP01SO1DJz6StH0MJM0mpVPVTN32eAsGrBobGadJ+ut3DcZASdb0ZU+LUGSfe2xfX86xcYKo2K8klPm9SAhzfDfZO8HC8f1r9xb/NXBogMmt1wCZpEkD9YANfSMGdA26pQmpBkQlBFO0HIKx4JzEaoCBlGI3pKWCDVctISMjYBMDG6M/aaLyBr2Zuh3+ldAsb1f2XBMpoCUboMohEbseFCydIJJCqKZV7CPCdO3aujTj7k5EbWKScHXOALFaC3e1Srfy4be6T0MFL7+uzCyvwLZmww9JavJVh7YI1Y4WDDj2wlRwtTERD/vAaMaxHWMWRCLwSqSiWL+5CShRIhrnlCVrOIitzrVSEL+0vTAXkr7htMDMnBiWykghmAwYGz0SYRdRSSrkPLQF8N5B97AfENdQKQPEgjEoK/pst1GAzCgPhVKiMKSUMhYJJmRdg8B7Bo/4dXZSvJBexHVny/mdqU0PT+tfW7NmO76e2dQcC0X2J1+mZyWC1iKiIEoekNIOuDaqam1lurtOo0Frobynz+DWgGB8kdmp7WqP6CPgGdbm5HKz8XLTI6v5s+FiwFAjHBQJxZYnVV+u2Ojts4NqEX9C0P5I0BwKbM0R/K5bOiddmiBMqMSdCr2cji5st6NU9VvT0fr99cYSSBjlJrhoex2BVksey0OpSNJwnvHUIsB7FAVZZSYnCnGmzfADMmxmqpaJpY4cicpRx7Wof2P1Wi22fmUkVSfdWpUQU56ta85i0iGP5t1qSODYlNUnWk6ThHDtNKFAQWMrnUUpKFf1y5+G+KBEIvfL1JliShH2va6Pj6ZLNBDHXQGtfUDQszuifds3kXdzrolOn3ljZxlp44FzlpO8yey0kwaq/qyEJyMJO36or0KitIIvLo+q2XKsjlviMWFbti5pS3yn8W5GI2874VjulvvtY903XFptcAN421wIlROpr52aj43Lj0Y+oYoTPfQk86rm3VFGbDoX7w+CyIl8Z+6ecSL8JaH/vvxHvvRuzrzi7KfjJ4yJ3e5DrLmKuq/ZYPkH\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/RenameCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T10:01:03.946Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"bn04ga2-jxvHDMO2QLGQ\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7Vxdd6I4GP41nrN70TkQPoRLPzvd0852a6fbXs2JkgpTBA5irfPrN4GAEKJSBER3elMISSDv+7zfiR1psPi49qFn3rkGsjtAMD460rADgAgUAf8jLZuoRRHEqGHuWwbttG2YWL8QbaTj5ivLQMtMx8B17cDyso0z13HQLMi0Qd9319lur66dfasH5yjXMJlBO9/6r2UEJm0VVX374Cuy5iZ9tQbU6MEUzt7mvrty6Ps6QHoN/6LHCxjPRRe6NKHhrlNN0qgjDXzXDaKrxccA2YS2MdmiceMdT5Pv9pETFBkweJ9c/fSu9emT/dcTvO6tPGBedeli3qG9QvE6wq8NNjGFkIEJRm9dPzDduetAe7Rt7YdUQOQ9Ir7b9rl1XY82/kRBsKHch6vAxU1msLDp02Xgu29o4NquH75TEsI//CS/SrrwpbvyZ2jP0hSNogn6cxTs6ah2o45knalXUCpeI3eBAn+DO/jIhoH1ngUOpPibJ/22PMAXlA2fYEn83XtZYttYPhBDRBN65PkSrziYBDAgz18t207RVRV6utjlU1wd9cZkhOsEqXaK6T2ceEd+gD72Ui5+KlFZoLoCq4/ofr2VvLiLmZK5uK1yWmtCy+GPPqzgmfYi1y/4Wvii0LshoWvcbbiJbxxMmuf0TWoUud0OC+/iceVFDWvLvKw9j82rt6uv6+vJ/SN4u3ucWdOvV7EyrE7W6NB718JfnSBNERikgW52imhNdFRaazITaYq0f6JoybmJQjgm6ymP0K7UdoQmaNsC7CWDr6rRFuvrg4pdA82ADehZsElywxjpng1GmtJIhTGSqK66QSJpBzRSzSBRC4DEN93FdIW/p782rQBNPBgSeY09/yyrGa9C1weD8bgaHyEJKGI6Cd2cjyBzfAS5Lh+hK+cJp/SRjd0vZZgjIV5lkKWVj5bWLzgNOxBQe4TD4UcqfTKD1CeitIykigyAtjV38LWNXslUhHQWjld6tDkg4thfYt5YzvwxlM0ruSLax2vdMLw4QHtQm392ueFJbJwOWzGlagV1HEtAjiUPeGIL4RcD4d54DUPjJSY3EFyHzIZp/5FXNRmefE7djMdDXVUrgrzIqBs9D3kRNKlvEouUovCj6bvrDlDhglDGmS7Jv4G7WEDHGH3MkBdYhNaqTRTG1MdXc3L1x91oMuldj37cfHvq3d4Mf9wPxz+GN5P7297LaIhbh6PnP/PDWsssmbWhHNsAdLFBZmlFgvUzVVBKQQUVE7x2N7ub5b7csAcVEyTF64GPSJoFCA5aJ9pvbWEsAmFmQmceqkEHLlBrZYpVgJKin1gB6m03+nFSZpuIeelsUzT8pEx5OYzF67AcnsxR4KZ69Gq5KJTj4nGhJ0PKkgzkKFIuxeRa1KbCBFRJaqwhtann1WZeGbYg8JRY86JKOUXYaOCpcyL2Cw08JT0beMpCMdrXFniKAqcyoPTTZj6y6oK1JHyIriG5JgXI+Cl+uZD3rzF68TJgaqCTGg8dNzAR6TK27PANJIoyLB/NAhcv7dJ4L4ti1gGR5RzvgdpkVUgUW18WKmnVypSTGvBcxMbKQkwBUmUxVLQspGgHJqrZqIoix6r+T4yDcnLjAPL64dgMzfD7/e3NoPc4ojmah9Hg8e+Hl3PKzqhxHSqJJNW8Io/7ZDyo7vGMGj6vkTkPBkMDOs7TbDO5nvxzFVuWE8cg5TWoCDiFdX5PufI61pEyUiCKb4PbL2tZ1CpK3v1o1O0XASdyVvrUGXSnP8kuOMJni/x7hZa98i9P6SuSyLBFybFFbFbrS6DtXmGJvFTz2zd46ZAdBK88ocV35uTYUMXOHIuhol6hLLNeodysVyhxdgtdqFcoC4xXqBfT2/XpB/n3NpydIlwgBGyZ/yLx0paRL+7Frniq8E3Nc6byTUx0eBcmjKKx+GO81nvyEhMm83yihovicsXlhBYVWhPXvYCTr7VLSGSek88IyXfPiGqk0PNsbByiQFhYRCdJzkgqZDkbKajSqSulCR4OKKmVTyhOsxEPaLnCPc6J8mou23Zyyisc5Ct9y8H3FlH5dNeTsPTQzHq1MBEvzQEDTFqOtxmn2QhNL5DuaUPKga008rZc1JVy4ObJ8q7OsenMh9G33l2Uyxz3bm6/P4zOKpOpHfZ/muVQ60OL8zinxEun7pOIujMPXcalkIGUnaLsMaXcRDsyDz3fh5tUN2pvdn6wqjKSQXeM7/quA/3xRfQFZdMgXOZ96gBlfGoSOcaOM5NIwWZM4MG/Dyj86zwzKbKbXhs8NMmvqnC3Rlxkkklh9iY0mWTibhHj5vdoKCVA20fQIJ8fbS5J71aBhtFOHzTHDA7LdodkErNviLNnCwhNMkjknBY6xlKfxbbH3bsZC+x6FAU+i480rTpgoKEVs4gljNC+5de1RaBhd/ooKVVZ50TRv3CqedyDGxVsDeCyp7lNqUeRTmf9Jz2/p6KuQIRLt0sMRMopvX1xw0Glp9Si8zSNETRJy05RNJwQxa7OGFbQqPZs+7Gq4+LdbKk9sdf1H0VIEsanAmhXycCqKwrlAKpLzESswqso3tXZzDNN1VUVv+7xiNpvnESB+ZUVrCU4hr1R+xQHx781R7XefFHDVpM3LwpsSTo+JfBp0yYwv9aiqGqjpg1UjNCjI8STYUosCipQF6gYKIBuEpg0BAbeNv52qvp8zerkqv63k1iPWApFdX09TmIOayoQWbEsr+0FrWkRb/vOpeZrd9XEMuDEONXZn30rG8yIgszaodpOk/Hta8U/MnjUOZlKdBgPG7trhUdA4ygLxjlHdh7Wv8YfZcO3299EjgC+/eFpafQf\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1
    }
  },
  {
    "path": "docs/diagrams/SDforDeletePdf.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-14T11:50:19.750Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"5UkWd7-6YCL1StrQRInH\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"x3UeM3e1weJIgPIHaxEc\" name\u003d\"Page-1\"\u003e5Vvfb6M4EP5rIu09NMIYQ/KYJu3uSj2puuq0u/dyIsFJUEmcBadJ7q+/AWzAhgSSQtLb60OLBzOY+ebH54H28Hi1/xy6m+XvzKNBzzS8fQ9PeqbpGEP4HQsOqYBYRipYhL6XilAuePH/oUIop219j0bKRM5YwP2NKpyx9ZrOuCJzw5Dt1GlzFqh33bgLWhK8zNygLP3me3yZSgfEyOVfqL9YyjsjQ5xZuXKyEERL12O7ggg/9PA4ZIynR6v9mAax7aRd0usej5zNFhbSNW9ywfe/nr953tT++cUkf3/9/LqdLMI7oeXNDbbigcVi+UFagG154K/pODOw0cP3nhstqScGbzTkPpjsyZ3S4JlFPvfZGs5NGedsVZgwCvxFfIKzDUhdMZrBA9AQBEu+CmCM4BCMtYnvv9ovYrfqu7sI97dRMm3uB8GYBSxM1ocn5gRPMMhhpueDLnluzdag4l48ISyB7o+aDmWAgCNTtqI8PMAUcQEWVhE+jCT6u9wjbDsVLQvOMBAyV/jgIlOcwwQHAqkzULPqUaNrbxS7f26HDDKkmjq9lHqlONCsA4HnhgvK67ypbMWCmaTlimaSspAGLvff1GVU2U7c4Zn5sMAMJNtQQCJyLDVEbBvOqLioGCen9ZgDTU9qhZKeBMjsoS/HlpyF7Sxwo8ifqYgCbuHhexycfYs4UvAjEaCBJQWTvYjfdHQojp5p6MOTxPGWCFt0EuemTkIUcLFxoZMgS1c0vKqXOBVeYgc8zo4sWWfuLvbPLZMn7qKkwI5gAoC3z0/C0SL5i0d/fpWqYGWpNnFO90OZpLer4Mmf07hKwLRNwXUCIS640/1u6XP6snFn8aU7yO6q80Ih5y5cEmbjIHA3kT9N7hr7Ykhn2zACH/iDpo+TSCvLlFYqDGPgGrE84iF7pcoZ4iRn4gcuyOfJTztVBBGkZhbpQwXXz+hD0fdLXtpaIRnWJ5sCNJvYm5MlkPsemWhYs5Av2YKt3aCI9pUROCfjCC1aJJMqUMqYAJodYTIoYQKUGqwJMlRCB2zBNeakGFbU/iIKQlRiXzpJW/meF9+mMmBDtl17GQFsITgGR6puTVkwu4oMiXkXGfaJLaBk/6pJ1oUATwK2FOIOBPh43G2SLTnS7ZMsarDJajfLdg3BiYhpmmadcnxXpVnkdIaKWY/KOUTbygQp0TYtfAnRPr9e9hpT85Tc1rPK+n3eEaivw+H1CHe0bXZjDq/v9HRFHXN4hEseSPeQdjn9lJeNYu2Xst8+KA3Qcgr47shoiR6Y0lj6xq2YPyp5Wmf5w+6OIIgu6i9KENDURdSszmn2w+ixW4JgGWoh+ggEoWo33ylB6BqCExHTlCAMmxEE3BUouAFrK/CDacBmr3qXFc4/+vFtRb2X7zeQqUabZusRpM3HxzJq3sAwHFyF2ogYhpXcY+9z2fmzxTjlIw52xDinI/HgUBhc0PU7C+kilnY7ZADZQzWc9YTflA3c2c5pRV2zgfK+v7V68sJZGL/n+lUrSoPA6LCiEPzxtpxXb+x1DcGJmGlaUape21WVlM62nOYVUDli4/PR6gwVokYLatgJsDor9LWdvllmnjy3ShOW0u2L+xZv1ziDX2D1xkk3rrIvYphj+5BLi8lU7toCOo+VRZB1/fXiKRlNzJRr6MxE3atlrQu1bdEqGTlCH2rbCzJO3utpd0YfIaS+dEHt0A5Cqp24hnUAJu6hME2EeOPbiIx2tKNhGO+b7yifkMBBumDtarl6Np9HtBMyZFbF5KXNOa0x55Cavtz5zdSMdauMm5wk3Mfi7EjUNOAj12m/YUt1GowHjXy/pMgiNYo6ZtxmeYeXdtuevfmnzX+kyaa5zfs+c9KRRRVE9qpNNrOqyXZmHnj3u5HMxMV2v5pTCHJqksq7vqq5Wahj3Ne+cxk6lwU7cazTiroO9nKPLQKmBqF+z9jr/zLcLe39B3ZuHu5VPZDb9twadEoLPTeMFAZgGZ303OpzQlvdtVKJti8Mf4yRnkl0VR0nAPkN7wfyrQal6EN5A9YaXdaAXOYNpuFoiqw+ua43lN+93tobWnzVf53O+9BWQCSoBOKFn1yDppacAYb5P1ik0/P/UsEP/wI\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/StorageComponentClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-13T10:07:03.214Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"68oqvBDO_jyCMXdbGzIn\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"lqJgwdgU07QzmivSlqgu\" name\u003d\"Page-1\"\u003e7Vtdc5s4FP01fowHEAh4dOy47c50Ntt0t83TjmJkmylGXowbp79+JSMBEsKAgz+SXTLjmCsQ0r1HR0dXeADGq92HBK2Xn0mAo4FlBLsBmAwsywM2/WSGl8wAgZMZFkkYZCazMDyEvzA3Gty6DQO8kS5MCYnScC0bZySO8SyVbChJyLN82ZxE8lPXaIErhocZiqrWb2GQLnm3HKOwf8ThYimebBq8ZIXExdywWaKAPJdM4G4AxgkhafZttRvjiPlO+CW7b1pTmjcswXHa5oZJujUe0Xr6Lf3rZfn37xMLfF/c8Fp+omjLO8wbm74IDyRkGweYVWIOwO3zMkzxwxrNWOkzDTm1LdNVxIvnYRSNSUSS/b1g7s3wbEbtmzQhP3Cp5MlzbOpEcFvthmgTTlK8K5l4tz5gssJp8kIvEaUcUhxiLj99LuLlOty2LMXKtrkRcYws8poLN9Iv3JMdvGppvAqjlPmH0F6W3Qv/2RJRcLPZw39ELzDhelcU7vEtXFcYQeAZhgvKJrhg/x9SkjBcM0Rkz31KRNk4QpsNLZmEaJGglbiA9jNrW3ZVBQU0FKkcajmkMYmxEn9uQlG4iOnpjAYYU/stC2xIR9iIF6zCIGCP0WKrQJ/BvVQCkUGP6bQfENn2UIaRX4WRKVipDCMxvntHkftqFFGX7KroELVs1ih+VS1oxSIUVc9CFuk5i6Mwy7dIzaC+yVoit66fPha4rwX6QfPrfJSPw4M9LbexlnuNFtwrD475/qhyMicNDSePHMOw++JkVx1PXnU82b5mPMFTjSfvROOJR/kziuln0pZQ33BofV8JranhSts+Z2xN2CxkcByMmCJkcxGbBMOZ7OQAbZa5zlE87vsA7GcavAvT7yxo1AXZ2SMPIfs+2ZVPXsRJTLv4nVe8P3ksamCnxW37M3GfEl3zCZnY0kXXMODd6OA8uCHbZIabB0eKkgVODzkaZBfiQNLNVbCUoOBokCBsCY5QGv6U1bYOHvwJ9yTcj1Uxa5v+0ITF4doSMOkyYgjKhys/IHMLr7OsnTWPUSAPFfGYea5S1R7NuVteAXDQDPA0CVG8qJVS9TJ9InijjmcSktIoEabWbnzjOAh2kGKGp3pbLCNLqBIOkCT9yfjFPxO/qAsoh/3pHJ7hnYmpBAUhlmp72v8dCsYVDV8l0sqwOn6EeicboD8/eZ+/ffni44+j2Xb3R/z4dG9rV9KSutCu4PgIe6MavaquW69vPV1774P5LSE/qrJZJ81bSPseJZdh+L49qQ7Q6RTC24NDrT3vQZE74ggGwKiwnnkqWaUFtd2J9YIQrUgcfF2G8V7LBNOQPY4rG5Hcs+wGR/M1fa6ajKHvebJy8n3YoJ0KnWa1F2r1srleaKMkFf0naxwLm9R12rB7nIQ0JiwBMjmow8tK7RDRNCo1rzvTm7AfWrcUINtqjqQtqwPYUNGJSb0xBfM/qZdJ3dG1988NTu4TPN/8V2ndMoAiTS5P7LpcyAWI3cqXwI+D0vK4kdPdS3P68fTtvgH6tq2hY/m2abrQdg3Hgyp6hxYoLlDqb8vtDU+xHHtYKvTAWYnf0imfSzP/bxsS52xa5cvu2eZ3wq/w6ujV6paO5DtlUoKgdqet7D3mbcG+mv0xAHxfptyOGciccct0m2c+9YR7PDVaTpUbD47OK8li5FuAHH/OsXLXchW5655X7ooAnCTJKIG2Icl48hSj6akpRmBr9ns1bw2AHjhjZI4+haPHHRkv79D8w0tk3Ey0Lw30RxnU91aWYLxaylBGc2/y6gDUL8YYdEnAdc1eSSlQhFRglbSPfxybmBB2qbY/btHC+5T7F12opd3+RYVJNGisz+NBSyUXz7wsuVyrnOUZ37cuZn1/PO4JO2rqzD6jltVCp4Um6EPKFlmBI+ebDhvyx803hwZWeb6pp79LTTfAUwSquk/aepcNKOj0TyZQtV7ULauOobFjN6hk4ito7AHTqSsKf6GnCB/kpvKNtdz3XrjMtuRZ8PJcpsvn13MZz/21o68jZO+xElsiVzkbewFmgxdlNoWQ8umz806TSpHOeZmt8eXEEzMbY7FRgNYpDigvvV9OyoF3NZzU7c2iTpx01fwCW/KLd0l+sfyGjFzr1J7jDWG+mUHX4o5a79DK0wG2aZ2VfMy+Xl7qgX2+osX7ZR/32gSRANrbYJ/z5RYPzdGNjGVe9p1KYA/90uEpROMPPYN+QrqWcyAAyr5qa73EfgRQv3vLHuOegM/oafGLyezy4men4O5f\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/diagrams/UIComponentClassDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-13T09:04:54.883Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\" etag\u003d\"T9pUt_rKze5qRKzLsl3h\" version\u003d\"10.6.1\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"lqJgwdgU07QzmivSlqgu\" name\u003d\"Page-1\"\u003e7V1bc6M2FP41flxGQhfgcWNvup12p5mm293tS0cxxKbF4GLSOP31FQZhJAQGGwObSTKza4QQ4pzzfeci4czQfLP/IWbb9afI9YKZCdz9DC1mpmlTh/+bNrxkDRSRrGEV+27WBI8N9/5/Xt4I8tYn3/V2UsckioLE38qNyygMvWUitbE4jp7lbo9RIN91y1ZepeF+yYJq6xffTdb5YxFwbP/o+au1uDME+ZkNE53zht2audFzqQl9mKF5HEVJ9mmzn3tBKjshl+y625qzxcRiL0zaXLBInsA3tr39kvz+sv7zl4WJvq7e5aP8y4Kn/IHzySYvQgJx9BS6XjoInKGb57WfePdbtkzPPnOV87Z1sgny049+EMyjIIoP1yKXeLaLefsuiaO/vdIZAOZzLip0U30MMScvTrx9qSl/rB+8aOMl8QvvIs7mJpWbmJUfPpf0hXIlrEu6IjTvyHIbWRUjH8XIP+SS7CBVUyNVGiSpfCL+lGXx0n+eInHi3e5g/u95B0i3++NJ/mmV/v/Z55/YJpV5+LDbZmcO4z7Eos88YLsdH2Hhs1XMNqIDf47s3lmvipa5qBNZlbLKwij0FP3mTSzwVyE/XHIFerz9JlWczxH0Pj+x8V03vY3Wdo7WBXIpSEbiOHjRj5FgbMhm4lTNBEKNmQj89m4l1sVWwkWisRIxym7LwotGySwtqB75qaYfUz2KZvkSaRpcNtlM5Nn184xHu6819Mbmy2ZxwGPT8OXp1dIqaEGrMi4eDz9VugXAZgdS1dAtsXqjW0uFkl2FEnY0UKLXgpJ9JSh99j+xkLv4uC2NfsdadRxFq1DDkBgPqVZIT4cnXui+T+O81AOlrs9fykJ22W5dRC+KxB0HoVs+wRtv7ydfU6VxEWRH33IVpp8X+/LBizgI+SN+zQc+HHw7jpAeHi87HInretTuLnqKl95pXCQsXnlJk6BR1tFzpWi4aiwlUyC6kCpvi72AJf6/cgytM4/8DneRf4Cp8NXQMSA9/lhYMkyeHBio/GPJN8jEko9Zjog1t1FMXg0JM8lVhjpYcyGWCwwcnTbwJPZZuKoNoOqD78Ky6ngmjhKupSiN0d45VycYDGxV2ghXCEYIoGxV+Gr84gzEL4pmHkn6qxN4Zu9pCBUz1/ek0R4Ov03KmBB8FU0rsDofofawADXx5RaSGkVe2DA1cKw6obILKhyS3gl1dyaF2wIGwGXP9Y43QPuE8zoc3XmxzwWbJnuLYfyTSSZl4FANgCk508BFcilKFyrV1Zg3tzf2Uuq2TTvs6ies3MbM5XkESzZgv9AhFej8HK04OPrOjWQIMA6ALIpuhl3hBStQsay0ONWP07NkM7FBxeFhwY19R9TLL39t9p/uPv+9/viH7/z409Ka/66p9+UV26vqBD4w6JmX6AQA+uH9bTGvigI0aqoPRASHN2nFvFKeo9XK5fVCNX0Fy0J2x0Yh30qa+4n54Rc/TMvTA+S5RVWv4rykkvBFOkZEpWgEqlqGurLw1bTcItZvE0roJKnPX2HPoYPWB/fm+OuRMZab548tmRAGimm09fJU8b+ItHPzZ7hirRRPVppbskWLdQuiK6PNo82Ghe5NtH89/CJbBtSQy6COvVsm6/psE4Xub2s/PAT17q0fCGnyI+Gi8axhRags0ToN7LhhJ1VGOzRLtyxykqJ69q18ri4bOadsx+nrPhdKFCfraBWFLPhwbD2T5pqA1wPNQdoPp5m2TEVEpaLWqTk+MdCVOU0gbjRS+9XbPQXJwt9tgzQXex28BqkcG49PbLDFFoU3Zhuc2YRdTInaKDAsii1AbJs7aNOR+cnkZ9NWDGHaSxm+Le0RyzLM6jACLhYwYGkGeFhKPJlHXpkSb9L9Vl58x8JjSeF7Z0TTlu1oAozYLZF8Y8SBGNGcHCPyGE2iIyVpcYiOyjont1BLrOImGBt0PEbULd8MyYh37uPP/i55VYyIxbaM6TBidanhjREnwIh4eoxIHAMUVMVZSTZlYuE+gkRsowZKJCYeM0jU7akakhLvE5Y87W5YfBtFyTA764ZgRYLR1Fhx7LLvRy/Yvq5lJaquCIyvZN3W1zfXN7rro5NzfRQ5RsknAWVrAu2nPGJrcwpxEzhmecQcu2I8s27YA8cSWyYza1Hdc/HZv+Pw6PBqw3fGnkgpLhNhHqOxpyDLMfPDOYvdq2i4gbVrdNz8+tVlSaMDlQ0ZWBTWStq3nKryUQPTXab8626+Lsm0zZanx8DffqzTXLElrbJluw/VAKqohuCqaqBGNUJg/aum27bb/E3EiyKWc7bQnPsKyDTXoNHJUOSaW2qJspxsn7kubQJlINRuXbrrllpH8WUYNE5LLZop/S/egqtXqS4DnCCMTsLhXKD1CKP2C57j4giYBiytgiKlVmuDPmr+2CRGKYyHChZo40362tMOlQXeSSKwW3r+hsAmBJrfBQIJpQ0pMHdHfQDQomYDANM8+/oARLgRUBMBYLeNkf0C0HxtCGy9oDMuAqFl0JIPlN8eJqQXBDpQjjOtK8WZGKu52QRRhnSltTc3dxbIhOgmDjLq2AYtRZqK1Zm9gIxSxzDr3RwYws0RpHjwSQKw2y7ZNwA2ebnWazfjApAqfs0C0k6rM99IJthuiiwBHAByVK3hTBJyPbzPdz7qYAlzwLCavyWgbpkVDOjVWmIq27QwFqaKIE59abRzfqa8ZmO2fDumK1Is5Q1zhPt9s19v+T18KcbABXownjdpnTOZY1o+UQyWwjMtnyoQIuribV95kSXvtyJgCMvvttH0Lcw6yfTTD7MsYhy3i9qmEnRBbbTUuZ7ugKZ6uuMYxSk+EzqIK5lm0NWtnt6767Hag1D6YrA+I6lR/QRV1mmLrzbonGcQZW+YuuB75d1geLySlRy7twzdRyxIobZEPaZhWkrOiNR6bOvQXbFws6Vhdg5gmvmz0t82uyXFan8hkKvyM+5Wh+qbn88BllimmUZS3PBVaqNtKXAUQzr3KyOUzICKCL7vdclGuz/VXSRCdd0hbOzfFVb88PgnILLux7+jgT78Dw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1
    }
  },
  {
    "path": "docs/images/FindCommandActivityDiagram.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003cmxfile modified\u003d\"2019-04-15T13:35:17.865Z\" host\u003d\"www.draw.io\" agent\u003d\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36\" etag\u003d\"PCGMCLlXIDJ1cu3B4LDn\" version\u003d\"10.6.2\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e1VjJcuMgEP0aH5NCyJKtYywvU7NUZeKqzMyRWG0JBwkVQl7m6wcktHlLJolTiQ42PBpoXvdTY/dsP97OBEmjHzwA1sMo2PbscQ9jzxqqTw3sSsBx7RIIBQ1KyGqAOf0LBkQGzWkAWcdQcs4kTbvggicJLGQHI0LwTddsyVl315SEcADMF4Qdor9oICODWq7XDHwBGkZm6yF2y4EHsngMBc8Ts18P28viKYdjUq1lDppFJOCbFmRPerYvOJdlK976wDS1FW3lvOmJ0dpvAYl8zgR/Pb9apTPv4Z59vSezmzzF0ZUzKJdZE5ZDdY7CW7mrGFLLqGCozkgdIdUgJMFcEqmhJWXM54yLwtZ2EfGsgTaVgj9CawSPBy5CegZPZAs3nNmjw/OYI65BSNi2IHO+GfAYpNgpk22Ve4Zrk4vYMqfZNJG1jUnUimmFEZNLYb1yw6dqGEr/g16MnsNvoBLSdLmQEQ95QtikQUdFloHeyFK9xuY756kBVyDlzqiL5JIrKJIxM6MH0UDFo0YU2WL3W4F154/uXDtVd7xtD453pncyWhnPxQLOpZx5YUgiQjBz3b4LyweE8M9fI7L6RkJnFV2ZBTU9Z4MvgBFJ1109HwulmXrLqfK5Tpo6+lXS4EF3idJRM2svIWo3Xp4jFR/Pk2A7qEaNmXJQntCjeo8NvRMZ4E5uppfVY//DydH54HJ8uaysqu62dXXcsj98a2W9Kiq1552ouEydYZSqRqgbU6rqrCrvgsfa8y3NJE1C1WSqpb64KrvoNlhmRWXOQBvzRNMRgWZUQEAXWiJmYeVpvfZBCnQDvImohHlKCvo36hLUDeae4qbTsee6b6Mf7OwJCB0KyDqmIOdSCrKcY7H6SAp6/4JW6+lJ5VW3rUuXNHvgXTudzLEG+F2LWs3JOU3fgcyF1qjP45gkwR1kubL4TArtoy7P9YWvrVB8RKH9N1Do0VvT6+SIXibHi4ru3OXw6WJXFZf3L3bn/D4nC19AUajQbVO0ujUtz0DojZI0/1xy8fbVcrl6prrNb+vytdb8f2FP/gE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1
    }
  },
  {
    "path": "docs/team/jetkan-yk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ":imagesdir: ../images"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ":numbered:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ":chapter-label:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d Projects Portfolio"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Kan Yip Keng"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "ifdef::backend-pdf[:notitle:]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "ifdef::backend-pdf[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d Kan Yip Keng\u0027s Projects Portfolio"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Hi, I\u0027m Yip Keng, a Year 2 Computer Science Undergraduate and a part-time tutor at the National University of Singapore."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "I am passionate about building useful applications which benefits millions of people around the world."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "One of my favourite projects is the PDF++, an ambitious file management system aims to replace the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "current file management system found in most operating systems. This document provides you with a detailed description of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "the project and my contributions to its creation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d Project: PDF++"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "PDF++ is a desktop application that is meant for anyone who wants or needs a convenient tool that helps them manage all the documents in their computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The application has a Graphical User Interface (GUI), built upon the JavaFX framework, that is supplemented with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "to accept more specific requests by the User."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The PDF++ offers a wide range of features with potentials for future improvement including:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "- *File Manipulation* : Adding, Moving, Merging and Deleting Documents."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "- *File Organization* : Labelling tags and Assigning deadlines to Documents."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "- *File Extraction* : Finding Documents based on tags and in-text content."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "- *File Encryption* : Securing Documents with password encryption."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d  Implementation of `deadline` function"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** *What*: This function allows the user to assign a deadline to a document."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** *Justification*: This is an integration of task reminder into our computer files."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Users can set a deadline reminder to the documents which have tasks to be met before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "a specific date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "** *Highlights*: The application labels the deadlines based on the number of days to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "the document\u0027s due date. Upon launching the application, a list of deadline reminders"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "will be shown in chronological order. This can improve the user\u0027s productivity by keeping"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "track of their upcoming tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d User Guide Contributions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Excerpt from UserGuide: Setting a deadline for a file: `deadline`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Set or remove a deadline for the file, specified by the index of the file that is next to the name of the file in the Files Section. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "A file\u0027s deadline is located under its name and has 4 colours to indicate the amount of time you have before it is due. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Green, indicates that there are more than `7` days till the deadline is due, as shown below. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Colour Green"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::UGDeadlineFar.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Orange, indicates that you have `7` or fewer days till it is due. As shown below. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Colour Orange"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::UGDeadlineNear.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Red, indicates that you have reached or failed to complete the task by the due date, as shown below +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Colour Red"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::UGDeadlineDue.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The colour Blue indicates that you have completed the set task. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Colour Blue"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::UGDeadlineDone.png[width\u003d\u0027300\u0027]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "All deadlines are also displayed in the Deadlines section of the application. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[.big]#Format: `deadline INDEX date/DATE` [To Set a Deadline]# +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[.big]#Format: `deadline INDEX done` [To Complete a Deadline]# +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[.big]#Format: `deadline INDEX remove` [To remove a Deadline]# +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `INDEX` refers to the index of the file that you wish to edit."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `DATE` to the deadline you wish to assign the file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `done` is the prefix that tells the application that you have completed the deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `remove` is the prefix that tells the application that you wish to remove the deadline."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `deadline 1 date/20-02-2019` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `deadline 1 done` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* `deadline 1 remove` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The date must be in the format of dd-mm-yyyy."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Developer Guide Contributions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Excerpt From Developer Guide: Deadline feature"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The `deadline` feature is facilitated by both *Deadline*, *DeadlineCommand* and *DeadlineCommandParser*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This feature allows you to set or remove deadlines of the file specified by you from PDF++."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The deadlines will be recorded and displayed both in the list of files as well as in the information panel"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "for each individual file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The implementation of the *Deadline* model can be represented in the following class diagram:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Class Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "A *Deadline* model has a https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html[_Java.time.LocalDate_]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "`date` attribute and a `boolean isDone`. The `date` is the date for the deadline assigned to the file, the `isDone` attribute"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "evaluates to `true` if the deadline is set to be done, `false` if it is not done."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "The implementation of the *DeadlineCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Deadline Command Activity Diagram"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The provided index is checked to be valid i.e. referring to a specific Pdf in the PdfBook."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The required Pdf is retrieved from the PdfBook based on the index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". A duplicate Pdf of the required Pdf is created."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". For cases of assigning a new deadline,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. The duplicate Pdf is assigned with new deadline attributes."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". For cases of setting an existing deadline as done or removed,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".. The existing deadline from the retrieved Pdf is tested to be a valid deadline."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "... If the existing deadline is a valid deadline, the duplicate Pdf is assigned with new deadline attributes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "... If the existing deadline is not a valid deadline, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". The duplicate Pdf with new deadline attributes is recorded in the Model and the changes are committed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ". *CommandResult* is returned upon successful execution."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "This sequence diagram demonstrates the interactions involved from start of *DeadlineCommandParser* to end of *DeadlineCommand* execution:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ".Interactions Inside the Logic Component for the `deadline 1 done` Command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "image::DeadlineCommandSequenceDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "After a deadline has been added to the PDF file specified, the date will be color-coded according to days"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "remaining from the current day until the deadline date."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "There are some discrepancy for the representation of a file without a deadline in the Jackson adapted storage and the Pdf book model."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In the Pdf book model, files without a deadline will be assigned with the default deadline whereas the date is set to"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html[_LocalDate.MIN_]."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In the Jackson adapted storage, we simply set the deadline attribute of a file without a deadline as empty."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In our previous implementation, we used to assign the default date LocalDate.MIN to the deadline attribute in the Jackson adapted Storage"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "as well, however this might confuse the users if they read the _pdfplusplus.json_ and find out the non-existence deadline."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Besides, this implementation also makes the displaying process of deadlines through the UI tedious."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "In order to comply with the two distinct representation of deadline model, we implemented a default deadline `toString` method that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "prints the Pdf book model version, and a modified `toJsonString` that prints the Jackson adapted storage version of deadline."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "Our current color-coded deadlines are predefined based on the due date from the current date. Suggested improvement for this area"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "would be providing user-defined color-codes for enhanced user experience."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003d\u003d\u003d Summary of Minor Contributions"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Refactored project from an existing project https://github.com/nus-cs2103-AY1819S2/addressbook-level4/[AddressBook Level-4] to our current application"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/307[#307]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Implemented the `sort` Command for both *name* and *deadline* mode. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/166[#166]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Implemented the `tag` Command. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/175[#175]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Reported bugs and fixes to the relevant issues link:https://github.com/CS2103-AY1819S2-T12-4/main/issues/287[#287]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Updated UI user feedback message for better user experience link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/296[#296]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "* Other minor contributions to autotests and the source code"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 172
    }
  },
  {
    "path": "docs/team/lormee94.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lormee94"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":plus: \u0026#43;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-4/main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d Jeremy Low - Portfolio for *_PDF++_*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Jeremy Low"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "ifdef::backend-pdf[:notitle:]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "ifdef::backend-pdf[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d Jeremy Low - Portfolio for *_PDF++_*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d The Project"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Our team was tasked with enhancing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://github.com/se-edu/addressbook-level4[this addressbook]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "for our Software Engineering Project. We made the decision to morph it into a personalized file manager,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*_PDF{plus}{plus}_*. Inspired by applications that bring an upgrade to the atypical solution like"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*_Notepad{plus}{plus}_*, we wanting to make an application relevant for students."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This application allows you to set datelines and tags for files, with managing PDFs as"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "its main specialty. It is mainly a CLI (Command Line Interface) application i.e. commands are executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "through typing the desired command in the input line provided. However, several commands also allow for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "input through a GUI (Graphical User Interface), where the user is able to click on the desired input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::Ui.png[width\u003d\"600\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#`Grey highlights`# (called mark-ups) indicate that this is a command that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "can be executed by the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The following section details a summarised overview of my contributions to the team"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "project in the areas of coding, documentation and design."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Enhancements added:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`merge`# command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description: I added the ability to append two of more PDF files within the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "application to so that a new file is created with the merged content."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification: Merging PDF files is highly utilised, especially by students or"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "users handling numerous documentations. However, merging of PDF files is usually a"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "service provided by paid versions of PDF managers or other external online services."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight: Merging can be done quickly through the application, without the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "inconvenience of relying on other software and online services to do it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Credits: https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "( https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_] )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* [.big]#`find`# command optimisation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Description: Based on the originial ability of"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/se-edu/addressbook-level4[addressbook] to find files based on name fully matching search keyword,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "I added the ability to find files based on partial matching of file name, as well as matching of any text content within the file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Justification: *_PDF{plus}{plus}_* is intended to be complete replacement for managing files. For finding a file on most other"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "filesystems, the full name of the file is not required, hence it should also be made the same for the application. Additionally, users"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "should be able to find for files based on the content, which can be helpful in refine the scope of the search and make it more accurate."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Highlight: Similar to a Google search engine, finding of files becomes faster!"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Credits: https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "( https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.7/javadocs/org/apache/pdfbox/text/PDFTextStripper.html[_PDFTextStripper_] )"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* [.big]#`move`# command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Description: I added the ability to move files within the application to any permissible directory"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "within the user\u0027s local device."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Justification: *_PDF{plus}{plus}_* is intended to be complete replacement for managing files. The user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "should be able to perform all the desired actions regarding file management through the application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Highlight: When moving a file to a deeply nested directory, it is much more convenient as compared to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "manually navigating to the directory to move the file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* [.big]#`filter`# command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Description: I added the ability to filter files within the application based on the file tag(s) specified."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Justification: For files that are tagged, it is necessary to have a means to use the tags as identification - if not"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "then tags would be purely aesthetic!"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Highlight: Filtering files by tag allows you to group files strategically within the application, which would make file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "management much more convenient."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* [.big]#`delete`# command optimisation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Description: Based on the original ability of"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/se-edu/addressbook-level4[addressbook] to delete files recorded within the application (but not actually deleting"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "he file from the local filesystem), I upgraded it so that there is an option for the user to delete the file both from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the application as well as from the local filesystem."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Justification: *_PDF{plus}{plus}_* is intended to be complete replacement for managing files. From a user perspective,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the intention behind deleting a file might be to remove the file completely. Otherwise, the user might encounter additional"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lormee94"
        },
        "content": "inconvenience e.g. deleting a file to create a new file of the same name, only to be unable to because the old file is still"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lormee94"
        },
        "content": "physically present."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Highlight: There is flexibility in how you want to delete a file from the application, as well as the convenience of using CLI which"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "has the potential to be faster than clicking on the file directly."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* [.big]#`sort`# command optimisation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Description: Based on the original ability of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/se-edu/addressbook-level4[addressbook] to sort the files based on ascending order of name, I upgraded"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "it so that the user can specify if the sort should be done in ascending or descending order."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Justification: It is an implicit requirement that sorting features should have the flexibility for sorting to be done in either"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "ascending or descending order."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Highlight: Sorting ability becomes more robust and gives the user the flexbility to sort as desired."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Code contributions:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Please click on any of these links to see samples of my code: +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/pull/191[(v1.4) Merge command] +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/pull/161[(v1.3) Upgrade find command] +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/pull/168[(v1.3) Filter command]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Documentation / Design contributions:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Developer Guide"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Added detailed documentation for the following sections under *Implementation* to give a comprehensive view"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lormee94"
        },
        "content": "of the feature design, execution process, as well as any additional design considerations:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Merge Feature_"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Move Feature_"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Open Feature_"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Delete Feature_"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Created UML Activity Diagrams for the following sections under *Implementation*:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Merge Feature_"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Add Feature_"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Rename Feature_"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Encrypt Feature_"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Decrypt Feature_"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lormee94"
        },
        "content": "*** _Clear Feature_"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Created UML Sequence Diagram for the _Merge Feature_ section under *Implementation*."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* User Guide"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lormee94"
        },
        "content": "** Added a step by step walkthrough to guide the user through merging of files. The walkthrough"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lormee94"
        },
        "content": "includes detailed instructions as well as visual aids of the application interface."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d Minor contributions:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Set up https://github.com/reposense/RepoSense[RepoSense] configuration for the team on our GitHub repository."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lormee94"
        },
        "content": "* Integrated a third-party library"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox®_] to the project which allowed for additional features to be performed on PDF files"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lormee94"
        },
        "content": "(e.g. reading of content, merging multiple files)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d Contributions to Developer Guide"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The following sections are excerpts from my additions to the *_PDF{plus}{plus}_ Developer Guide* (continued next page):"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Merge Feature"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#*Current Implementation*#"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The `merge` feature is facilitated by both *MergeCommand* and *MergeCommandParser*."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This feature utilises the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "API to append two or more PDFs and create a new file with the merged content. As there will be one"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lormee94"
        },
        "content": "additional file added to the application, this feature also implicitly performs the [.big]#`add`# feature to add the new"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF to the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The implementation of the *MergeCommand* execution can be summarised in the following activity diagram:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".Merge Command Activity Diagram"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeCommandActivityDiagram.png[width\u003d\"530\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The provided indices are checked to be valid i.e. referring to a specific Pdf in the PdfBook."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. If there is at least one invalid index, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The required Pdfs are retrieved from the PdfBook based on indices."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". A File object is created for each Pdf which allows file operations to be performed on the Pdf."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_] is created. The directory must be set for the merged file prior to merging,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lormee94"
        },
        "content": "which also includes the name of the file. By default, the directory of the Pdf based on first index  is used."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". A unique name is created for the merged file and combined with the aforementioned directory to create the full directory for the merged file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. To avoid issues with duplicate name at the directory, the name is created based on hash code. The created name will also be verified unique at the directory - and changed if necessary."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Files will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lormee94"
        },
        "content": "which is an indicator if the application can perform other operations on the Pdf that need it to be handled as a `.pdf` file."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Errors in accessing Pdf would throw *IOException*. Errors would most likely be due to:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File not found at location"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... Lack of user permissions to open file"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File has encryption"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lormee94"
        },
        "content": "... File corruption"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Thrown *IOException* is intercepted, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Files are added to the PDFMergerUtility."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Errors in adding to PDFMergerUtility would throw *IOException*. The cause for error would be similar to above."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".. Thrown *IOException* is intercepted, a *CommandException* will be thrown and the execution will be ended."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". All loaded *PDDocument* are closed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". A new Pdf is created to represented the merged file created."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". The Pdf is recorded in the Model and the changes are committed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lormee94"
        },
        "content": ". *CommandResult* is returned upon successful execution."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lormee94"
        },
        "content": "This sequence diagram demonstrates the interactions involved from start of *MergeCommandParser* to end of *MergeCommand* execution:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".Merge Command Sequence Diagram"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeCommandSequenceDiagram.png[width\u003d\"650\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#*Considerations*#"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The default directory of the merged file is currently set to the directory of the first index of the files to be merged. There were considerations to make flexibility in the merge command input"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to allow for the user to specify the desired directory of the merged file. As the current version of *_PDF++_* is focused on a working product, it was decided to simplify the command to focus on"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the merge operation. Users can also make use of [.big]#`move`# feature to move the file; such implementation is more intuitive if the user is going to be using the application for everyday needs."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lormee94"
        },
        "content": "For the merging of files, the current implementation involves adding all files to a single https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to merge together. One alternative to merging multiple files would be to create a separate *PDFMergerUtility* for every pair of files and merge the content recursively into a final merged file. The"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lormee94"
        },
        "content": "advantage of this would be better stability in performance when merging multiple large files as there will be lesser workload on each *PDFMergerUtility*. However, this would undoubtedly cause the performance"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lormee94"
        },
        "content": "to be slower as more merge operations are done overall. As the case of instability occurs only in very large files, it was decided to go with focus on performance."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#*Future Implementation*#"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lormee94"
        },
        "content": "There are performance issues encountered when performing the merge operations with many files of large size. In future versions, the merge operation has to not only ensure"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lormee94"
        },
        "content": "performance but stability as well. By v2.0, the merging will be able to support larger files without any concern for the application to freeze or crash while merging."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Currently, there are no means to make the merging operation perform faster due to the merging operation being performed through the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lormee94"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/multipdf/PDFMergerUtility.html[_PDFMergerUtility_] API."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d UML Diagrams"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Add Command Activity Diagram"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::AddCommandActivityDiagram.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Rename Command Activity Diagram"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::RenameCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypt Command Activity Diagram"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::EncryptCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Open Command Activity Diagram"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::OpenCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d\u003d\u003d Merge Command Activity \u0026 Sequence Diagrams"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The aforementioned diagrams have been included in \u003c\u003cDocumentation\u003e\u003e above respectively under *Merge Feature*."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lormee94"
        },
        "content": "\u003d\u003d Contributions to User Guide"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lormee94"
        },
        "content": "The following is an excerpt from my additions to the *_PDF{plus}{plus}_ User Guide* (continued next page):"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".Merging Files: `merge`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lormee94"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[.big]#*Step-By-Step Guide*#"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view to the inner"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lormee94"
        },
        "content": "workings of the `merge` feature."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 1: Launch the application by double clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lormee94"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Files you observe may be different and depends on the actions you have previously carried out on our application"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 2: From the main interface of the application, the user chooses the file(s) that"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lormee94"
        },
        "content": "they wish to merge, and enters the `merge` command into the *TI*, following"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lormee94"
        },
        "content": "the outlined syntax as illustrated below."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lormee94"
        },
        "content": ".Merge Command Step 2"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lormee94"
        },
        "content": "image::MergeFeatureStep1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 3: After executing the command, the above two files will be merged, with the _\"CS2103T_PDF++_UG_Intro.pdf\"_"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lormee94"
        },
        "content": "file attached behind your other selected file."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lormee94"
        },
        "content": "Step 4: The *MergeCommand* is then executed. The new name of the merged file follows the format: \"merged[hashcode].pdf\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lormee94"
        },
        "content": "where hashcode is a random string of letters and numbers. This prevents any naming conflicts between files."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "lormee94": 166,
      "ptvrajsk": 4,
      "WeiTangLau": 86
    }
  },
  {
    "path": "docs/team/ptvrajsk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":imagesdir: ../images"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":numbered:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ":chapter-label:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d Projects Portfolio"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Prithivi Raj"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "ifdef::backend-pdf[:notitle:]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "ifdef::backend-pdf[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d Prithivi Raj\u0027s Projects Portfolio"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This document provides a detailed description of my contributions to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "the several projects that I have been a part of over the years. +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "My contributions will be substantiated with relevant technical application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "and sources, if possible. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d Project: PDF++"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ is an application built on Java that acts as a document management system"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "that provides some advanced features that improve the quality of life of its"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "users. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The application has a working Graphical User Interface (GUI), built upon the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "JavaFX framework, that is supplemented with a Command Line Interface (CLI)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to accept more specific requests by the User. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Although not built to its final form, it boasts a large feature set such as:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Adding, Moving and Deleting Documents."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Assigning Custom Tags to Documents."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Filtering Documents by Custom Tags."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Assigning Deadlines to Documents that provide a Visual Response to the User."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Permanent Encryption and Decryption of Documents such that they require"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "set passwords to open even if accessed outside the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "- Merging multiple documents into a single document."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Summary of Major Contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "My Enhancements to the Project Consists of: +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *User Interface (UI) Transformations*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *What*: The UI is the main layer of PDF++ that interacts with the End-User"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "of our platform."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Justification*: The initial UI was insufficient in realising my vision"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "for our application. Hence through the use of the `FXML` Scripting Language and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`JavaFX` Library, I had reinvented the UI such that it would more accurately"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "support the application and all the additional features we had planned to add"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Highlights*: The UI is fully compatible with the additional features of"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "PDF++ and would require minimal to no overhauls should any new aspects of the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "application require upgrading."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* *Formulation and Introduction of Find Feature*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *What*: The Enhanced Find feature is one of the core features that we had"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "planned to introduce in our application. It is a means for the target audience"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to search for documents not just by their file name but also by the content"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "within them."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Justification*: Although the application was working well as a Document"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Management System, analysis of the needs and wants of our target audience"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "was necessary. Following several informal discussions, a key feature that many"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "felt was lacking was the ability to easily find files that many, more powerful,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "file managers were lacking."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "** *Highlights* The find feature required drastic changes to the existing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`model` components as a menial version of it was already partially implemented."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As such there was key attention paid to the enhancement of the feature so as to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "ensure that no other features would break because of it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d User Guide Contributions"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d User Interface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The UI had to include labels that displayed the Deadlines keyed in by the User"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "which had to reflect the duration to the due date by changing colours. The UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "also needed to have a default _Welcome Screen_ that served as a central"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "dashboard to the User. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Furthermore, the dashboard had to be replaced with a details screen when the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "User interacted with one of the Files in our application. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "These requirements meant that the UI had to heavily communicate with the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`logic` and `model` systems in the backend to produce the required behaviours. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The relevant pull requests pertaining to this feature can be"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "referenced in the following _Github_ issue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/issues/152[#152]. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The scripted UI is attached below:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".User Interface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::Ui.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "To illustrate to a new User, the UI also had to be broken down into digestible"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "chunks that could be easily comprehended by the user. As such the following"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "diagrams were also added to the Introductory paragraphs of the User Guide."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".User Interface Breakdown"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGAppOverview.png[width\u003d\"550\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Individual File Breakdown"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGPdfCard.png[width\u003d\"350\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The information was further colour coded to ensure the simplicity of the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "diagrammatical explanations."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Find Feature"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As for the Find Feature, the main challenge was to simplify the actions carried"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "out internally by feature. As well as explaining the enhancements done to the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "original find feature and what the current feature is capable of doing. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The final input to the user-guide contains detailed images that allow the user"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "easily follow through the usage of the feature as well as understanding its capabilities."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Listed below is a summarised excerpt from the User Guide. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The one of the relevant pull requests pertaining to this feature is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "referenced in the following _Github_ issue"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-4/main/issues/161[#161]. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#find-feature]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Excerpt from UserGuide: Finding Content: `find`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The find command allows you to `find` for files that contain a keyword or phrase"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "OR `find` files which contain the entered keyword or phrase inside it."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#find-format]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.big]#Format: `find KEYWORD`#"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `KEYWORD` refers to the word that you wish to search for within the files of the application."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Introduction` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Author: George RR Martin`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[#steps-find]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Step-By-Step Guide"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "If, for example, you wish to locate the files that contain the word `Introduction`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in its name or files that contain the word `Introduction` in its internal content."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "You may carry out the following steps in-order to get your desired list of files. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 1: Launch the application by double clicking the `pdfplusplus.jar`. To view the following screen."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Files you observe may be different and depends on the actions you have previously carried out on our application"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Step 1 \u0026 Step 2"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGFindFeatureImage1.png[width\u003d\"500\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* As shown by the image, your application should contain an existing list of files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* You are to key in the `find` command followed by the keyword as illustrated by the command"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c\u003ccommand-find, format\u003e\u003e."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Finally, press `Enter` on the keyboard and give the application a short time to sieve through all the files"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "it manages and locate the relevant ones for you."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Once the application is done with the task, the following screen should be visible to you."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Step 3"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::UGFindFeatureImage2.png[width\u003d\"500\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As seen in the image, the files that are relevant to your search will be displayed on the top"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "left. These files are those that contain the keyword `Introduction` in its name, and files which"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "contain the keyword within its content. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The application also shows you other useful information such as, the number of files that"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "match the criteria you entered into the application as shown in the image above. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "And with that, you have successfully utilized the `find` feature. +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "When there are many files tracked by the application or if the files tracked by the application"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "contain many pages, the `find` command might take a little longer to operate. Hence if your"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "operating system warns you that the application is not responding, please give the application some time"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "to finish its operation."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "As part of a security measure, all files that are encrypted will not be subject to the `find` command."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This will prevent any information about your secure files from being leaked to malicious users."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d Developer Guide Contributions"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "In the developer guide, I had tried to make the explanations of the internal workings of the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "feature as detailed as possible with references to the connections to the various components"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "of the application. These connections were illustrated, with attention to detail, through the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "use of a sequence and activity diagram. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Attached below is an excerpt containing the summarised entry of the find feature in the Developer"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Guide. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Excerpt From Developer Guide: Find feature"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `find` feature is facilitated by *FindCommand* and *FindCommandParser*."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This feature lists a subset of all the files in the application based on the keyword(s)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "provided. Using the keyword(s), the application will check the names of all files, as"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "well as the content of the text within the files prior to revealing the results."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The `find` feature has the following syntax:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Format: [.big]#`find \u003cKEYWORD\u003e ...`#"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `\u003cKEYWORD\u003e` refers to the word that the application will use as a reference to find"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "files. There must be at least one provided."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Resume`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* `find Introduction`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Feature Breakdown"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".Find Command Activity Diagram"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::FindCommandActivityDiagram.png[width\u003d\"500\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "The following image briefly summarises the interactions of the `find` command with"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "some of its immediate components."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".General Internal Illustration of Find Command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "image::FindCommandSequenceDiagram.png[width\u003d\"600\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "When the user enters the CLI Input for the find command, the command is first passed"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "from the `LogicManager` to the `PdfBookParser` will carry out the following steps."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "1. The user inputs a request to `find` a keyword within the files of the application."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "e.g. `find keyword`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2. The `PdfBookParser` creates a new `FindCommandParser` upon recognising that the user"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "wishes to use the `find` feature."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "3. Parse method within the `FindCommandParser` would create a `NameContainsKeywordPredicate` which will allow"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  the `Model` to filter its list of files to show the user the requested files."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4. Finally, the `FindCommand` object is returned to the `LogicManager`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Upon receiving the `FindCommand` from the `PdfBookParser` the following steps are carried out."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "1. The `execute` method is invoked from the `LogicManager` with the parameters of `model` and `history`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "2. The `model` then uses the `NameContainsKeywordPredicate` and runs the `test` method to check each file and"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "verify that it fulfils the predicate. This is so that the `model` can update itself to present the list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "files that the user wishes to view."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "3. The `test` method invokes classes from the external link:https://pdfbox.apache.org/index.html[Apache PDFBox] library, namely `PDDocument` and"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`PDFTextStripper` to extract the contents of the existing files."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "4. The extracted content is then checked to verify if it contains the `keyword` input by the user."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "5. Further checks are also done to confirm if each file\u0027s name contains the `keyword` as well."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "6. The `model` then updates itself and stores the current action in the `history` object."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "7. Finally, the `FindCommand` returns a `CommandResult` back to the `LogicManager` for follow up"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "action."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "This is a brief explanation of the inner workings of the `FindCommmand` and its execution method."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Our application also implements several security features such as the ability of users to `Encrypt` and"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "`Decrypt` their files. Hence, a major security concern was to prevent the `FindCommand` from searching"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "through the contents of files that are previously encrypted. This is crucial to prevent the leakage of data"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "as malicious users might simply utilize the `FindCommand` to extract information from the tracked files."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". The main issue with the current implementation of the `FindCommand` is its slow speeds with respect to"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "large files or files that contain a large string of text files. Hence, a possible consideration you might"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "wish to improve upon is to \"upgrade\" this feature by improving its speed of this feature."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ". Yet another enhancement to this feature you might wish to implement is the use of Optical Image Recognition,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "otherwise known as OCR. This will allow the application to translate images within the file to words which would further"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "improve the ability of the application to look through content even if they are images."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003d\u003d\u003d Summary of Minor Contributions"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "Apart from the main contributions to the project, there were several smaller contributions that were critical"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "in ensuring that the product works as advertised. Some of which are listed below."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Setup `JSON` file storage format for the revamped project."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Implemented the `Add` Command for both *GUI* and *CLI* mode. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/141[#141]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Implemented the *GUI* Mode for the Move Command. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/144[#144]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Implementation of a majority of the TestCases as well as"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "revamping old TestCases from the previous project to suite new project direction. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/281[#218]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Proof-Reading and Enhancement of the Entire User-Guide Document. link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/313[#313]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "* Several Developer Guide Entries link:https://github.com/CS2103-AY1819S2-T12-4/main/pull/316[#316]"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 282
    }
  },
  {
    "path": "docs/team/weitanglau.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d Project Portfolio"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Lau Wei Tang"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::backend-pdf[:notitle:]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ifdef::backend-pdf[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d Project Portfolio"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Lau Wei Tang image:{imagesDir}/github-icon.png[width\u003d30, link\u003dhttps://github.com/WeiTangLau, top\u003d\"70%\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":numbered:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":chapter-label:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// URIs:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-pdfplusplus: http://github.com/CS2103-AY1819S2-T12-4/main"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-addressbook: https://github.com/nus-cs2103-AY1819S2/addressbook-level4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-aboutus: https://cs2103-ay1819s2-t12-4.github.io/main/AboutUs.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-fileprotection: https://cs2103-ay1819s2-t12-4.github.io/main/UserGuide.html#command-encdec"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-add: https://cs2103-ay1819s2-t12-4.github.io/main/UserGuide.html#command-add"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-open: https://cs2103-ay1819s2-t12-4.github.io/main/UserGuide.html#command-open"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-youtube: https://www.youtube.com/watch?v\u003dG0-u8qGX8yI\u0026t\u003d400s"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-addcommand: https://github.com/CS2103-AY1819S2-T12-4/main/pull/96"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-refactorpdf: https://github.com/CS2103-AY1819S2-T12-4/main/pull/89/files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-remainingautotests: https://github.com/CS2103-AY1819S2-T12-4/main/issues/217"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-historycommand: https://cs2103-ay1819s2-t12-4.github.io/main/DeveloperGuide.html#history-feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-undoredocommand: https://cs2103-ay1819s2-t12-4.github.io/main/DeveloperGuide.html#undo-redo-feature-coming-in-v2-0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ":uri-model : https://cs2103-ay1819s2-t12-4.github.io/main/DeveloperGuide.html#Design-Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#Introduction#"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Welcome to my Project Portfolio. This document provides you with an"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "overview of my contributions to the project I have worked on, {uri-pdfplusplus}[((PDF++))]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#About PDF++#"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// Background info"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Most university students have one thing in common, messy desktop."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "As a student, I have to manage multiple new documents weekly."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Furthermore, each file is categorised differently or has a different unique purpose."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "For instance, I would look for files from my programming modules on certain algorithm"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "concepts or look from my language module for files with writing tips. However, the current"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "File Management System (FMS), such as File Explorer in Windows, has its limitations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "in the categorisation of files. Even for organised users, it is ineffective to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "make a constant effort maintaining the documents in an orderly manner, and inefficient"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "switching between folders to look for the files of their interest. My team and I"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "recognised this limitation and decided to work on building an elaborated FMS, PDF++."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Project Scope"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//Project scope"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "For the team project, we were provided with an existing {uri-addressbook}[AddressBook]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "application. We decided to morph the application into PDF++, a sophisticated FMS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "targeting students who prefer working with Command Line Interface (CLI). However,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "given the limitation of the project, our application currently supports PDF"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "files only, and thus the name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Main role and contributions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// main role and contributions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "I am one of the {uri-aboutus}[developers] for PDF++ that in charge of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "implementing {uri-fileprotection}[*File Protection*] feature and most of the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "test cases for the Logic component."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Legend"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please refer to the table below for the icons and formatting used in this document:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "| icon | description"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "a| image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "| Tip"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "a| image:{imagesDir}/warning-icon.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "| Warning"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//a |NOTE: {sp}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "// | important notes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#Summary of contributions#"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This section highlights my key contributions to the documentation, coding and"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "technical aspects for the PDF++ project."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Robust File Protection System"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ not only supports several essential features, such as {uri-add}[add] and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "{uri-open}[open] features, it also has a built-in sophisticated"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "{uri-fileprotection}[File Protection System] (FPS)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "For FPS, I have incorporated both `encrypt` and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`decrypt` features and other improvements that enforce the security of the application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This allows the users to protect sensitive data such that only authorised personnel to have access to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Similarly, users can remove the security of the document with the password that was previously set."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "During this process of file protection, we have disabled some features, such as `history` and pressing up"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "on the command box that will potentially reveal the password of the documents."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Though this system, users can safely rely on PDF++ for the protection of their files, without the fear of"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "exposing their passwords which compromise their privacy."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Credit to {uri-youtube}[Java Mitra] for the tutorial guide in implementing the encrypt feature"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Test Cases for Logic Component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ offers many advanced features that have a complex implementation. Due to the complexity of the code,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "it is ideally that we have the comprehensive {uri-remainingautotests}[test cases] for each command before the actual implementation of the features."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This requires an in-depth knowledge of our code base and discussion with my team on how the feature should be implemented."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dweitanglau[Project Code Dashboard]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Technical Leadership"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//Show examples of code for team to reuse"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "For this project, we decided to make a complete overhaul from the existing code that works with imaginary data"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to support actual file manipulation. This would require many initial adjustments in enabling our application to accept"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF documents. I have made significant contributions to the {uri-refactorpdf}[refactoring] of *Person* class to *Pdf* class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Furthermore, for future expansion of features, I have implemented the {uri-addcommand}[add command]. These initial ground work"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "allows my team to test their code using the GUI with the pdf files they have added."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#Contributions to the User Guide#"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "//Insert description as well as abstract from the User Guide"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This section includes my contributions to the documentation of the User Guide."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d File Protection: `encrypt` \u0026 `decrypt`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ offers native support for file protection."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The command `encrypt` allows you to protect your files with a password such that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "they cannot be accessed without the password."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Similarly, the command `decrypt` allows you to remove the password that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "you had set for the file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The terms \"protect\" and \"encrypt\" will be used interchangeably."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The *Encrypt* and *Decrypt* feature has the following syntax:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#Format: `encrypt INDEX password/PASSWORD` [For Encryption]# +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[.big]#Format: `decrypt INDEX password/PASSWORD` [For Decryption]#"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `INDEX` refers to the index of the file on the list that you wish to encrypt/decrypt."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `PASSWORD` refers to the password which you wish to assign to the particular file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `encrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `decrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please refer to \u003c\u003csteps-encrypt, Encryption Guide\u003e\u003e or \u003c\u003csteps-decrypt, Decryption Guide\u003e\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "for help in using these features."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[#steps-encrypt]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Encryption Guide"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/warning-icon.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\"encrypt\" feature will not work on files that are already encrypted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrated below is a sample usage scenario that provides a clear view of the inner workings"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the Encrypt feature."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: Launch the application by double clicking the `pdfplusplus.jar`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: Select the file that you wish to encrypt via the `INDEX` on the list."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `encrypt` command into the text box, following the syntax as"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `encrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 4: Upon hitting enter to execute the command, your inputs are verified and if successful,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "your selected file is encrypted with the given password."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Upon successful encryption, there will be a lock icon at the bottom right of the card"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "to indicate that the file is an encrypted file."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Lock icon on Encrypted Files"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptFeatureStep5Success.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 5: If the command passes the validity check, the file you have selected is encrypted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can open your file to see the result. Please refer to"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "{uri-open}[open guide] for the `open` feature."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".File has been encrypted"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::{imagesDir}/EncryptFeatureStep6Open.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "[#steps-decrypt]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Decryption Guide"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Illustrate below is a sample usage scenario that provides a clear view of the inner workings"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "of the Decrypt feature."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\"decrypt\" feature is very similar to \"encrypt\" feature."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/warning-icon.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\"decrypt\" feature will not work on files that are not encrypted."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 1: Launch the application, similar to the \u003c\u003csteps-encrypt, Step-By-Step\u003e\u003e Encrypt guide."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 2: You select the file that you wish to decrypt via the INDEX on the list."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 3: Enter the `decrypt` command into the text box, following the syntax as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "illustrated below."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* `decrypt 2 password/ThisIsNotASecurePassword`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Please enter the password of the encrypted file. You will not be able to decrypt the file without the password."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Step 4: Upon hitting enter, the application verifies that you have entered the correct password and"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "decrypts your file as shown below."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".Decrypt Command Step 4"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptFeatureStep5Success.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d Proposed feature in v2.0"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Login Page: +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "We plan to include a Login Page to help authenticate you to the application so that you can access the app more securely."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Furthermore, together with the connection to external servers feature, this feature will allow you to access your documents"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "anywhere you are."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d [underline]#Contributions to the Developer Guide#"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This section includes my contributions to the documentation of the Developer Guide."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d File Protection System"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF++ has a robust in-built file protection system which allows you to encrypt or decrypt any"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "PDF files you want. These features utilises the"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/download.cgi#20x[_Apache PDFBox® library_], specifically the"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/AccessPermission.html[_AccessPermission_], and"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.html[_StandardProtectionPolicy_]."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "An encrypted file is a file that is protected with a password. The terms \"protect\" and \"encrypt\" will be used interchangeably."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You can visit \u003c\u003cEncryption feature\u003e\u003e and \u003c\u003cDecryption feature\u003e\u003e to understand more about the respective feature."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Encryption feature"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `encrypt` feature is facilitated by both *EncryptCommand* and *EncryptCommandParser*."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The implementation of the *EncryptCommand* is summarised in the following activity diagram:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptCommandActivityDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The provided index is checked for validity i.e. referring to a specific Pdf in PdfBook."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf specified via the index is retrieved from the PdfBook."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A `File` object is created for the Pdf."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The `File` will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_],"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "which is an indicator that the `File` is a *PDF* document that is uncorrupted and"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "not protected with a password."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Error in loading Pdf as *PDDocument* would throw an *IOException*. Common reasons of error are:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... File not found in the location"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Lack of user permissions to open File"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Protected, corrupted File"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/AccessPermission.html[_AccessPermission_] and"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/encryption/StandardProtectionPolicy.html[_StandardProtectionPolicy_]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "are created. The password specified will be passed to `StandardProtectionPolicy` for the purpose of setting security settings for the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "`PDDocument`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A protected Pdf will be saved and closed."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Error in encrypting the file will throw an *IOException*. Common reasons of error are:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Excessive long password"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Empty password"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf is recorded in the {uri-model}[Model component] and the changes are saved."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A *CommandResult* is returned upon successful exception of *EncryptCommand*."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This sequence diagram demonstrates the Main Success Scenario from the"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*LogicManager* to the end of *EncryptCommand* execution:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::EncryptCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Edit password of an encrypted file"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Alternative 1 (current choice): Execute *DecryptCommand* then *EncryptCommand*"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** Due to security reasons, it was decided to focus on encrypting an unprotected Pdf."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "You will need to use \u003c\u003cDecryption feature, Decryption\u003e\u003e feature"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "before encrypting it with a new password. This is to ensure your intent in changing the password,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "as the current version *PDF++* does not support `Forget Password` feature."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** However, this process is inefficient as you will need to enter 2 commands instead of 1."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Alternative 2: Change the password of an encrypted file"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "** This minimised the number of commands to be executed, but there are several security concerns as mentioned above."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d A sophisticated protection system"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Multiple adjustments to protect your interest"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". {uri-historycommand}[History] feature will not show the executed `EncryptCommand` which includes the password of the file."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The {uri-undoredocommand}[Undo/Redo] feature is temporarily disabled until a solution that"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "will not comprise your privacy has been found."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Pressing up in the command box will not show the `EncryptCommand` that was previously executed."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "There are concerns of accidental encryption of a file with a wrong password. In *PDF++* v2.0,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "the *EncryptCommand* will prompt you to re-enter the password as a form of confirmation message."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If there is a mismatch of the two passwords entered, the command will not be executed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d Decryption feature"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image:{imagesDir}/lightbulb.png[width\u003d\"30\"]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The current Implementation of *DecryptCommand* is very similar to Encryption feature."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The part where it is implemented differently will be specifically marked with a `*` for your convenience."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "----"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The `decrypt` feature is facilitated by both *DecryptCommand* and *DecryptCommandParser*."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "The implementation of the `DecryptCommand` execution is summarised in the following activity diagram."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptCommandActivityDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The provided index is checked for validity i.e. referring to a specific Pdf in PdfBook."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. If the index is invalid, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf specified via the index is retrieved from the PdfBook."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A `File` object is created for the Pdf."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The `File` will be loaded as https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/PDDocument.html[_PDDocument_]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "with the specified password, which is an indicator that the `File` is a *PDF* document that is uncorrupted, protected and the password"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "provided is valid *."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Error in loading Pdf as *PDDocument* would throw an *IOException* and invalid password would throw a *CommandException*."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "Common reasons of error are:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... File not found in location"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Lack of user permissions to open File"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Unprotected File *"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Corrupted File"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "... Wrong password *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ".. Thrown IOException is intercepted, a *CommandException* will be thrown and the execution ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Upon success loading of the PDDocument, the security will be removed. *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". An unprotected * Pdf will be saved and closed."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The Pdf is recorded in the {uri-model}[Model component] and the changes are saved."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". A *CommandResult* is returned upon successful exception of *DecryptCommand*."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "This sequence diagram demonstrates the Main Success Scenario from the"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "*LogicManager* to the end of *DecryptCommand* execution:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "image::DecryptCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d A sophisticated protection system"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "* Multiple adjustments to protect your interest"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". {uri-historycommand}[History] will not show the executed `EncryptCommand` which includes the password of the file."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". The {uri-undoredocommand}[Undo/Redo] feature is temporarily disabled until a solution that"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "will not comprise your privacy has been found."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ". Pressing up in the command box will not show the `EncryptCommand` that was previously executed."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Future Implementation"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If an unauthorised personnel obtained the password of your files through illegal means,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "they can potentially set the file with a new password. This will hinder your access to"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "your files."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "However, With 2-Factor Authentication, there is an additional layer of protection"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "that prevents these personnel from changing the passwords of your files. This"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "ensures that only you/any authorised personnel can decrypt your files."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "In *PDF++* v2.0, the *DecryptCommand* will support for the 2FA feature as mentioned above."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "If this feature is highly demanded, this feature will be implemented to *EncryptCommand* too."
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 396
    }
  },
  {
    "path": "src/main/java/seedu/pdf/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            logger.warning(\"Invalid config value \" + configPathParameter + \". Using default config value.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 60,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.PdfBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PDF Book ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfBookStorage pdfBookStorage \u003d new JsonPdfBookStorage(userPrefs.getPdfBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        storage \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s pdf book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * The data from the sample pdf book will be used instead if {@code storage}\u0027s df book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * or an empty pdf book will be used instead if errors occur when reading {@code storage}\u0027s pdf book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Optional\u003cReadOnlyPdfBook\u003e pdfBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ReadOnlyPdfBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            pdfBookOptional \u003d storage.readPdfBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!pdfBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PdfBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            initialData \u003d pdfBookOptional.orElseGet(SampleDataUtil::getSamplePdfBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            initialData \u003d new PdfBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            initialData \u003d new PdfBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * The default file value {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file value,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PDF Book\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"Starting PDF Book \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PDF Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "WeiTangLau": 9,
      "-": 141,
      "jetkan-yk": 31
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sb.append(\"\\nPreference file Directory : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 61,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String LOG_FILE \u003d \"pdfplusplus.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_INVALID_PDF_DISPLAYED_INDEX \u003d \"The pdf index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_PDFS_LISTED_OVERVIEW \u003d \"%1$d pdfs listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_NO_DEADLINE_IN_PDF \u003d \"The file you selected does not have an existing deadline.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_NO_TAG_IN_PDF \u003d \"Tag does not exist!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 1,
      "-": 10,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if {@code value} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param path A string representing the file value. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 80,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.text.PDFTextStripper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Ignores case, and a partial word match is sufficient."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsPartialWordIgnoreCase(\"ABc def\", \"g\") \u003d\u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(w-\u003e w.contains(preppedWord));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Check is case-sensitive, and a full word match is necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"abc\") \u003d\u003d false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"abc def\") \u003d\u003d false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       containsFullWordSameCase(\"ABc def\", \"ABc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsFullWordSameCase(String sentence, String word) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(preppedWord::equals);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns true if the {@code pdf} contains the {@code word}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   Uses apache.pdfbox to access the contents of pdf and"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     *   extract as a String."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param pdf cannot be null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static boolean containsWordInContent(Pdf pdf, String word) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            PDDocument document \u003d PDDocument.load("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    Paths.get(pdf.getDirectory().getDirectory(), pdf.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String preppedContent \u003d new PDFTextStripper().getText(document).trim().toLowerCase();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            document.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return preppedContent.contains(preppedWord);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            // Unable to open document or other parser error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 62,
      "ptvrajsk": 2,
      "WeiTangLau": 1,
      "-": 58,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!userInput.contains(EncryptCommand.COMMAND_WORD) \u0026\u0026 !userInput.contains(DecryptCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Returns the last command entered {@code userInputHistory}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public String getLastCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return unmodifiableUserInputHistory.get(unmodifiableUserInputHistory.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 7,
      "ptvrajsk": 1,
      "-": 58,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the PdfBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see seedu.pdf.model.Model#getPdfBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    ReadOnlyPdfBook getPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of pdfs */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ObservableList\u003cPdf\u003e getFilteredPdfList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the user prefs\u0027 pdf book file value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see seedu.pdf.model.Model#selectedPdfProperty()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see seedu.pdf.model.Model#setSelectedPdf(Pdf)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setSelectedPdf(Pdf pdf);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Provides a list of Pdfs that are about to hit their deadines."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return list of pdfs that are due soon."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public List\u003cPdf\u003e getDuePdfs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 10,
      "WeiTangLau": 6,
      "-": 54,
      "jetkan-yk": 10
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.PdfBookParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBookParser pdfBookParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private boolean pdfBookModified;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookParser \u003d new PdfBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // Set pdfBookModified to true whenever the models\u0027 pdf book is modified."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.getPdfBook().addListener(observable -\u003e pdfBookModified \u003d true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookModified \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Command command \u003d pdfBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdfBookModified) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            logger.info(\"Pdf book modified, saving to file.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                storage.savePdfBook(model.getPdfBook());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getPdfBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ObservableList\u003cPdf\u003e getFilteredPdfList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getFilteredPdfList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.getPdfBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return model.selectedPdfProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setSelectedPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setSelectedPdf(pdf);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public List\u003cPdf\u003e getDuePdfs() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArrayList\u003cPdf\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PriorityQueue\u003cPdf\u003e pq \u003d new PriorityQueue\u003c\u003e(new Comparator\u003cPdf\u003e() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            public int compare(Pdf o1, Pdf o2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                return Long.compare(o1.getDeadline().getDaysToDeadline(), o2.getDeadline().getDaysToDeadline());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (Pdf pdf : this.model.getPdfBook().getPdfList()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (pdf.getDeadline().exists() \u0026\u0026 !pdf.getDeadline().isDone()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pq.add(pdf);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        while (list.size() \u003c 4 \u0026\u0026 pq.size() \u003e 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            list.add(pq.poll());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 36,
      "WeiTangLau": 9,
      "-": 76,
      "jetkan-yk": 14
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Adds a PDF to the PDF book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pdf to the PDF book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_FILE + \"FILEPATH \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_FILE + \"Desktop\\\\main\\\\target.pdf\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New PDF added:\\n%1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF \u003d \"This pdf already exists in the PDF book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_INVALID_SELECTION \u003d \"Selected file is not supported by PDF++\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_LOADABLE \u003d \"Selected file is corrupted and cannot be\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        + \" loaded into PDF++.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Pdf toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Pdf}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Pdf pdf) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d pdf;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (model.hasPdf(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PDF, new DuplicatePdfException());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        loadFile(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.addPdf(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Tries to load {@code toAdd}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void loadFile(Pdf toAdd) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(toAdd.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    toAdd.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_LOADABLE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return \"\" + toAdd.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "WeiTangLau": 32,
      "-": 39,
      "jetkan-yk": 11
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Clears the PDF book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"PDF book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdfBook(new PdfBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 16,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/DeadlineCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Edits the deadline of an existing pdf in the pdf book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Edits the deadline of the selected pdf indicated \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) ACTION\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"There are 3 types of ACTION:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"1. date/\u003cDATE\u003e\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      sets/replaces the existing deadline of the selected pdf\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DEADLINE_NEW + \"13-02-2020\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"2. done\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      marks the existing deadline of the selected pdf as DONE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DEADLINE_DONE + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"3. remove\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      removes the existing deadline of the selected pdf\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"      Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DEADLINE_REMOVE + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_EDIT_PDF_DEADLINE_SUCCESS \u003d \"Edited deadline for Pdf:\\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final DeadlineAction action;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Represents a Pdf deadline\u0027s  status in the pdf book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Guarantees: immutable;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public enum DeadlineAction {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        NEW(\"NEW\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DONE(\"DONE\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        REMOVE(\"REMOVE\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        private String status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineAction(String status) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public DeadlineCommand(Index index, Deadline deadline, DeadlineAction action) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(action);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf oPdf \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf nPdf;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Deadline oDeadline \u003d oPdf.getDeadline();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (action \u003d\u003d DeadlineAction.NEW) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d getPdfWithNewDeadline(oPdf, deadline);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (action \u003d\u003d DeadlineAction.DONE) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (oPdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                nPdf \u003d getPdfWithNewDeadline(oPdf, Deadline.setDone(oDeadline));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_DEADLINE_IN_PDF);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (oPdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                nPdf \u003d getPdfWithNewDeadline(oPdf, Deadline.setRemove(oDeadline));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_DEADLINE_IN_PDF);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.setPdf(oPdf, nPdf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PDF_DEADLINE_SUCCESS, nPdf.toString()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Pdf getPdfWithNewDeadline(Pdf old, Deadline deadline) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new Pdf(old.getName(), old.getDirectory(), old.getSize(), old.getTags(), deadline);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof DeadlineCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeadlineCommand e \u003d (DeadlineCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 deadline.equals(e.deadline)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 action.equals(e.action);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 56,
      "WeiTangLau": 19,
      "jetkan-yk": 56
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/DecryptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Encrypts the an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"decrypt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Decrypts the the pdf identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + PREFIX_PASSWORD + \"SecuredPassword\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDF_SUCCESS \u003d \"Decrypted PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDF_FAILURE \u003d \"%1$sdid not get decrypted successfully.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please check your if the file exists and the password is correct.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_DECRYPT_PDF_ALREADY_DECRYPTED_FAILURE \u003d \"%1$sis already decrypted.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to decrypt"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param password of the pdf"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DecryptCommand(Index index, String password) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToDecrypt \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf decryptedPdf \u003d decryptPdf(pdfToDecrypt);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToDecrypt, decryptedPdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        //model.commitPdfBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DECRYPT_PDF_SUCCESS, decryptedPdf.toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the decrypted {@code pdfToDecrypt}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf decryptPdf(Pdf pdfToDecrypt) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()), this.password);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (!file.isEncrypted()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_ALREADY_DECRYPTED_FAILURE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                        pdfToDecrypt.getName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return getDecryptedPdf(pdfToDecrypt);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToDecrypt.getName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Decrypts and returns the decrypted {@code pdfToDecrypt}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf getDecryptedPdf(Pdf pdfToDecrypt) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(pdfToDecrypt, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof DecryptCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand e \u003d (DecryptCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 password.equals(e.password);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 105,
      "jetkan-yk": 12
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Deletes a pdf identified using it\u0027s displayed index from the pdf book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * By default it performs a \u0027soft\u0027 delete where the file is merely deleted from PDF++"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * but not the file system. Option for \u0027hard\u0027 delete is also possible."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Enum that represents the different types of delete operation performed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Soft: File is deleted from PDF++."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Hard: File is deleted from PDF++ and from local file system."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public enum DeleteType {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Hard, Soft"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Deletes the PDF identified by the index number used in the displayed PDF list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Soft delete selected by default, hard delete can be selected by additional keyword \u0027hard\u0027.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters(Soft Delete): INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters(Hard Delete): INDEX (must be a positive integer) hard\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 OR \" + COMMAND_WORD + \" 1 hard\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_DELETE_PDF_SUCCESS \u003d \"Deleted PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_DELETE_HARD_FAIL \u003d \"PDF unable to be deleted at filesystem.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final DeleteType deleteType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.deleteType \u003d DeleteType.Soft;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public DeleteCommand(Index targetIndex, DeleteType type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.deleteType \u003d type;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf pdfToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (deleteType \u003d\u003d DeleteType.Hard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File dFile \u003d Paths.get(pdfToDelete.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    pdfToDelete.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (!dFile.delete()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new CommandException(MESSAGE_DELETE_HARD_FAIL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete.toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 deleteType.equals((((DeleteCommand) other).deleteType))); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 41,
      "ptvrajsk": 1,
      "WeiTangLau": 5,
      "-": 33,
      "jetkan-yk": 9
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/EncryptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Encrypts the an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"encrypt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Encrypts the the pdf identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please ensure that the file is not encrypted and password is not empty or excessively long.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_PASSWORD + \"NewSecuredPassword\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_ENCRYPT_PDF_SUCCESS \u003d \"Encrypted PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_ENCRYPT_PDF_FAILURE \u003d \"%1$sdid not get encrypted successfully.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Please check if the file is not already encrypted and it exists.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final int ENCRYPTION_KEY_LENGTH \u003d 128;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to encrypt"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param password of the pdf"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EncryptCommand(Index index, String password) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToEncrypt \u003d lastShownList.get(this.index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfEncrypted \u003d encryptPdf(pdfToEncrypt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToEncrypt, pdfEncrypted);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, pdfEncrypted.toString()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the encrypted {@code pdfToEncrypt}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf encryptPdf(Pdf pdfToEncrypt) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            AccessPermission ap \u003d new AccessPermission();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            StandardProtectionPolicy spp \u003d new StandardProtectionPolicy(password, password, ap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setEncryptionKeyLength(ENCRYPTION_KEY_LENGTH);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            spp.setPermissions(ap);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.protect(spp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.save(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return getEncryptedPdf(pdfToEncrypt);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ENCRYPT_PDF_FAILURE, pdfToEncrypt.getName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Encrypts and returns the encrypted {@code pdfToEncrypt}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf getEncryptedPdf(Pdf pdfToEncrypt) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(pdfToEncrypt, true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof EncryptCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand e \u003d (EncryptCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 password.equals(e.password);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 108,
      "jetkan-yk": 10
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PDF Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Filters and lists all pdfs in pdf book which has matching tag(s) specified."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Tag matching is case sensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters and displays all pdfs whose \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"tags contain any of the specified keywords (case-sensitive)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: t/TAG [t/MORE_TAGS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/2103 t/project\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public FilterCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                String.format(Messages.MESSAGE_PDFS_LISTED_OVERVIEW, model.getFilteredPdfList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 35,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Finds and lists all pdfs in pdf book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all pdfs whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" algorithm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                String.format(Messages.MESSAGE_PDFS_LISTED_OVERVIEW, model.getFilteredPdfList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 3,
      "-": 33,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Lists all PDFs in the PDF book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all PDFs.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 1,
      "-": 18,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/MergeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.multipdf.PDFMergerUtility;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Merge 2 or more pdf files identified using it\u0027s displayed index from the pdf book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * The content of the files will be directly appended to each other into a single"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * file, which will be placed in the same directory as the first file index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MergeCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"merge\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \": Merges the PDF identified by the index number used in the displayed PDF list.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"The pdfs will be merged into one file and placed into the same directory as\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"the first file specified.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: INDEX1 (must be a positive integer) INDEX2 ...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 9 7 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_SUCCESS \u003d \"Merged PDFs into new PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_ENCRYPT \u003d \"One or more of selected PDFs is encrypted.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_FAIL \u003d \"Merging of PDFs encountered an error and stopped.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final int FIRST_INDEX \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private static final String PDF_SUFFIX \u003d \".pdf\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final ArrayList\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MergeCommand(Index... args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        for (Index i : args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            targetIndexes.add(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (targetIndexes.stream().anyMatch(index -\u003e index.getZeroBased() \u003e\u003d lastShownList.size())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        ArrayList\u003cFile\u003e pdfsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        targetIndexes.forEach(index -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Pdf pdf \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            pdfsToMerge.add(Paths.get(pdf.getDirectory().getDirectory(), pdf.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        PDFMergerUtility pdfMerger \u003d new PDFMergerUtility();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String mergedPdfDirectory \u003d lastShownList.get(targetIndexes.get(FIRST_INDEX)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .getZeroBased()).getDirectory().getDirectory();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String mergedPdfName \u003d \"merged\" + hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        //Check that no duplicate file name (how on earth would it happen though)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        while (Paths.get(mergedPdfDirectory, mergedPdfName + PDF_SUFFIX).toAbsolutePath().toFile().exists()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            //Just throwing zeros at the back of the name until it is unique"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            mergedPdfName +\u003d FIRST_INDEX;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        mergedPdfName +\u003d PDF_SUFFIX;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        pdfMerger.setDestinationFileName(new File(mergedPdfDirectory, mergedPdfName).toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            ArrayList\u003cPDDocument\u003e pdfSources \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (File file : pdfsToMerge) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                pdfSources.add(PDDocument.load(file));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                pdfMerger.addSource(file);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            pdfMerger.mergeDocuments(org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (PDDocument doc : pdfSources) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                doc.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (InvalidPasswordException p) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_MERGE_PDF_ENCRYPT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_MERGE_PDF_FAIL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        //Add merged pdf to application"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assert Paths.get(mergedPdfDirectory, mergedPdfName).toAbsolutePath().toFile().exists();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        File mergedFile \u003d Paths.get(mergedPdfDirectory, mergedPdfName).toAbsolutePath().toFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf mergedPdf \u003d new Pdf("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Name(mergedFile.getName()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Directory(mergedFile.getParent()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new Size(String.valueOf(mergedFile.length())),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.addPdf(mergedPdf);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MERGE_PDF_SUCCESS, mergedPdf.toString()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof MergeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 targetIndexes.equals(((MergeCommand) other).targetIndexes));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 112,
      "ptvrajsk": 1,
      "jetkan-yk": 11
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/MoveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Moves a PDF listed in PDF++ to another specified location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MoveCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"move\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Moves one specified pdf identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            + \"[NEW_DIRECTORY]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DIRECTORY + \"C:\\\\Users\\\\[username]\\\\Desktop\\\\[target]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_MOVE_PDF_SUCCESS \u003d \"Moved PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_NOT_MOVED_SAME \u003d \"You have indicated the same directory as the file.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_NOT_MOVED_DUPLICATE \u003d \"File with same name at location.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_MOVE_PDF_FAIL \u003d \"PDF failed to be moved.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Directory movePdfDirectory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to move"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param movePdfDirectory details to move the pdf with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MoveCommand(Index index, Directory movePdfDirectory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(movePdfDirectory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.movePdfDirectory \u003d movePdfDirectory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf pdfToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (movePdfDirectory.equals(pdfToEdit.getDirectory())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_MOVED_SAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d new Pdf(pdfToEdit.getName(), movePdfDirectory, pdfToEdit.getSize(), pdfToEdit.getTags(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                pdfToEdit.getDeadline(), pdfToEdit.getIsEncrypted());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (editedPdf.isValidPdf()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_MOVED_DUPLICATE, new DuplicatePdfException());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File oFile \u003d Paths.get(pdfToEdit.getDirectory().getDirectory(), pdfToEdit.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            File nFile \u003d Paths.get(editedPdf.getDirectory().getDirectory(), editedPdf.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            boolean editSuccess \u003d oFile.renameTo(nFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (!editSuccess) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new CommandException(MESSAGE_MOVE_PDF_FAIL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MOVE_PDF_SUCCESS, editedPdf.toString()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        if (!(other instanceof MoveCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        MoveCommand e \u003d (MoveCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 movePdfDirectory.equals(e.movePdfDirectory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 90,
      "ptvrajsk": 1,
      "WeiTangLau": 4,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Opens a pdf specified by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the pdf identified \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_PDF_OPEN_SUCCESS \u003d \"Opened PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_PDF_OPEN_FAILURE \u003d \"Unable to Open PDF.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to edit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public OpenCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdfToOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Desktop.getDesktop().open(Paths.get(pdfToOpen.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    pdfToOpen.getName().getFullName()).toAbsolutePath().toFile());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_PDF_OPEN_FAILURE, e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PDF_OPEN_SUCCESS, pdfToOpen.toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 index.equals(((OpenCommand) other).index));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 4,
      "ptvrajsk": 52,
      "WeiTangLau": 9,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Reverts the {@code model}\u0027s pdf book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!model.canRedoPdfBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.redoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 22,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/RenameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Renames an existing pdf in the pdfBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class RenameCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Renames the  pdf identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed pdf list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Existing name will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + PREFIX_NAME + \"Tutorial3.pdf\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_EDIT_PDF_SUCCESS \u003d \"Renamed Pdf:\\n%1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF \u003d \"This pdf already exists in the pdf book.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PDF_DIRECTORY \u003d \"There exists another %s within %s.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_RENAME_PDF_FAILURE \u003d \"Unable to Edit PDF.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final EditPdfDescriptor editPdfDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the pdf in the filtered pdf list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param editPdfDescriptor details to edit the pdf with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public RenameCommand(Index index, EditPdfDescriptor editPdfDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(editPdfDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.editPdfDescriptor \u003d new EditPdfDescriptor(editPdfDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf pdfToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf editedPdf \u003d createEditedPdf(pdfToEdit, editPdfDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!pdfToEdit.getName().getFullName().equals(editedPdf.getName().getFullName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 Paths.get(editedPdf.getDirectory().getDirectory(), editedPdf.getName().getFullName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                  .toAbsolutePath().toFile().exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                editedPdf.getName().getFullName(), pdfToEdit.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (pdfToEdit.isSamePdf(editedPdf) || model.hasPdf(editedPdf)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File oldFile \u003d Paths.get(pdfToEdit.getDirectory().getDirectory(), pdfToEdit.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File newFile \u003d Paths.get(editedPdf.getDirectory().getDirectory(), editedPdf.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!oldFile.renameTo(newFile)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new CommandException(MESSAGE_RENAME_PDF_FAILURE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PDF_SUCCESS, editedPdf.toString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true is the file with the updated name exists in the directory, false otherwise."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static boolean isFileExists(Pdf editedPdf) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String[] files \u003d Paths.get(editedPdf.getDirectory().getDirectory()).toFile().list();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Arrays.stream(files).anyMatch(x -\u003e editedPdf.getName().getFullName().equals(x));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Pdf} with the details of {@code pdfToEdit}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * edited with {@code editPdfDescriptor}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static Pdf createEditedPdf(Pdf pdfToEdit, EditPdfDescriptor editPdfDescriptor) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assert pdfToEdit !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Name updatedName \u003d editPdfDescriptor.getName().orElse(pdfToEdit.getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Size updatedSize \u003d new Size(Long.toString(Paths.get(pdfToEdit.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                pdfToEdit.getName().getFullName()).toFile().length()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPdfDescriptor.getTags().orElse(pdfToEdit.getTags());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Deadline updatedDeadline \u003d pdfToEdit.getDeadline();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new Pdf(updatedName, pdfToEdit.getDirectory(), updatedSize,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                updatedTags, updatedDeadline, pdfToEdit.getIsEncrypted());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof RenameCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand e \u003d (RenameCommand) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 editPdfDescriptor.equals(e.editPdfDescriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the pdf with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the pdf."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static class EditPdfDescriptor {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        private Size size;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public EditPdfDescriptor() {}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public EditPdfDescriptor(EditPdfDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            setSize(toCopy.size);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setSize(Size size) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            this.size \u003d size;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (!(other instanceof EditPdfDescriptor)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            EditPdfDescriptor e \u003d (EditPdfDescriptor) other;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 8,
      "ptvrajsk": 17,
      "WeiTangLau": 52,
      "-": 129,
      "jetkan-yk": 16
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Selects a pdf identified using it\u0027s displayed index from the PDF book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the pdf identified by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_SELECT_PDF_SUCCESS \u003d \"Selected PDF: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        List\u003cPdf\u003e filteredPdfList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPdfList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setSelectedPdf(filteredPdfList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PDF_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 5,
      "-": 42,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Sorts all PDF files in alphabetical or deadline or file size order."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Sorts all the PDFs based on certain criteria.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Parameters: CRITERIA (name/deadline) ORDER (up/down)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"CRITERIA can only be either name, deadline or size\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"ORDER can only be either up or down corresponding to ascending or descending order\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" name up\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" deadline down\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" size up\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sort success!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final Comparator\u003cPdf\u003e pdfComparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public SortCommand(Comparator\u003cPdf\u003e cm) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(cm);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.pdfComparator \u003d cm;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfBook newBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        newBook.setPdfs(model.getPdfBook().getPdfList().sorted(pdfComparator));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.setPdfBook(newBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfComparator.equals(((SortCommand) other).pdfComparator));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 11,
      "WeiTangLau": 27,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/TagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_REMOVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Tags a pdf identified using it\u0027s displayed index from the PDF book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \": Sets or removes tag(s) related to a selected pdf indicated \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"by the index number used in the displayed pdf list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + PREFIX_TAG_ADD + \"/\" + PREFIX_TAG_REMOVE + \" \" + PREFIX_TAG_NAME + \"[TAG]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_TAG_ADD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + PREFIX_TAG_NAME + \"CS2103T \" + PREFIX_TAG_NAME + \"SE\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_TAG_REMOVE + \" \" + PREFIX_TAG_NAME + \"School\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_TAG_PDF_SUCCESS \u003d \"Edited tag for Pdf:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Boolean isAddTag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TagCommand(Index index, Set\u003cTag\u003e tags, Boolean isAddTag) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(isAddTag);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isAddTag \u003d isAddTag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e lastShownList \u003d model.getFilteredPdfList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf oPdf \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf nPdf;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (isAddTag) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d TagCommand.getPdfWithNewTag(oPdf, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            nPdf \u003d TagCommand.getPdfWithRemovedTag(oPdf, tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.setPdf(oPdf, nPdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TAG_PDF_SUCCESS, nPdf.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Pdf getPdfWithNewTag(Pdf old, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e oTags \u003d old.getTags();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e nTags \u003d new HashSet\u003c\u003e(oTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        nTags.addAll(tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Pdf(old.getName(), old.getDirectory(), old.getSize(), nTags, old.getDeadline());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Pdf getPdfWithRemovedTag(Pdf old, Set\u003cTag\u003e tags) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e oTags \u003d old.getTags();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e nTags \u003d new HashSet\u003c\u003e(oTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        boolean hasTag \u003d nTags.removeAll(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (hasTag) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new Pdf(old.getName(), old.getDirectory(), old.getSize(), nTags, old.getDeadline());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_TAG_IN_PDF);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof TagCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        TagCommand e \u003d (TagCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 tags.equals(e.tags) \u0026\u0026 isAddTag \u003d\u003d e.isAddTag;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "WeiTangLau": 36,
      "jetkan-yk": 71
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Reverts the {@code model}\u0027s pdf book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!model.canUndoPdfBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 22,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents an error which occurs during execution of a {@link CommandException}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 15,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String MESSAGE_NO_FILE_SELECTED \u003d \"No file selected\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_FILE))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_FILE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                file \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_FILE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE) \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Optional\u003cFile\u003e fileContainer \u003d new AddGuiParser().selectPdf();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!fileContainer.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(AddCommandParser.MESSAGE_NO_FILE_SELECTED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                file \u003d fileContainer.get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!CliSyntax.arePrefixesPresent(argMultimap, PREFIX_FILE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Name name \u003d new Name(file.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Directory directory \u003d new Directory(file.getParent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Size size \u003d new Size(Long.toString(file.length()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Pdf pdf \u003d new Pdf(name, directory, size, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(pdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_INVALID_SELECTION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 35,
      "WeiTangLau": 10,
      "-": 18,
      "jetkan-yk": 10
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/AddGuiParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.FileChooser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses parses user selection and returns the corresponding file object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class AddGuiParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_TITLE \u003d \"Select PDF\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_FILTER_DESCRIPTION \u003d \"PDF Files\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FILECHOOSER_FILTER_VALUE \u003d \"*.pdf\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private FileChooser fileChooser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Default Constructor, initializes file chooser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    AddGuiParser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser \u003d new FileChooser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser.setTitle(AddGuiParser.FILECHOOSER_TITLE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.fileChooser.getExtensionFilters()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .add(new FileChooser.ExtensionFilter(AddGuiParser.FILECHOOSER_FILTER_DESCRIPTION,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        AddGuiParser.FILECHOOSER_FILTER_VALUE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Opens the FileChooser UI to allow the user to select"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a Pdf file of choice."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return File Object corresponding to chosen PDF file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cFile\u003e selectPdf() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Optional.ofNullable(fileChooser.showOpenDialog(new Stage()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 39,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the number of argument values"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public int getNumValues() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        int num \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (Map.Entry\u003cPrefix, List\u003cString\u003e\u003e entry : argMultimap.entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            num +\u003d entry.getValue().size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return num;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_DIRECTORY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_TAG_NAME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_TAG_ADD \u003d new Prefix(\"-a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_TAG_REMOVE \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_NEW \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DONE \u003d new Prefix(\"done\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_REMOVE \u003d new Prefix(\"remove\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"password/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final int PREFIX_COUNT \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns all prefixes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Prefix[] getAllPrefixes() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(PREFIX_NAME, PREFIX_DIRECTORY, PREFIX_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PREFIX_TAG_NAME, PREFIX_TAG_ADD, PREFIX_TAG_REMOVE, PREFIX_DEADLINE_NEW,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PREFIX_DEADLINE_DONE, PREFIX_DEADLINE_REMOVE, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .toArray(new Prefix[PREFIX_COUNT]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns all the invalid prefixes for the command given {@code validPrefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Prefix[] getInvalidPrefixesForCommand(Prefix validPrefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(getAllPrefixes())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .filter(x -\u003e x !\u003d validPrefix)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .toArray(new Prefix[PREFIX_COUNT]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 38,
      "-": 9,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/DeadlineCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class DeadlineCommandParser implements Parser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeadlineCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * and returns an DeadlineCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public DeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DEADLINE_NEW, PREFIX_DEADLINE_DONE, PREFIX_DEADLINE_REMOVE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Deadline deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand.DeadlineAction action;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        //If both Remove \u0026 Done are present or none of the prefixes are present."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if ((argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                || (!argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    \u0026\u0026 !argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \u0026\u0026 !argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                || (argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \u0026\u0026 (argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    || argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_NEW).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE_NEW).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.NEW;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DEADLINE_DONE).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.DONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DEADLINE_REMOVE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            action \u003d DeadlineCommand.DeadlineAction.REMOVE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new DeadlineCommand(index, deadline, action);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 43,
      "WeiTangLau": 1,
      "jetkan-yk": 22
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/DecryptCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new DecryptCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommandParser implements Parser\u003cDecryptCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DecryptCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an DecryptCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DecryptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_PASSWORD))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new DecryptCommand(index, password);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 40,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String DELETE_COMMAND_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (parseArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            } else if (parseArgs.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                index \u003d ParserUtil.parseIndex(parseArgs[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                if (parseArgs[1].toLowerCase().equals(DELETE_COMMAND_HARD)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    return new DeleteCommand(index, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 15,
      "WeiTangLau": 2,
      "-": 22,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/EncryptCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommandParser implements Parser\u003cEncryptCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EncryptCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an EncryptCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public EncryptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_PASSWORD))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORD).get().equals(\"\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new EncryptCommand(index, password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 44,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Filter command is actually a modified version of find command,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * albeit using tag as the find \u0027keyword\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (trimmedArgs.isEmpty() || argMultiMap.getAllValues(PREFIX_TAG_NAME).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d argMultiMap.getAllValues(PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new FilterCommand(new TagContainsKeywordsPredicate(tagKeywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 30,
      "ptvrajsk": 4,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "-": 28,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/MergeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new MergeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MergeCommandParser implements Parser\u003cMergeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MergeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            Index[] indices \u003d new Index[parseArgs.length];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            for (int i \u003d 0; i \u003c parseArgs.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                indices[i] \u003d ParserUtil.parseIndex(parseArgs[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MergeCommand(indices);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MergeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 28,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/MoveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new RenameCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class MoveCommandParser implements Parser\u003cMoveCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String MESSAGE_NO_DIR_SELECTED \u003d \"No Directory Selected\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenameCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an RenameCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public MoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Directory directory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DIRECTORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DIRECTORY)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DIRECTORY).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                directory \u003d ParserUtil.parseDirectory(argMultimap.getValue(PREFIX_DIRECTORY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Optional\u003cFile\u003e selectedDirContainer \u003d new MoveGuiParser().selectDirectory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (!selectedDirContainer.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(MoveCommandParser.MESSAGE_NO_DIR_SELECTED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            directory \u003d ParserUtil.parseDirectory(selectedDirContainer.get().getAbsolutePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String[] parseArgs \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            if (parseArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(MoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            index \u003d ParserUtil.parseIndex(parseArgs[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            directory \u003d ParserUtil.parseDirectory(parseArgs[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return new MoveCommand(index, directory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 29,
      "ptvrajsk": 43,
      "WeiTangLau": 3,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/MoveGuiParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.DirectoryChooser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses parses users directory selection and returns the corresponding file object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class MoveGuiParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String DIRCHOOSER_TITLE \u003d \"Select Directory\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private DirectoryChooser directoryChooser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Default Constructor, initializes directory chooser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    MoveGuiParser() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directoryChooser \u003d new DirectoryChooser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directoryChooser.setTitle(DIRCHOOSER_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Opens the DirectoryChooser UI to allow the user to select"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a directory of choice."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return File Object corresponding to chosen directory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cFile\u003e selectDirectory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Optional.ofNullable(this.directoryChooser.showDialog(new Stage()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 33,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public OpenCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new OpenCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 31,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST \u003d \"File does not exist.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses a {@code String filePath} into an {@code File}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @throws ParseException if the given {@code File} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static File parseFile(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d new File(trimmedFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(MESSAGE_FILE_DOES_NOT_EXIST, new FileNotFoundException());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses a {@code String directory} into a {@code Directory}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException if the given {@code directory} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Directory parseDirectory(String directory) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(directory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        String trimmedDirectory \u003d directory.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        File file \u003d new File(trimmedDirectory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!file.isDirectory()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(\"Directory unavailable.\", new FileNotFoundException());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new Directory(trimmedDirectory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Parses a DD-MM-YYYY string input into a Deadline Object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param deadline \u003d String in DD-MM-YYYY format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return Constructed valid Deadline Object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws ParseException - If input does not match requirements."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionDay \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionMonth \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final int positionYear \u003d 2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final String parameterSeperator \u003d \"-\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final String dateError \u003d \"Invalid Date Format/Value.\\nPlease enter valid date of the format dd-mm-yyyy.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String[] dates \u003d trimmedDeadline.split(parameterSeperator);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (String s : dates) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            if (s.length() \u003d\u003d 0 || s.length() \u003e 4) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new ParseException(dateError);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (dates[positionDay].length() \u003e 2 || dates[positionMonth].length() \u003e 2"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                || dates[positionYear].length() \u003e 4) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(dateError);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return new Deadline(Integer.parseInt(dates[positionDay]), Integer.parseInt(dates[positionMonth]),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    Integer.parseInt(dates[positionYear]));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new ParseException(dateError);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 53,
      "WeiTangLau": 15,
      "-": 58,
      "jetkan-yk": 26
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/PdfBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case DecryptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new DecryptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case RenameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new RenameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case EncryptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new EncryptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case MergeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MergeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case MoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new MoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 35,
      "ptvrajsk": 1,
      "WeiTangLau": 60,
      "jetkan-yk": 24
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/RenameCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new RenameCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class RenameCommandParser implements Parser\u003cRenameCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenameCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * and returns an RenameCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public RenameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, CliSyntax.getAllPrefixes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (CliSyntax.arePrefixesPresent(argMultimap, CliSyntax.getInvalidPrefixesForCommand(PREFIX_NAME))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EditPdfDescriptor editPdfDescriptor \u003d new RenameCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            editPdfDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } else if (!editPdfDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new ParseException(RenameCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return new RenameCommand(index, editPdfDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 16,
      "-": 45,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_DEADLINE_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_DEADLINE_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_NAME_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_NAME_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_SIZE_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_SIZE_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String name_ascending \u003d \"name up\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String name_descending \u003d \"name down\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String deadline_ascending \u003d \"deadline up\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String deadline_descending \u003d \"deadline down\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String size_ascending \u003d \"size up\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String size_descending \u003d \"size down\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            String parseArgs \u003d args.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            HashMap\u003cString, Comparator\u003cPdf\u003e\u003e sortCriteria \u003d getSortCriteriaMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            Comparator\u003cPdf\u003e targetComparator \u003d sortCriteria.get(parseArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (targetComparator \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                throw new ParseException(SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new SortCommand(targetComparator);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lormee94"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @return a hash map of String-Comparator pair"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private HashMap\u003cString, Comparator\u003cPdf\u003e\u003e getSortCriteriaMap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        HashMap\u003cString, Comparator\u003cPdf\u003e\u003e sortCriteriaMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(name_ascending, COMPARATOR_NAME_ASCENDING_PDFS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(name_descending, COMPARATOR_NAME_DESCENDING_PDFS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(deadline_ascending, COMPARATOR_DEADLINE_ASCENDING_PDFS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(deadline_descending, COMPARATOR_DEADLINE_DESCENDING_PDFS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(size_ascending, COMPARATOR_SIZE_ASCENDING_PDFS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sortCriteriaMap.put(size_descending, COMPARATOR_SIZE_DESCENDING_PDFS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return sortCriteriaMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 28,
      "WeiTangLau": 26,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/TagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_REMOVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.getAllPrefixes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Parses input arguments and creates a new TagCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_TAG_ADD, PREFIX_TAG_REMOVE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ArgumentMultimap fullArgMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, getAllPrefixes());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (argMultimap.getNumValues() !\u003d fullArgMultimap.getNumValues()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            System.out.println(argMultimap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            System.out.println(fullArgMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG_ADD).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG_REMOVE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(\"Invalid Prefix: -a -r\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG_ADD).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TAG_ADD).equals(Optional.of(\"\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TAG_NAME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new TagCommand(index, tags, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_TAG_REMOVE).isPresent()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TAG_REMOVE).equals(Optional.of(\"\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_TAG_NAME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            tags \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new TagCommand(index, tags, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 7,
      "jetkan-yk": 62
    }
  },
  {
    "path": "src/main/java/seedu/pdf/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static java.util.Comparator.reverseOrder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    Predicate\u003cPdf\u003e PREDICATE_SHOW_ALL_PDFS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /** {@code Comparator} that compares two PDFs alphabetically based on name, case insensitive */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_NAME_ASCENDING_PDFS \u003d (o1, o2) -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            o1.getName().toString().compareToIgnoreCase(o2.getName().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_NAME_DESCENDING_PDFS \u003d COMPARATOR_NAME_ASCENDING_PDFS.reversed();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /** {@code Comparator} that compares two PDFs chronologically based on deadline */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_DEADLINE_ASCENDING_PDFS \u003d (o1, o2) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (!o1.getDeadline().exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else if (!o2.getDeadline().exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return o1.getDeadline().compareTo(o2.getDeadline());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_DEADLINE_DESCENDING_PDFS \u003d Comparator.comparing(Pdf::getDeadline, reverseOrder());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /** {@code Comparator} that compares two PDFs numerically based on size */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_SIZE_ASCENDING_PDFS \u003d Comparator.comparing(Pdf::getSize);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Comparator\u003cPdf\u003e COMPARATOR_SIZE_DESCENDING_PDFS \u003d COMPARATOR_SIZE_ASCENDING_PDFS.reversed();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the user prefs\u0027 pdf book file value."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the user prefs\u0027 pdf book file value."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdfBookFilePath(Path pdfBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Replaces pdf book data with the data in {@code pdfBook}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdfBook(ReadOnlyPdfBook pdfBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /** Returns the PdfBook */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ReadOnlyPdfBook getPdfBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if a pdf with the same identity as {@code pdf} exists in the pdf book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean hasPdf(Pdf pdf);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given pdf."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * The pdf must exist in the pdf book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void deletePdf(Pdf target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given pdf."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code pdf} must not already exist in the pdf book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void addPdf(Pdf pdf);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given pdf {@code target} with {@code editedPdf}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code target} must exist in the pdf book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the pdf book."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setPdf(Pdf target, Pdf editedPdf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered pdf list */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ObservableList\u003cPdf\u003e getFilteredPdfList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered pdf list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if the model has previous pdf book states to restore."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean canUndoPdfBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if the model has undone pdf book states to restore."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    boolean canRedoPdfBook();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Restores the model\u0027s pdf book to its previous state."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void undoPdfBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Restores the model\u0027s pdf book to its previously undone state."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void redoPdfBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Saves the current pdf book state for undo/redo."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void commitPdfBook();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no pdf is selected."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Pdf getSelectedPdf();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected pdf in the filtered pdf list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    void setSelectedPdf(Pdf pdf);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "WeiTangLau": 23,
      "-": 94,
      "jetkan-yk": 34
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents the in-memory model of the pdf book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final VersionedPdfBook versionedPdfBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPdf\u003e filteredPdfs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final SimpleObjectProperty\u003cPdf\u003e selectedPdf \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Initializes a ModelManager with the given pdfBook and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ModelManager(ReadOnlyPdfBook pdfBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(pdfBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        logger.fine(\"Initializing with pdf book: \" + pdfBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook \u003d new VersionedPdfBook(pdfBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        filteredPdfs \u003d new FilteredList\u003c\u003e(versionedPdfBook.getPdfList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        filteredPdfs.addListener(this::ensureSelectedPdfIsValid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this(new PdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return userPrefs.getPdfBookFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(pdfBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        userPrefs.setPdfBookFilePath(pdfBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PdfBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBook(ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.resetData(pdfBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.hasPdf(pdf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void deletePdf(Pdf target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.removePdf(target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPdf);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.setPdf(target, editedPdf);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pdf List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Pdf} backed by the internal list of"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code versionedPdfBook}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ObservableList\u003cPdf\u003e getFilteredPdfList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPdfs;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPdfs.setPredicate(predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean canUndoPdfBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.canUndo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean canRedoPdfBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.canRedo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void undoPdfBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.undo();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void redoPdfBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.redo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void commitPdfBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        versionedPdfBook.commit();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected pdf \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return selectedPdf;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf getSelectedPdf() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return selectedPdf.getValue();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setSelectedPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (pdf !\u003d null \u0026\u0026 !filteredPdfs.contains(pdf)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        selectedPdf.setValue(pdf);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Ensures {@code selectedPdf} is a valid pdf in {@code filteredPdfs}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private void ensureSelectedPdfIsValid(ListChangeListener.Change\u003c? extends Pdf\u003e change) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (selectedPdf.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                // null is always a valid selected pdf, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            boolean wasSelectedPdfReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedPdf.getValue());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (wasSelectedPdfReplaced) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                // Update selectedPdf to its new value."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedPdf.getValue());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                selectedPdf.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            boolean wasSelectedPdfRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    .anyMatch(removedPdf -\u003e selectedPdf.getValue().isSamePdf(removedPdf));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            if (wasSelectedPdfRemoved) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the pdf that came before it in the list,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such pdf."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                selectedPdf.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return versionedPdfBook.equals(other.versionedPdfBook)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPdfs.equals(other.filteredPdfs)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPdf.get(), other.selectedPdf.get());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 64,
      "-": 165,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/PdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.UniquePdfList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Wraps all data at the pdf-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Duplicates are not allowed (by .isSamePdf comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfBook implements ReadOnlyPdfBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final UniquePdfList pdfs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Creates an PdfBook using the Pdfs in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfBook(ReadOnlyPdfBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the pdf list with {@code pdfs}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pdfs} must not contain duplicate pdfs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.pdfs.setPdfs(pdfs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Resets the existing data of this {@code PdfBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void resetData(ReadOnlyPdfBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        setPdfs(newData.getPdfList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// pdf-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if a pdf with the same identity as {@code pdf} exists in the pdf book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(pdf);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.contains(pdf);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Adds a pdf to the pdf book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * The pdf must not already exist in the pdf book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void addPdf(Pdf p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given pdf {@code target} in the list with {@code editedPdf}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code target} must exist in the pdf book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the pdf book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPdf);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.setPdf(target, editedPdf);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Removes {@code key} from this {@code PdfBook}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code key} must exist in the pdf book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void removePdf(Pdf key) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfs.remove(key);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Notifies listeners that the pdf book has been modified."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.asUnmodifiableObservableList().size() + \" pdfs\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public ObservableList\u003cPdf\u003e getPdfList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof PdfBook // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfs.equals(((PdfBook) other).pdfs));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfs.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 27,
      "-": 105,
      "jetkan-yk": 12
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/ReadOnlyPdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Unmodifiable view of an pdf book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public interface ReadOnlyPdfBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns an unmodifiable view of the pdf list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * This list will not contain any duplicate pdfs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    ObservableList\u003cPdf\u003e getPdfList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 2,
      "-": 11,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 13,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Path pdfBookFilePath \u003d Paths.get(\"data\" , \"pdfplusplus.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        setPdfBookFilePath(newUserPrefs.getPdfBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(pdfBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.pdfBookFilePath \u003d pdfBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfBookFilePath.equals(o.pdfBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Objects.hash(guiSettings, pdfBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + pdfBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 9,
      "-": 74,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/VersionedPdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * {@code PdfBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class VersionedPdfBook extends PdfBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final List\u003cReadOnlyPdfBook\u003e pdfBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    VersionedPdfBook(ReadOnlyPdfBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.add(new PdfBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Saves a copy of the current {@code PdfBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.add(new PdfBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfBookStateList.subList(currentStatePointer + 1, pdfBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Restores the pdf book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        resetData(pdfBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Restores the pdf book to its previously undone state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        resetData(pdfBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if {@code undo()} has pdf book states to undo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    boolean canUndo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if {@code redo()} has pdf book states to redo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    boolean canRedo() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return currentStatePointer \u003c pdfBookStateList.size() - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!(other instanceof VersionedPdfBook)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        VersionedPdfBook otherVersionedPdfBook \u003d (VersionedPdfBook) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return super.equals(otherVersionedPdfBook)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 pdfBookStateList.equals(otherVersionedPdfBook.pdfBookStateList)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedPdfBook.currentStatePointer;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            super(\"Current state pointer at start of pdfBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            super(\"Current state pointer at end of pdfBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 16,
      "-": 81,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/Deadline.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.MissingFormatArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Pdf\u0027s deadline in the pdf book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadline can take any valid date, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TOSTRING_HEADER_PREFIX \u003d \"Deadline: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String STATUS_DONE_PREFIX \u003d \" (Done)\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String STATUS_ONGOING_PREFIX \u003d \" (Ongoing)\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String STATUS_NONE_PREFIX \u003d \"None\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String PROPERTY_SEPARATOR_PREFIX \u003d \"/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final int PROPERTY_DATE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final int PROPERTY_IS_DONE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final boolean isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}. Specifically used for Json reading."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Interprets a deadline from its #toString() method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline(String jsonFormat) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (jsonFormat.equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                if (!jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_IS_DONE_INDEX].equals(\"true\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        \u0026\u0026 !jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_IS_DONE_INDEX].equals(\"false\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    throw new AssertionError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                this.date \u003d LocalDate.parse(jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_DATE_INDEX]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                this.isDone \u003d Boolean.parseBoolean(jsonFormat.split(PROPERTY_SEPARATOR_PREFIX)[PROPERTY_IS_DONE_INDEX]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new MissingFormatArgumentException(\"Missing Parameters.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @param date - LocalDate of deadline"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws DateTimeException - If Invalid input is detected (Invalid Date)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(LocalDate date) throws DateTimeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a valid {@code Deadline}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param date - Date of deadline"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param month - Month of Deadline"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lormee94"
        },
        "content": "     * @param year - Year of Deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @throws DateTimeException - If invalid input is detected"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(int date, int month, int year) throws DateTimeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d LocalDate.of(year, month, date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Takes an existing deadline and parses its values while replacing its status with"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param existingDeadline - Existing Deadline whose status you want to change."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @param isDone - Specifying if Deadline has been met."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Deadline(Deadline existingDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.date \u003d existingDeadline.getValue();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns the LocalDate object that represents"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * a pdf\u0027s deadline."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Calculates the number of days to a particular deadline."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return - Number of Days to Deadline as long."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public long getDaysToDeadline() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return DAYS.between(LocalDate.now(), this.date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns the state of the Deadline."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @return true or false depending on this.isDone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true or false based on the existence of a deadline."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return - existence of localdate."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean exists() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.date !\u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(TOSTRING_HEADER_PREFIX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (this.exists()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            builder.append(this.date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (this.isDone()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                builder.append(STATUS_DONE_PREFIX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                builder.append(STATUS_ONGOING_PREFIX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            builder.append(STATUS_NONE_PREFIX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Json adapted toString() method"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @return - Json adapted Deadline.toString()."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public String toJsonString() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.exists()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                ? this.date + Deadline.PROPERTY_SEPARATOR_PREFIX + this.isDone"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline setDone(Deadline completedDeadline) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Deadline(completedDeadline, true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static Deadline setRemove(Deadline deadlineToRemove) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Deadline();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                || other instanceof Deadline // instanceof handles nulls;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 date.equals(((Deadline) other).date)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \u0026\u0026 isDone \u003d\u003d ((Deadline) other).isDone;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public int compareTo(Deadline other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this.date.compareTo(other.date);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "ptvrajsk": 128,
      "jetkan-yk": 59
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/Directory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a Pdf\u0027s directory in the computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDirectory(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class Directory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Directories of file can take any values, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * The first character of the directory must not be a whitespace ,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Path value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Constructs an {@code Directory}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @param directory A valid pdf."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Directory(String directory) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(directory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        checkArgument(isValidDirectory(directory), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        value \u003d Paths.get(directory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns if a given string is a valid directory."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean isValidDirectory(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 Paths.get(test).toFile().exists()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 Paths.get(test).toFile().isDirectory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String getDirectory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.value.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(value.toString())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof Directory // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 value.equals(((Directory) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 14,
      "WeiTangLau": 49,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Pdf\u0027s name in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            \"Names should only contain alphanumeric characters, it should ends with .pdf\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * File Name Restrictions (Currently Following Windows OS Restrictions)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String TO_MATCH_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \"^(?!^(PRN|AUX|CLOCK\\\\$|NUL|CON|COM\\\\d|LPT\\\\d|\\\\..*)(\\\\..+)?$)[^\\\\x00-\\\\x1f\\\\\\\\?*:\\\\\\\";|/]+pdf+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return test.matches(TO_MATCH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String getFullName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.fullName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(fullName)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return this.fullName.compareTo(other.fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 5,
      "ptvrajsk": 9,
      "WeiTangLau": 5,
      "-": 48,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Pdf}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPdf\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Pdf pdf) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsPartialWordIgnoreCase(pdf.getName().getFullName(), keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                                || StringUtil.containsWordInContent(pdf, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "-": 28,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/Pdf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Pdf in the pdf book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Pdf {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Directory directory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Size size;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final boolean isEncrypted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf(Name name, Directory directory, Size size, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(name, directory, size, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isFileEncrypted(name, directory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Pdf(Name name, Directory directory, Size size, Set\u003cTag\u003e tags, Deadline deadline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        requireAllNonNull(name, directory, size, tags, deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isFileEncrypted(name, directory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf(Name name, Directory directory, Size size, Set\u003cTag\u003e tags, Deadline deadline, boolean isEncrypted) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(name, directory, size, tags, deadline, isEncrypted);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isEncrypted;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Pdf(Pdf oldPdf, boolean isEncrypted) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireAllNonNull(oldPdf, isEncrypted);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.name \u003d oldPdf.name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.directory \u003d oldPdf.directory;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.size \u003d new Size(Long.toString(Paths.get(oldPdf.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                oldPdf.getName().getFullName()).toFile().length()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.deadline \u003d oldPdf.deadline;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.tags.addAll(oldPdf.tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        this.isEncrypted \u003d isEncrypted;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Size getSize() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public boolean getIsEncrypted() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return isEncrypted;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if both pdfs of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * This defines a weaker notion of equality between two pdfs."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean isSamePdf(Pdf otherPdf) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPdf \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPdf !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getDirectory().equals(getDirectory());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public boolean isValidPdf() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return Paths.get(this.directory.getDirectory(), this.name.getFullName()).toAbsolutePath().toFile().exists();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if the file at the given {code name} and {code directory} is encrypted. If the file can\u0027t be loaded"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * means that the file is already encrypted."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private boolean isFileEncrypted(Name name, Directory directory) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try (PDDocument pd \u003d PDDocument.load(Paths.get(directory.getDirectory(), name.getFullName()).toFile())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            pd.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns true if both pdfs have the same identity and data fields."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * This defines a stronger notion of equality between two pdfs."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Pdf)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Pdf otherPdf \u003d (Pdf) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPdf.getName().equals(getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 otherPdf.getDirectory().equals(getDirectory())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 otherPdf.getSize().equals(getSize())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getTags().equals(getTags())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \u0026\u0026 otherPdf.getDeadline().equals(getDeadline());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return Objects.hash(name, directory, size, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns a string representation of the pdf file that is fit for"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * user readability. Size parameter is converted to appropriate prefix."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @return user-friendly string representation of pdf."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(getDirectory())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(getSize().toReadableString())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .append(getDeadline());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (getTags().size() \u003e 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            builder.append(\"Tags: \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 46,
      "WeiTangLau": 62,
      "-": 62,
      "jetkan-yk": 11
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/Size.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a Pdf\u0027s file size in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSize(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class Size implements Comparable\u003cSize\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File size should be a non-negative number\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final int THRESHOLD_KILOBYTE \u003d 1 \u003c\u003c 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final int THRESHOLD_MEGABYTE \u003d 1 \u003c\u003c 20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final int THRESHOLD_GIGABYTE \u003d 1 \u003c\u003c 30;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final String PREFIX_BYTE \u003d \"b\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final String PREFIX_KILOBYTE \u003d \"kb\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final String PREFIX_MEGABYTE \u003d \"mb\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    static final String PREFIX_GIGABYTE \u003d \"gb\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public Size(String size) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        requireNonNull(size);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        checkArgument(isValidSize(size), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        value \u003d size;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns true if a given string is a non-negative number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static boolean isValidSize(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String getReadableValue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        int actualValue \u003d Integer.parseInt(this.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (actualValue \u003c THRESHOLD_KILOBYTE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return sb.append(this.value)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(PREFIX_BYTE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else if (actualValue \u003c THRESHOLD_MEGABYTE) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return sb.append(Integer.toString((actualValue / THRESHOLD_KILOBYTE)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(PREFIX_KILOBYTE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else if (actualValue \u003c THRESHOLD_GIGABYTE) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return sb.append(Integer.toString((actualValue / THRESHOLD_MEGABYTE)))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(PREFIX_MEGABYTE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return sb.append(Integer.toString((actualValue / THRESHOLD_GIGABYTE)))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .append(PREFIX_GIGABYTE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public String toReadableString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder(\"Size: \").append(this.getReadableValue()).append(\"\\n\").toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return new StringBuilder().append(\"Size: \").append(value).append(\"\\n\").toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof Size // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                \u0026\u0026 value.equals(((Size) other).value)); // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public int compareTo(Size other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int thisFileSize \u003d Integer.parseInt(this.value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int otherFileSize \u003d Integer.parseInt(other.value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return thisFileSize - otherFileSize;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 44,
      "WeiTangLau": 54,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lormee94"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lormee94"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lormee94"
        },
        "content": " * Tests that a {@code Pdf}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lormee94"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lormee94"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPdf\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean test(Pdf pdf) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    Iterator\u003cTag\u003e itr \u003d pdf.getTags().iterator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    while (itr.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                        if (StringUtil.containsFullWordSameCase(itr.next().tagName, keyword)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lormee94"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lormee94"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 38,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/UniquePdfList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A list of pdfs that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A pdf is considered unique by comparing using {@code Pdf#isSamePdf(Pdf)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * pdfs uses Pdf#isSamePdf(Pdf) for equality so as to ensure that the pdf being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * unique in terms of identity in the UniquePdfList. However, the removal of a pdf uses Pdf#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the pdf with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * @see Pdf#isSamePdf(Pdf)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class UniquePdfList implements Iterable\u003cPdf\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPdf\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPdf\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent pdf as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Pdf toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePdf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a pdf to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Pdf toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the pdf {@code target} in the list with {@code editedPdf}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf identity of {@code editedPdf} must not be the same as another existing pdf in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPdf);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!target.isSamePdf(editedPdf) \u0026\u0026 contains(editedPdf)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPdf);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent pdf from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The pdf must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Pdf toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(UniquePdfList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code pdfs}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pdfs} must not contain duplicate pdfs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void setPdfs(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(pdfs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        if (!pdfsAreUnique(pdfs)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new DuplicatePdfException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(pdfs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPdf\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPdf\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                || (other instanceof UniquePdfList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePdfList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code pdfs} contains only unique pdfs."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private boolean pdfsAreUnique(List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c pdfs.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c pdfs.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                if (pdfs.get(i).isSamePdf(pdfs.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 21,
      "-": 112,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/exceptions/DuplicatePdfException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Signals that the operation will result in duplicate Pdfs (Pdfs are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DuplicatePdfException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public DuplicatePdfException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        super(\"Operation would result in duplicate pdf\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 6,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/pdf/exceptions/PdfNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified pdf."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 4,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a Tag in the pdf book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Contains utility methods for populating {@code PdfBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SAMPLE_DEADLINE_1 \u003d \"2019-04-10/READY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public static final String SAMPLE_DEADLINE_2 \u003d \"2019-04-09/COMPLETE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static Pdf[] getSamplePdfs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Path sampleA \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Path sampleB \u003d Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Pdf[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Pdf(new Name(sampleA.getFileName().toString()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Directory(sampleA.getParent().toAbsolutePath().toString()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Size(Long.toString(sampleA.toFile().length())), getTagSet(\"Lecture\", \"Week1\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Deadline(SAMPLE_DEADLINE_1)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            new Pdf(new Name(sampleB.getFileName().toString()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Directory(sampleB.getParent().toAbsolutePath().toString()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Size(Long.toString(sampleB.toFile().length())), getTagSet(\"Lecture\", \"Week9\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    new Deadline(SAMPLE_DEADLINE_2))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static ReadOnlyPdfBook getSamplePdfBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook samplePb \u003d new PdfBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return samplePb;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 16,
      "WeiTangLau": 3,
      "-": 25,
      "jetkan-yk": 11
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/JsonAdaptedPdf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Pdf}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class JsonAdaptedPdf {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pdf\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String size;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String directory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a {@code JsonAdaptedPdf} with the given pdf details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    JsonAdaptedPdf(@JsonProperty(\"name\") String name, @JsonProperty(\"directory\") String directory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                   @JsonProperty(\"size\") String size, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                   @JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.directory \u003d directory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Pdf} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    JsonAdaptedPdf(Pdf source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        name \u003d source.getName().getFullName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        size \u003d source.getSize().getValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        directory \u003d source.getDirectory().getDirectory();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deadline \u003d source.getDeadline().toJsonString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted pdf object into the model\u0027s {@code Pdf} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted pdf."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Pdf toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final List\u003cTag\u003e pdfTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            pdfTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(pdfTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (size \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Size.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!Size.isValidSize(size)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException(Size.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final Size modelSize \u003d new Size(size);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (directory \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Directory.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!Directory.isValidDirectory(directory)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            throw new IllegalValueException(Directory.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        final Directory modelDirectory \u003d new Directory(directory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            return new Pdf(modelName, modelDirectory, modelSize, modelTags, modelDeadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 41,
      "WeiTangLau": 1,
      "-": 54,
      "jetkan-yk": 17
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/JsonAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/JsonPdfBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A class to access PdfBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class JsonPdfBookStorage implements PdfBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPdfBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonPdfBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return readPdfBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Similar to {@link #readPdfBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Optional\u003cJsonSerializablePdfBook\u003e jsonPdfBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                filePath, JsonSerializablePdfBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (!jsonPdfBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return Optional.of(jsonPdfBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        savePdfBook(pdfBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Similar to {@link #savePdfBook(ReadOnlyPdfBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        requireNonNull(pdfBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePdfBook(pdfBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 12,
      "WeiTangLau": 1,
      "-": 54,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/JsonSerializablePdfBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * An Immutable PdfBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "@JsonRootName(value \u003d \"pdfbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "class JsonSerializablePdfBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PDF \u003d \"Pdf list contains duplicate pdf(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final List\u003cJsonAdaptedPdf\u003e pdfs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Constructs a {@code JsonSerializablePdfBook} with the given pdfs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public JsonSerializablePdfBook(@JsonProperty(\"pdfs\") List\u003cJsonAdaptedPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.pdfs.addAll(pdfs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Converts a given {@code ReadOnlyPdfBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePdfBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    JsonSerializablePdfBook(ReadOnlyPdfBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfs.addAll(source.getPdfList().stream().map(JsonAdaptedPdf::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Converts this pdf book into the model\u0027s {@code PdfBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    PdfBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (JsonAdaptedPdf jsonAdaptedPdf : pdfs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Pdf pdf \u003d jsonAdaptedPdf.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (pdfBook.hasPdf(pdf)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            pdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return pdfBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 11,
      "WeiTangLau": 2,
      "-": 34,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/PdfBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Represents a storage for {@link PdfBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public interface PdfBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the file value of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns PdfBook data as a {@link ReadOnlyPdfBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @see #getPdfBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Saves the given {@link ReadOnlyPdfBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param pdfBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @see #savePdfBook(ReadOnlyPdfBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8,
      "WeiTangLau": 4,
      "-": 29,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public interface Storage extends PdfBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Path getPdfBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "-": 23,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * Manages storage of PdfBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private PdfBookStorage pdfBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public StorageManager(PdfBookStorage pdfBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.pdfBookStorage \u003d pdfBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PdfBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfBookStorage.getPdfBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return readPdfBook(pdfBookStorage.getPdfBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public Optional\u003cReadOnlyPdfBook\u003e readPdfBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfBookStorage.readPdfBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        savePdfBook(pdfBook, pdfBookStorage.getPdfBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBookStorage.savePdfBook(pdfBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13,
      "WeiTangLau": 2,
      "-": 56,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Represents a storage for {@link seedu.pdf.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns the file value of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Saves the given {@link seedu.pdf.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 29,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private VBox initial;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label deadlines;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private VBox selected;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedDirectory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedSize;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label selectedDeadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    //private WebView browser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cPdf\u003e selectedPdf, List\u003cPdf\u003e duePdfs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*getRoot().setOnKeyPressed(Event::consume);*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load pdf page when selected pdf changes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.updateDefaultPage(duePdfs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selected.setVisible(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        selectedPdf.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                this.updateDefaultPage(duePdfs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                initial.setVisible(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                selected.setVisible(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                //loadDefaultPage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                this.updateSelectedPage(newValue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                initial.setVisible(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                selected.setVisible(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            //loadPdfPage(newValue);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        //loadDefaultPage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Updates the default page with relevant information of due documents."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param duePdfs - List of Pdfs that are due soon. (To a maximum of 4)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void updateDefaultPage(List\u003cPdf\u003e duePdfs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        for (Pdf pdf : duePdfs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(\"\\u2022 \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(pdf.getName().getFullName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            sb.append(\"\\r\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        deadlines.setText(sb.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Updates the individual Java Page on select."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * @param pdf - selected pdf"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void updateSelectedPage(Pdf pdf) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedName.setText(\"Name: \" + pdf.getName().getFullName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedDirectory.setText(\"Directory: \" + pdf.getDirectory().getDirectory());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        this.selectedSize.setText(\"Size: \" + pdf.getSize().getReadableValue());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.selectedDeadline.setText(\"Deadline: \" + pdf.getDeadline().getValue().toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            this.selectedDeadline.setText(\"Deadline: NONE\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /*private void loadPdfPage(Pdf pdf) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + pdf.getName().getFullName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    *//**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 84,
      "WeiTangLau": 5,
      "-": 45,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "         * @see seedu.pdf.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            Desktop.getDesktop().browse(Paths.get(\"build\", \"docs\", \"html5\", \"HelpWindow.html\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    .toAbsolutePath().toFile().toURI());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 6,
      "-": 83,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private PdfListPanel pdfListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private StackPane pdfListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedPdfProperty(), logic.getDuePdfs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfListPanel \u003d new PdfListPanel(logic.getFilteredPdfList(), logic.selectedPdfProperty(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                logic::setSelectedPdf);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfListPanelPlaceholder.getChildren().add(pdfListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPdfBookFilePath(), logic.getPdfBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfListPanel getPdfListPanel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return pdfListPanel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see seedu.pdf.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            browserPanel.updateDefaultPage(logic.getDuePdfs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "WeiTangLau": 5,
      "-": 184,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/PdfCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Pdf}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FXML \u003d \"PdfListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Pdf pdf;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private ImageView lock;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public PdfCard(Pdf pdf, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdf \u003d pdf;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        name.setText(pdf.getName().getFullName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!pdf.getIsEncrypted()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            lock.setVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (pdf.getDeadline().exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline.setPadding(new Insets(4, 0, 0, 0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            deadline.setText(pdf.getDeadline().getValue().format(DateTimeFormatter.ofPattern(\"dd MMM uuuu\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Green \u003d #008060"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Orange \u003d #b36b00"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            //Red \u003d #b30000"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (pdf.getDeadline().isDone()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-background-color: #2952a3;\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                        + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                if (pdf.getDeadline().getDaysToDeadline() \u003e 7) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #008060;\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                } else if (pdf.getDeadline().getDaysToDeadline() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #b36b00;\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                } else if (pdf.getDeadline().getDaysToDeadline() \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                    deadline.setStyle(\"-fx-text-fill: white;\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-color: #cc0052;\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-padding: 1;\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-border-radius: 3;\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-background-radius: 3;\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                            + \"-fx-label-padding: 0;\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        pdf.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        if (!(other instanceof PdfCard)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard card \u003d (PdfCard) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 pdf.equals(card.pdf);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 57,
      "WeiTangLau": 1,
      "-": 52,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/PdfListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Panel containing the list of pdfs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String FXML \u003d \"PdfListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PdfListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private ListView\u003cPdf\u003e pdfListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfListPanel(ObservableList\u003cPdf\u003e pdfList, ObservableValue\u003cPdf\u003e selectedPdf,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                        Consumer\u003cPdf\u003e onSelectedPdfChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfListView.setItems(pdfList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfListView.setCellFactory(listView -\u003e new PdfListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selection in pdf list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            onSelectedPdfChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        selectedPdf.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.fine(\"Selected pdf changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected pdf,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (Objects.equals(pdfListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                int index \u003d pdfListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Pdf} using a {@code PdfCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    class PdfListViewCell extends ListCell\u003cPdf\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Pdf pdf, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(pdf, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || pdf \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                setGraphic(new PdfCard(pdf, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "-": 48,
      "jetkan-yk": 18
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "-": 65,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/main/java/seedu/pdf/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @param location Directory of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 85,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c!--\u003cWebView fx:id\u003d\"browser\"/\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003cVBox fx:id\u003d\"initial\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"welcome\" alignment\u003d\"CENTER\" textFill\u003d\"white\" text\u003d\"Hello,\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" wrapText\u003d\"true\" text\u003d\"You have upcoming deadlines for the following documents:\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"deadlines\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003cVBox fx:id\u003d\"selected\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cVBox fx:id\u003d\"image\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003cVBox fx:id\u003d\"parameters\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedName\" text\u003d\"Name: \"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedDirectory\" text\u003d\"Directory: \"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedSize\" text\u003d\"Size: \"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel styleClass\u003d\"defaultpage\" fx:id\u003d\"selectedDeadline\" text\u003d\"Deadline: \"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 23,
      "WeiTangLau": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "#filterField, #pdfListPanel, #pdfWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#welcome {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 25;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 15, 0 ,0 ,0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ".defaultpage {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 7, 0 ,0 ,0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#image {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 40, 0 ,0 ,0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "#parameters {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    -fx-padding: 40, 0 ,0 ,0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 20,
      "WeiTangLau": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "         title\u003d\"PDF++\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    \u003cImage url\u003d\"@/images/logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"pdfList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            \u003cStackPane fx:id\u003d\"pdfListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 14,
      "WeiTangLau": 1,
      "-": 51,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/main/resources/view/PdfListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003cGridPane alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003cImageView fx:id\u003d\"lock\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003cimage\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            \u003cImage url\u003d\"@../images/lock.png\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "          \u003c/image\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 10,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/PdfListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "  \u003cListView fx:id\u003d\"pdfListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    h2 {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      color:whitesmoke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "      font-family: \"Avenir Next Condensed\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    h3 {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        color:whitesmoke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        font-family: \"Avenir Next Condensed\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch2 align\u003d\"left\" id\u003d\"welcomeHeader\"\u003eHello,\u003c/h2\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch3\u003eWelcome to (Insert Program Name Here),\u003c/h3\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \u003ch3\u003eIf you need assistance, please type \"help\" in the command bar.\u003c/h3\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 14,
      "-": 9
    }
  },
  {
    "path": "src/test/data/JsonPdfBookStorageTest/invalidAndValidPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\" : \"c.pdf\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTest\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\": \"Pdf with invalid location\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTester\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 13
    }
  },
  {
    "path": "src/test/data/JsonPdfBookStorageTest/invalidPdfPdfBook.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfs\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"name\": \"Pdf with invalid location\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"location\" : \"/Users/prithiviraj/Repositories/CS2103T/main/src/test/data/JsonAdaptedPdfTester\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"size\" : \"500068036608\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfBookFilePath\": \"pdfplusplus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "  \"pdfBookFilePath\": \"pdfplusplus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final PdfListPanelHandle pdfListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfListPanel \u003d new PdfListPanelHandle(getChildNode(PdfListPanelHandle.PDF_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfListPanelHandle getPdfListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return pdfListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PdfCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a pdf card in the pdf list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String DIRECTORY_FIELD_ID \u003d \"#directory\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String SIZE_FIELD_ID \u003d \"#size\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Label directoryLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Label deadlineLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final Label sizeLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        directoryLabel \u003d getChildNode(DIRECTORY_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        sizeLabel \u003d getChildNode(SIZE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public String getDirectory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return directoryLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return deadlineLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public String getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return sizeLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code pdf}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Pdf pdf) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        return getName().equals(pdf.getName().getFullName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(pdf.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 13,
      "-": 65,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PdfListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": " * Provides a handle for {@code PdfListPanel} containing the list of {@code PdfCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class PdfListPanelHandle extends NodeHandle\u003cListView\u003cPdf\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public static final String PDF_LIST_VIEW_ID \u003d \"#pdfListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Optional\u003cPdf\u003e lastRememberedSelectedPdfCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfListPanelHandle(ListView\u003cPdf\u003e pdfListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        super(pdfListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Returns a handle to the selected {@code PdfCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedPdfList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPdfList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Pdf list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .map(PdfCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPdfList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code pdf}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(Pdf pdf) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(pdf)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Pdf does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(pdf);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Selects the {@code PdfCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the pdf card handle of a pdf associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfCardHandle getPdfCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .map(PdfCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPdf(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Pdf getPdf(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Remembers the selected {@code PdfCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void rememberSelectedPdfCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            lastRememberedSelectedPdfCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            lastRememberedSelectedPdfCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Returns true if the selected {@code PdfCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * {@code rememberSelectedPdfCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public boolean isSelectedPdfCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPdf\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return lastRememberedSelectedPdfCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return !lastRememberedSelectedPdfCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                    || !lastRememberedSelectedPdfCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 4,
      "WeiTangLau": 20,
      "-": 134,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    protected Supplier\u003cReadOnlyPdfBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyPdfBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                jsonPdfBookStorage.savePdfBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        userPrefs.setPdfBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns a defensive copy of the pdf book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBook readStoragePdfBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return new PdfBook(storage.readPdfBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"Data is not in the PdfBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the file value of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return storage.getPdfBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model copy \u003d new ModelManager((model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPdfList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "jetkan-yk": 25
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                + \"Preference file Directory : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final Index fifthPdfIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(fifthPdfIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(fifthPdfIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(fifthPdfIndex.equals(fifthPdfIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(fifthPdfIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(fifthPdfIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(fifthPdfIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 126,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/value\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/test/java/seedu/pdf/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //---------------- Tests for containsPartialWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringUtil.containsPartialWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Does not match partial word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 145,
      "jetkan-yk": 23
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEADLINE_NEWLY_ADDED_FILE \u003d \"NEWLY ADDED\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonPdfBookStorage pdfBookStorage \u003d new JsonPdfBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Setup LogicManager with JsonPdfBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonPdfBookStorage pdfBookStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonPdfBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" \" + PREFIX_FILE + FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf expectedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags().withDeadline(DEADLINE_NEWLY_ADDED_FILE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.addPdf(expectedPdf);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void getFilteredPdfList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        logic.getFilteredPdfList().remove(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     *      - {@code expectedModel}\u0027s pdf book was saved to the storage file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static class JsonPdfBookIoExceptionThrowingStub extends JsonPdfBookStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        private JsonPdfBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public void savePdfBook(ReadOnlyPdfBook pdfBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 146,
      "jetkan-yk": 40
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_newPdf_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.addPdf(validPdf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPdf), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPdf), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_duplicatePdf_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfInList \u003d model.getPdfBook().getPdfList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new AddCommand(pdfInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 49
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_8;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void constructor_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_pdfAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStubAcceptingPdfAdded modelStub \u003d new ModelStubAcceptingPdfAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPdf).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPdf), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Arrays.asList(validPdf), modelStub.pdfsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void execute_duplicatePdf_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPdf);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPdf(validPdf);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PDF);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf samplePdf6 \u003d SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf samplePdf7 \u003d SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommandSamplePdf6 \u003d new AddCommand(samplePdf6);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommandSamplePdf7 \u003d new AddCommand(samplePdf7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(addCommandSamplePdf6.equals(addCommandSamplePdf6));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addDCommandCopy \u003d new AddCommand(samplePdf6);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(addCommandSamplePdf6.equals(addDCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(addCommandSamplePdf6.equals(addCommandSamplePdf7));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void executeUndoRedo_validFile_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfToAdd \u003d SAMPLE_PDF_8;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(pdfToAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(pdfToAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // add -\u003e first pdf deleted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        addCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all pdfs"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public Path getPdfBookFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdfBookFilePath(Path pdfBookFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdfBook(ReadOnlyPdfBook pdfBook) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void deletePdf(Pdf target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setPdf(Pdf target, Pdf editedPdf) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ObservableList\u003cPdf\u003e getFilteredPdfList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void updateFilteredPdfList(Predicate\u003cPdf\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean canUndoPdfBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean canRedoPdfBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void undoPdfBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void redoPdfBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void commitPdfBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyProperty\u003cPdf\u003e selectedPdfProperty() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public Pdf getSelectedPdf() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void setSelectedPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single pdf."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private class ModelStubWithPdf extends ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Pdf pdf;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        ModelStubWithPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.pdf \u003d pdf;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return this.pdf.isSamePdf(pdf);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the pdf being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private class ModelStubAcceptingPdfAdded extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        final ArrayList\u003cPdf\u003e pdfsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public boolean hasPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return pdfsAdded.stream().anyMatch(pdf::isSamePdf);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void addPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(pdf);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            pdfsAdded.add(pdf);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public void commitPdfBook() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        public ReadOnlyPdfBook getPdfBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            return new PdfBook();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 8,
      "WeiTangLau": 65,
      "-": 190,
      "jetkan-yk": 17
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/ClearCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class ClearCommandIntegrationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_clearModel_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdfBook(new PdfBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 34
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_emptyPdfBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                EMPTY_COMMAND_HISTORY, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_nonEmptyPdfBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdfBook(new PdfBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                EMPTY_COMMAND_HISTORY, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 38
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullFieldProvided_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new CommandResult(null, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_allFieldsProvided_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(commandResult.getFeedbackToUser(), \"feedback\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jetkan-yk": 18
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Error Handling Constants"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT \u003d \"Unexpected Exception thrown for valid input.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Name Constants"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_1_VALID \u003d \"CS2103T_PDF++_UG_Intro.pdf\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_2_VALID \u003d \"CS2103T_Week9_Integration Approaches.pdf\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_3_VALID \u003d \"CS2103T_Schedule_AY1819S2.pdf\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_1_DUPLICATE_VALID \u003d \"CS2103T_PDF++_UG_Intro.pdf\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_2_DUPLICATE_VALID \u003d \"CS2103T_Week9_Integration Approaches.pdf\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_INVALID_EXTENSION \u003d \"InvalidName.invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_INVALID_CHARACTERS \u003d \"abcd*.pdf\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_DESC_1_VALID \u003d \" \" + PREFIX_NAME + NAME_1_VALID;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_DESC_2_VALID \u003d \" \" + PREFIX_NAME + NAME_2_VALID;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String NAME_DESC_1_INVALID \u003d \" \" + PREFIX_NAME + NAME_INVALID_EXTENSION;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Directory Constants"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_1_VALID \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_2_VALID \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_3_VALID \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_1_DUPLICATE_VALID \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"DuplicateFiles\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_2_DUPLICATE_VALID \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"DuplicateFiles\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    .toAbsolutePath().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIR_INVALID_NONEXISTENT \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"definitelyNotARealDirectory\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DIRECTORY_DESC_1 \u003d \" \" + PREFIX_DIRECTORY + DIR_3_VALID;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //FilePath Constants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILEPATH_1_VALID \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(DIR_1_VALID, NAME_1_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILEPATH_2_VALID \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(DIR_2_VALID, NAME_2_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILEPATH_3_VALID \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(DIR_3_VALID, NAME_3_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILEPATH_1_DUPLICATE_VALID \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(DIR_1_DUPLICATE_VALID, NAME_1_DUPLICATE_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILEPATH_2_DUPLICATE_VALID \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(DIR_2_DUPLICATE_VALID, NAME_2_DUPLICATE_VALID).toAbsolutePath().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILE_DESC_1_PDF \u003d \" \" + PREFIX_FILE + FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILE_DESC_2_PDF \u003d \" \" + PREFIX_FILE + FILEPATH_2_VALID;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String FILE_DESC_PATH_INVALID \u003d \" \" + PREFIX_FILE + \"DefinitelyNotAFilePath\"; // not valid path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Size Constants"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String SIZE_1_VALID \u003d Long.toString(Paths.get(FILEPATH_1_VALID)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String SIZE_2_VALID \u003d Long.toString(Paths.get(FILEPATH_2_VALID)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String SIZE_3_VALID \u003d Long.toString(Paths.get(FILEPATH_3_VALID)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .toAbsolutePath().toFile().length());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String SIZE_INVALID_ALPHABET \u003d \"abcdef\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String SIZE_INVALID_NEGATIVE \u003d \"-20\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Deadline Constants"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DATE_1_VALID \u003d \"2019-10-03\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DATE_2_VALID \u003d \"2019-05-03\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DATE_INVALID_DATE \u003d \"2019-10-32\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DATE_USER_INPUT_INVALID \u003d \"13/04/2019\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DATE_USER_INPUT_VALID \u003d \"13-04-2019\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Password Constant"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String PASSWORD_1_VALID \u003d \"validPassword1\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String PROPERTY_SEPARATOR_PREFIX \u003d \"/\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_STATUS_NOTDONE \u003d \"false\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_STATUS_DONE \u003d \"true\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_STATUS_INVALID \u003d \"INVALID\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_NOT_DONE \u003d DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + DEADLINE_STATUS_NOTDONE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_DONE \u003d DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + DEADLINE_STATUS_DONE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX \u003d DATE_1_VALID + DEADLINE_STATUS_DONE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_MISSINGSTATUS \u003d DATE_2_VALID;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_INVALIDSTATUS \u003d DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + DEADLINE_STATUS_INVALID;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_JSON_INVALID_INVALID_DATE \u003d DATE_INVALID_DATE + PROPERTY_SEPARATOR_PREFIX"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            + DEADLINE_STATUS_NOTDONE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DEADLINE_DESC_VALID \u003d \" \" + PREFIX_DEADLINE_NEW + DATE_1_VALID;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Delete Constants"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DELETE_TYPE_SOFT \u003d \"soft\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DELETE_TYPE_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String DELETE_TYPE_INVALID \u003d \"invalidType\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Tag Constants"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_VALID_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_VALID_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_INVALID_FRIEND \u003d \"#friend\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_DESC_LECTURE \u003d \" \" + PREFIX_TAG_ADD + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_DESC_CS2103T \u003d \" \" + PREFIX_TAG_ADD + TAG_VALID_CS2103T;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String TAG_DESC_INVALID \u003d \" \" + PREFIX_TAG_ADD + \"moduleA*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String PASSWORD_DESC_VALID \u003d \" \" + PREFIX_PASSWORD + PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Preamble Constants"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Edit Command Descriptors"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final RenameCommand.EditPdfDescriptor DESC_1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final RenameCommand.EditPdfDescriptor DESC_2;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DESC_1 \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DESC_2 \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the pdf book, filtered pdf list and selected pdf in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook expectedPdfBook \u003d new PdfBook(actualModel.getPdfBook());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf expectedSelectedPdf \u003d actualModel.getSelectedPdf();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedPdfBook, actualModel.getPdfBook());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedSelectedPdf, actualModel.getSelectedPdf());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Convenience wrapper to {@link #assertMergeCommandSuccess(Pdf, Pdf, Model, CommandHistory,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * CommandResult, Model, CommandResult)}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * that takes a string {@code expectedMessage} for MergeCommand."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertMergeCommandSuccess(Pdf pdfToTest, Pdf mergedPdf, Model actualModel,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            CommandHistory actualCommandHistory, String expectedMessage,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Model expectedModel, CommandResult actualResult) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertMergeCommandSuccess(pdfToTest, mergedPdf, actualModel,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                actualCommandHistory, expectedCommandResult, expectedModel, actualResult);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertMergeCommandSuccess(Pdf pdfToTest, Pdf mergedPdf, Model actualModel,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            CommandHistory actualCommandHistory, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Model expectedModel, CommandResult actualResult) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(pdfToTest, mergedPdf);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCommandResult, actualResult);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the pdf at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code model}\u0027s pdf book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void showPdfAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdf \u003d model.getFilteredPdfList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final String[] splitName \u003d pdf.getName().getFullName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.updateFilteredPdfList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(1, model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Deletes the first pdf in {@code model}\u0027s filtered list from {@code model}\u0027s pdf book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void deleteFirstPdf(Model model) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.deletePdf(firstPdf);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.commitPdfBook();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 263
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/DeadlineCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidNegativeIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(-1), new Deadline(), DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeadlineCommand(null, new Deadline(), DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(1), null, DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullDeadlineAction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeadlineCommand(Index.fromZeroBased(1), new Deadline(), null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validNew_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            DeadlineCommand standardCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(LocalDate.now()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validDone_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            DeadlineCommand standardCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    DeadlineCommand.DeadlineAction.DONE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validRemove_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            DeadlineCommand standardCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    DeadlineCommand.DeadlineAction.REMOVE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand invalidCommand \u003d new DeadlineCommand(Index.fromZeroBased(model.getFilteredPdfList().size() + 1),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new Deadline(LocalDate.now()), DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        invalidCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_doneNonExistingDeadline_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand addCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(LocalDate.now()),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand doneCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.DONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand removeCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.REMOVE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        addCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        removeCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        doneCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_removeNonExistingDeadline_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand addCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(LocalDate.now()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand removeCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.REMOVE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        addCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        removeCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        removeCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final DeadlineCommand standardCommand \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeadlineCommand standardCommandCopy \u003d new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommandCopy));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new DeadlineCommand(Index.fromOneBased(2), new Deadline(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new DeadlineCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new Deadline(LocalDate.now()), DeadlineCommand.DeadlineAction.NEW)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different action -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new DeadlineCommand(Index.fromOneBased(1), new Deadline(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DeadlineCommand.DeadlineAction.DONE)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 152
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/DecryptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.DecryptCommand.MESSAGE_DECRYPT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.EncryptCommand.ENCRYPTION_KEY_LENGTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DecryptCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void before() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        initialiseTest(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void after() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        resetTestFile(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DecryptCommand((Index.fromZeroBased(-1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DecryptCommand((Index.fromZeroBased(model.getFilteredPdfList().size() + 1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(2)), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDecrypt \u003d SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DECRYPT_PDF_SUCCESS, pdfToDecrypt);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(decryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_fileAlreadyEncrypted_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf decryptedPdf \u003d SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DECRYPT_PDF_SUCCESS, decryptedPdf);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(decryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndexIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(decryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_encryptionDoesNotAllowUndoAndRedo_failure() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Encrypts {@code pdfToInitialise} if it is not encrypted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void initialiseTest(Pdf pdfToInitialise) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            AccessPermission ap \u003d new AccessPermission();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StandardProtectionPolicy spp \u003d new StandardProtectionPolicy(PASSWORD_1_VALID, PASSWORD_1_VALID, ap);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            spp.setEncryptionKeyLength(ENCRYPTION_KEY_LENGTH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            spp.setPermissions(ap);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.protect(spp);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Decrypts {@code pdfToReset} if it is encrypted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void resetTestFile(Pdf pdfToReset) throws CommandException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (pdfToReset.getIsEncrypted()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Model initialisationModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            CommandHistory initialisationCommandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            DecryptCommand decryptCommand \u003d new DecryptCommand(INDEX_SECOND_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            decryptCommand.execute(initialisationModel, initialisationCommandHistory);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 182
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeleteCommand(Index.fromZeroBased(model.getFilteredPdfList().size() + 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new DeleteCommand(Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validIndexUnfilteredListHard_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        saveBackup(pdfToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(pdfToDelete);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Paths.get(pdfToDelete.getDirectory().getDirectory(), pdfToDelete.getName().getFullName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .toFile().exists());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteHardCommand \u003d new DeleteCommand(outOfBoundIndex, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(deleteHardCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showNoPdf(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_validIndexFilteredListHard_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        saveBackup(pdfToDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS, pdfToDelete);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showNoPdf(expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(pdfToDelete);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Paths.get(pdfToDelete.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfToDelete.getName().getFullName()).toFile().exists());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteHardCommand \u003d new DeleteCommand(outOfBoundIndex, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(deleteHardCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // delete -\u003e first pdf deleted"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // undo -\u003e reverts pdfBook back to previous state and filtered pdf list to show all pdfs"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * 1. Deletes a {@code Pdf} from a filtered list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted pdf in the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the pdf object regardless of indexing."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePdfDeleted() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToDelete \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.deletePdf(pdfToDelete);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // delete -\u003e deletes second pdf in unfiltered pdf list / first pdf in filtered pdf list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all pdfs"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(pdfToDelete, model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // redo -\u003e deletes same second pdf in unfiltered pdf list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteHardFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteHardSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PDF, DeleteCommand.DeleteType.Hard);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteHardFirstCommand));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(deleteHardSecondCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Saves {@code pdfToDelete} as a backup"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void saveBackup(Pdf pdfToDelete) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            File testDir \u003d Paths.get(pdfToDelete.getDirectory().getDirectory(), \"Backup\").toFile();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            if (!testDir.exists()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                if (testDir.mkdir()) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    throw new IOException();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Files.copy(Paths.get(pdfToDelete.getDirectory().getDirectory(), pdfToDelete.getName().getFullName()),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    Paths.get(pdfToDelete.getDirectory().getDirectory(), \"Backup\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                            pdfToDelete.getName().getFullName()), StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new PdfNotFoundException();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Moves {@code pdfToRevert} back to its original location"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void revertBackup(Pdf pdfToRevert) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        File fileToRevert \u003d Paths.get(pdfToRevert.getDirectory().getDirectory(), \"Backup\","
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfToRevert.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        File revertedFile \u003d Paths.get(pdfToRevert.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfToRevert.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        fileToRevert.renameTo(revertedFile);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void showNoPdf(Model model) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.updateFilteredPdfList(p -\u003e false);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(model.getFilteredPdfList().isEmpty());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 278
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/EditPdfDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class EditPdfDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptorWithSameValues \u003d new EditPdfDescriptor(DESC_1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(DESC_1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(DESC_1.equals(DESC_1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(DESC_1.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(DESC_1.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(DESC_1.equals(DESC_2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand.EditPdfDescriptor editedA \u003d new EditPdfDescriptorBuilder(DESC_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(DESC_1.equals(editedA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        editedA \u003d new EditPdfDescriptorBuilder(DESC_1).withTags(TAG_VALID_LECTURE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(DESC_1.equals(editedA));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 42
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/EncryptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.DecryptCommand.MESSAGE_DECRYPT_PDF_FAILURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.EncryptCommand.MESSAGE_ENCRYPT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1_ENCRYPTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class EncryptCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void beforeClass() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        preAndPostProcessingTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void afterClass() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        preAndPostProcessingTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void before() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void after() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        initialiseTest(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(-1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(model.getFilteredPdfList().size() + 1)), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new EncryptCommand((Index.fromZeroBased(1)), null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToEncrypt \u003d new PdfBuilder(SAMPLE_PDF_1_ENCRYPTED).withDirectory(DIR_1_VALID).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, pdfToEncrypt);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(SAMPLE_PDF_1, pdfToEncrypt);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(encryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_fileAlreadyEncrypted_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf encryptedPdf \u003d SAMPLE_PDF_1_ENCRYPTED;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ENCRYPT_PDF_SUCCESS, encryptedPdf);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), encryptedPdf);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(encryptCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndexIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(outOfBoundIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(encryptCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_encryptionDoesNotAllowUndoAndRedo_failure() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EncryptCommand encryptCommand \u003d new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        encryptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Decrypts {@code pdfToInitialise} if it is encrypted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void initialiseTest(Pdf pdfToInitialise) throws CommandException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToInitialise.getName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Set {code pdfToInitialise} to be decrypted"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static void preAndPostProcessingTest(Pdf pdfToInitialise) throws CommandException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.save(Paths.get(pdfToInitialise.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToInitialise.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToInitialise.getName()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 194
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_PDFS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_zeroKeywords_noPdfFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PDFS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPdfList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_multipleKeywords_multiplePdfsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PDFS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"UG, Greedy\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.updateFilteredPdfList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(Arrays.asList(SAMPLE_PDF_3), model.getFilteredPdfList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "jetkan-yk": 22
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // both encrypt and decrypt won\u0027t be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        history.add(\"encrypt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        history.add(\"decrypt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "jetkan-yk": 9
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "jetkan-yk": 12
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/MergeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertMergeCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.DecryptCommand.MESSAGE_DECRYPT_PDF_FAILURE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.EncryptCommand.ENCRYPTION_KEY_LENGTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_THIRD_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_MERGED_1_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class MergeCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_SUCCESS \u003d \"Merged PDFs into new PDF:\\n%1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String MESSAGE_MERGE_PDF_ENCRYPT \u003d \"One or more of selected PDFs is encrypted.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void before() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new MergeCommand(Index.fromZeroBased(-1), Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        CommandResult result \u003d mergeCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MERGE_PDF_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                model.getFilteredPdfList().get(3));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf newMergedPdf \u003d model.getFilteredPdfList().get(3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToTest \u003d new PdfBuilder(SAMPLE_PDF_MERGED_1_2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withName(newMergedPdf.getName().getFullName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withDirectory(newMergedPdf.getDirectory().getDirectory())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.addPdf(pdfToTest);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertMergeCommandSuccess(pdfToTest, newMergedPdf, model,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                commandHistory, expectedMessage, expectedModel, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deletePdf(newMergedPdf);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_encryptedFile_failure() throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        encryptPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d MESSAGE_MERGE_PDF_ENCRYPT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(mergeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        decryptPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidPdfIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index validIndex \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(outOfBoundIndex, validIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(mergeCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final MergeCommand standardCommand \u003d new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF, INDEX_THIRD_PDF);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        MergeCommand standardCommandCopy \u003d new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF, INDEX_THIRD_PDF);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Encrypts {@code pdfToEncrypt}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @SuppressWarnings(\"Duplicates\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static void encryptPdf(Pdf pdfToEncrypt) throws CommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            PDDocument file \u003d PDDocument.load(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            AccessPermission ap \u003d new AccessPermission();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            StandardProtectionPolicy spp \u003d new StandardProtectionPolicy(PASSWORD_1_VALID, PASSWORD_1_VALID, ap);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            spp.setEncryptionKeyLength(ENCRYPTION_KEY_LENGTH);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            spp.setPermissions(ap);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.protect(spp);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.save(Paths.get(pdfToEncrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToEncrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Decrypts {code pdfToDecrypt}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static void decryptPdf(Pdf pdfToDecrypt) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            PDDocument file \u003d PDDocument.load(new File(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()), PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.setAllSecurityToBeRemoved(true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.save(Paths.get(pdfToDecrypt.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    pdfToDecrypt.getName().getFullName()).toFile());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DECRYPT_PDF_FAILURE, pdfToDecrypt.getName()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Deletes {code pdfToDelete} that was generated from the test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static void deletePdf(Pdf pdfToDelete) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Paths.get(pdfToDelete.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfToDelete.getName().getFullName()).toFile().delete();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 174
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.deleteFirstPdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.undoPdfBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 49
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/RenameCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DESC_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DESC_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.RenameCommand.MESSAGE_DUPLICATE_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.RenameCommand.MESSAGE_DUPLICATE_PDF_DIRECTORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_EDITEDPDF;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * and unit tests for RenameCommand."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class RenameCommandTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void before() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        initialiseTest(SAMPLE_EDITEDPDF);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new RenameCommand(Index.fromZeroBased(-1), new EditPdfDescriptorBuilder(SAMPLE_PDF_1).build());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullPdfDescriptorBuilder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new RenameCommand(Index.fromZeroBased(1), null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_onlyCompulsoryFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(\"Test.pdf\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withName(\"Test.pdf\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_FIRST_PDF, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(RenameCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), editedPdf);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(renameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(SAMPLE_PDF_1, editedPdf);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index indexLastPdf \u003d Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf lastPdf \u003d model.getFilteredPdfList().get(indexLastPdf.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBuilder pdfInList \u003d new PdfBuilder(lastPdf);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d pdfInList.withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(SAMPLE_EDITEDPDF.getName().getFullName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(indexLastPdf, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(RenameCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(renameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(lastPdf, editedPdf);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_fileWithSameName_throwsCommandException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf secondPdf \u003d model.getFilteredPdfList().get(Index.fromOneBased(2).getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(secondPdf.getName().getFullName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(Index.fromZeroBased(1), descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                secondPdf.getName().getFullName(), firstPdf.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_FIRST_PDF, new EditPdfDescriptor());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DUPLICATE_PDF;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfInFilteredList \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(pdfInFilteredList).withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_FIRST_PDF, new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withName(SAMPLE_EDITEDPDF.getName().getFullName()).build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(RenameCommand.MESSAGE_EDIT_PDF_SUCCESS, editedPdf);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PdfBook(model.getPdfBook()), new UserPrefs());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(model.getFilteredPdfList().get(0), editedPdf);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(renameCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(pdfInFilteredList, editedPdf);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_duplicatePdfUnfilteredList_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf firstPdf \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder(firstPdf).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_SECOND_PDF, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                firstPdf.getName().getFullName(), SAMPLE_PDF_2.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_duplicatePdfFilteredList_failure() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // edit pdf in filtered list into a duplicate in pdf book"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfInList \u003d model.getPdfBook().getPdfList().get(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_FIRST_PDF,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new EditPdfDescriptorBuilder(pdfInList).build());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, String.format(MESSAGE_DUPLICATE_PDF_DIRECTORY,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfInList.getName().getFullName(), SAMPLE_PDF_2.getDirectory().getDirectory()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidPdfIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * but smaller than size of pdf book"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidPdfIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(SAMPLE_EDITEDPDF.getName().getFullName()).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdfToEdit \u003d model.getFilteredPdfList().get(INDEX_FIRST_PDF.getZeroBased());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor editPdfDescriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withName(editedPdf.getName().getFullName()).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(INDEX_FIRST_PDF, editPdfDescriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setPdf(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.commitPdfBook();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // edit -\u003e first pdf deleted"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        renameCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // undo -\u003e reverts pdfbook back to previous state and filtered pdf list to show all pdfs"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // redo -\u003e same first pdf deleted again"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.redoPdfBook();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        revertBackup(pdfToEdit, editedPdf);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand renameCommand \u003d new RenameCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // execution failed -\u003e pdf book state not added into model"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(renameCommand, model, commandHistory, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single pdf book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final RenameCommand standardCommand \u003d new RenameCommand(INDEX_FIRST_PDF, DESC_2);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        EditPdfDescriptor copyDescriptor \u003d new EditPdfDescriptor(DESC_2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        RenameCommand commandWithSameValues \u003d new RenameCommand(INDEX_FIRST_PDF, copyDescriptor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new RenameCommand(INDEX_SECOND_PDF, DESC_2)));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new RenameCommand(INDEX_FIRST_PDF, DESC_1)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Initialises the files for th test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void initialiseTest(Pdf target) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (Paths.get(target.getDirectory().getDirectory() , target.getName().getFullName()).toFile().exists()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Files.delete(Paths.get(target.getDirectory().getDirectory() + \"\\\\\" + target.getName()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                System.out.println(\"The test is already at initialised state\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Moves {@code editedFile} back to its original location"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void revertBackup(Pdf target, Pdf editedFile) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        File fileToRevert \u003d Paths.get(editedFile.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                editedFile.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        File revertedFile \u003d Paths.get(target.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                target.getName().getFullName()).toFile();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        fileToRevert.renameTo(revertedFile);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 291
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.showPdfAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_THIRD_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index lastPdfIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PDF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionSuccess(lastPdfIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPdfList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(model, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfAtIndex(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pdf book list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PDF);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * and checks that the model\u0027s selected pdf is set to the pdf at {@code index} in the filtered pdf list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PDF_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.setSelectedPdf(model.getFilteredPdfList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "jetkan-yk": 38
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidNullComparator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new SortCommand(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 17
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/TagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new TagCommand(Index.fromZeroBased(-1), new HashSet\u003c\u003e(), true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new TagCommand(null, new HashSet\u003c\u003e(), true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor_nullTags_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        new TagCommand(Index.fromOneBased(1), null, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_valid_successful() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        HashSet\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        validTags.add(new Tag(TAG_VALID_LECTURE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // add valid tag should execute successfully"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            TagCommand standardCommand \u003d new TagCommand(Index.fromOneBased(1), validTags, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        HashSet\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        validTags.add(new Tag(TAG_VALID_LECTURE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagCommand standardCommand \u003d new TagCommand(Index.fromOneBased(20), validTags, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_nonExistingTag_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        HashSet\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        validTags.add(new Tag(TAG_VALID_LECTURE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagCommand standardCommand \u003d new TagCommand(Index.fromOneBased(1), validTags, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute_invalidIndex_throwsInvalidException() throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        HashSet\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        validTags.add(new Tag(TAG_VALID_LECTURE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(IndexOutOfBoundsException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagCommand standardCommand \u003d new TagCommand(Index.fromOneBased(0), validTags, true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        standardCommand.execute(this.model, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final TagCommand standardCommand \u003d new TagCommand(Index.fromOneBased(1), new HashSet\u003c\u003e(), true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagCommand standardCommandCopy \u003d new TagCommand(Index.fromOneBased(1), new HashSet\u003c\u003e(), true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(standardCommand.equals(new TagCommand(Index.fromOneBased(2), new HashSet\u003c\u003e(), true)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 115
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.deleteFirstPdf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalPdfBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteFirstPdf(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedModel.undoPdfBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 45
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIRECTORY_DESC_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_2_PDF;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_PATH_INVALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1_TOADD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_onlyFileFieldPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf expectedPdf \u003d SAMPLE_PDF_1_TOADD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FILE_DESC_1_PDF, new AddCommand(expectedPdf));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FILE_DESC_2_PDF + FILE_DESC_1_PDF,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                new AddCommand(expectedPdf));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_additionalFieldsPresent_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF + TAG_DESC_CS2103T, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + DEADLINE_DESC_VALID, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF + NAME_DESC_1_VALID, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + DIRECTORY_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_2_PDF + TAG_DESC_CS2103T + DEADLINE_JSON_NOT_DONE + NAME_DESC_1_VALID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + DIRECTORY_DESC_1, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_compulsoryFileFieldMissing_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // missing file prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_1_VALID, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DIR_1_VALID,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        // invalid file path"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_PATH_INVALID, ParserUtil.MESSAGE_FILE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "WeiTangLau": 20,
      "-": 22,
      "jetkan-yk": 22
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/DeadlineCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DATE_USER_INPUT_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DATE_USER_INPUT_VALID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DeadlineCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String VALID_DEADLINE_ADD \u003d \"1 \" + PREFIX_DEADLINE_NEW + DATE_USER_INPUT_VALID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String VALID_DEADLINE_DONE \u003d \"1 \" + PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String VALID_DEADLINE_REMOVE \u003d \"1 \" + PREFIX_DEADLINE_REMOVE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String INVALID_DEADLINE_MULTIPLE_ACTIONS \u003d VALID_DEADLINE_ADD + \" \" + PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String INVALID_DEADLINE_PREAMBLE \u003d \" \" + PREFIX_DEADLINE_DONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String INVALID_DEADLINE_DATE \u003d \"1 \" + PREFIX_DEADLINE_NEW + DATE_USER_INPUT_INVALID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String INVALID_DEADLINE_ACTION \u003d \"1 \" + \"d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String NO_DEADLINE_ACTION \u003d \"1 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private DeadlineCommandParser parser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_validDeadlineNew_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            parser.parse(VALID_DEADLINE_ADD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_validDeadlineDone_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            parser.parse(VALID_DEADLINE_DONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_validDeadlineRemove_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            parser.parse(VALID_DEADLINE_REMOVE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_invalidDeadlineCliDescription_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        parser.parse(INVALID_DEADLINE_MULTIPLE_ACTIONS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_invalidPreamble_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        parser.parse(INVALID_DEADLINE_PREAMBLE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_invalidDate_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        parser.parse(INVALID_DEADLINE_DATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_invalidDeadlineAction_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        parser.parse(INVALID_DEADLINE_ACTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void parse_noDeadlineAction_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        parser.parse(NO_DEADLINE_ACTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "jetkan-yk": 84
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/DecryptCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class DecryptCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            DecryptCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private DecryptCommandParser parser \u003d new DecryptCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no prefix and password"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PASSWORD_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PREFIX_PASSWORD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand expectedCommand \u003d new DecryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_VALID + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand expectedCommand \u003d new DecryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 71,
      "jetkan-yk": 13
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PDF));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidArguments_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 SEROCKS\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 hard redundantTest\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + DEADLINE_DESC_VALID + PASSWORD_DESC_VALID,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + DEADLINE_DESC_VALID + TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + DEADLINE_DESC_VALID + FILE_DESC_1_PDF,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeleteCommand expectedCommand \u003d new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "WeiTangLau": 24,
      "-": 16,
      "jetkan-yk": 11
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/EncryptCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class EncryptCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            EncryptCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private EncryptCommandParser parser \u003d new EncryptCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no prefix and password"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PASSWORD_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no password"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + PREFIX_PASSWORD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PASSWORD_DESC_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + targetIndex.getOneBased() + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand expectedCommand \u003d new EncryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_VALID + PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand expectedCommand \u003d new EncryptCommand(targetIndex, PASSWORD_1_VALID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 73,
      "jetkan-yk": 14
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/MergeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_DESC_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_DESC_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class MergeCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            MergeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private MergeCommandParser parser \u003d new MergeCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantPrefixes_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant file prefix"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant name prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant password prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, PASSWORD_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // redundant date prefix"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, DEADLINE_DESC_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_fieldCorrectlySpecified_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d \"\" + firstIndex.getOneBased();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_moreThanOneIndexSpecified_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d firstIndex.getOneBased() + \" \" + secondIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_repeatedIndexSpecified_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index firstIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index secondIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d firstIndex.getOneBased() + \" \" + secondIndex.getOneBased();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand expectedCommand \u003d new MergeCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 77,
      "jetkan-yk": 10
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String INVALID_NAME \u003d \"invalidPdfName\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String INVALID_FILE \u003d \"invalid\\\\path\\\\abc.pdf\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String INVALID_DIRECTORY \u003d \"invalid\\\\path\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String INVALID_DEADLINE \u003d \"22-22-2020\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_NAME \u003d \"validPdfName.pdf\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_FILE \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            \"SampleFiles\", \"NormalFiles\", \"GitCheatSheet.pdf\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_DIRECTORY \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            \"SampleFiles\", \"NormalFiles\").toAbsolutePath().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_DEADLINE_JSON \u003d \"2020-11-11/false\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String VALID_DEADLINE_INPUT \u003d \"11-11-2020\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(INDEX_FIRST_PDF, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(INDEX_FIRST_PDF, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseFile_invalidValue_throwsParserException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFile(INVALID_FILE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseFile_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFile((String) null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseFile_validValueWithoutWhitespace_returnsFile() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File expectedFile \u003d new File(VALID_FILE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedFile, ParserUtil.parseFile(VALID_FILE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseFile_validValueWithWhitespace_returnsTrimmedFile() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String fileWithWhitespace \u003d WHITESPACE + VALID_FILE + WHITESPACE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        File expectedFile \u003d new File(VALID_FILE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedFile, ParserUtil.parseFile(fileWithWhitespace));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDirectory_invalidValue_throwsParserException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDirectory(INVALID_DIRECTORY));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDirectory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDirectory((String) null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDirectory_validValueWithoutWhitespace_returnsFile() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Directory expectedFile \u003d new Directory(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedFile, ParserUtil.parseDirectory(VALID_DIRECTORY));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDirectory_validValueWithWhitespace_returnsTrimmedFile() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String directoryWithWhitespace \u003d WHITESPACE + VALID_DIRECTORY + WHITESPACE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Directory expectedDirectory \u003d new Directory(VALID_DIRECTORY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedDirectory, ParserUtil.parseDirectory(directoryWithWhitespace));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParserException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline(INVALID_DEADLINE));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDeadline_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDeadline((String) null));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsFile() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE_JSON);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(VALID_DEADLINE_INPUT));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedFile() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String deadlineWithWhitespace \u003d WHITESPACE + VALID_DEADLINE_INPUT + WHITESPACE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DEADLINE_JSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedDeadline, ParserUtil.parseDeadline(deadlineWithWhitespace));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 58,
      "-": 143,
      "jetkan-yk": 9
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/PdfBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DIRECTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_DEADLINE_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_DEADLINE_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_NAME_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_NAME_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_SIZE_ASCENDING_PDFS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.COMPARATOR_SIZE_DESCENDING_PDFS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_THIRD_PDF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.MoveCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfUtil;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "public class PdfBookParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String DEADLINE_NEWLY_ADDED_FILE \u003d \"NEWLY ADDED\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private final PdfBookParser parser \u003d new PdfBookParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder(SAMPLE_PDF_1).withDeadline(DEADLINE_NEWLY_ADDED_FILE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PdfUtil.getAddCommand(pdf));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(pdf), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_deadline() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdf \u003d SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DeadlineCommand command \u003d (DeadlineCommand) parser.parseCommand(PdfUtil.getDeadlineCommand(pdf, 2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new DeadlineCommand(INDEX_SECOND_PDF, pdf.getDeadline(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                DeadlineCommand.DeadlineAction.NEW), command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_decrypt() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        DecryptCommand command \u003d (DecryptCommand) parser.parseCommand(PdfUtil.getDecryptCommand(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new DecryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PDF), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .withName(pdf.getName().getFullName()).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand command \u003d (RenameCommand) parser.parseCommand(RenameCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + INDEX_FIRST_PDF.getOneBased() + \" \" + PdfUtil.getRenamePdfDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new RenameCommand(INDEX_FIRST_PDF, descriptor), command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_encrypt() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        EncryptCommand command \u003d (EncryptCommand) parser.parseCommand(PdfUtil.getEncryptCommand(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new EncryptCommand(INDEX_FIRST_PDF, PASSWORD_1_VALID), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        FilterCommand command \u003d (FilterCommand) parser.parseCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PdfUtil.getFilterCommand(SAMPLE_PDF_2.getTags()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new FilterCommand(new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                Arrays.asList(\"w9\", \"CS2103T\", \"lecture\"))), command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_open() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        OpenCommand command \u003d (OpenCommand) parser.parseCommand(OpenCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new OpenCommand(INDEX_FIRST_PDF), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_move() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MoveCommand command \u003d (MoveCommand) parser.parseCommand(MoveCommand.COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + PREFIX_DIRECTORY + DIR_1_VALID);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new MoveCommand(INDEX_FIRST_PDF, SAMPLE_PDF_1.getDirectory()), command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_tag() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        TagCommand command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + PdfUtil.getAddTag(SAMPLE_PDF_2.getTags()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new TagCommand(INDEX_FIRST_PDF, SAMPLE_PDF_2.getTags(), true), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (TagCommand) parser.parseCommand(TagCommand.COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                + PdfUtil.getRemoveTag(SAMPLE_PDF_2.getTags()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new TagCommand(INDEX_FIRST_PDF, SAMPLE_PDF_2.getTags(), false), command);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" name up\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_NAME_ASCENDING_PDFS), command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" name down\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_NAME_DESCENDING_PDFS), command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" deadline up\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_DEADLINE_ASCENDING_PDFS), command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" deadline down\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_DEADLINE_DESCENDING_PDFS), command);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" size up\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_SIZE_ASCENDING_PDFS), command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                SortCommand.COMMAND_WORD + \" size down\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new SortCommand(COMPARATOR_SIZE_DESCENDING_PDFS), command);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lormee94"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PDF), command);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parseCommand_merge() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        MergeCommand command \u003d (MergeCommand) parser.parseCommand(MergeCommand.COMMAND_WORD + \" \" + \"1 2 3\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(new MergeCommand(INDEX_FIRST_PDF, INDEX_SECOND_PDF, INDEX_THIRD_PDF), command);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 4,
      "ptvrajsk": 1,
      "WeiTangLau": 98,
      "-": 95,
      "jetkan-yk": 44
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/RenameCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILE_DESC_1_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_DESC_1_INVALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_DESC_1_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.EditPdfDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class RenameCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private RenameCommandParser parser \u003d new RenameCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, NAME_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\", RenameCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_NAME, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-1 \" + NAME_1_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public void parse_containsIrrelevantParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + DEADLINE_JSON_NOT_DONE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + TAG_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + TAG_EMPTY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 \" + NAME_DESC_1_VALID + FILE_DESC_1_PDF, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_2_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_2_VALID, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1 se/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_1_INVALID, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_NAME + NAME_1_VALID;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                .withName(NAME_1_VALID).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand expectedCommand \u003d new RenameCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1_VALID + NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand expectedCommand \u003d new RenameCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1_INVALID + NAME_DESC_2_VALID;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand.EditPdfDescriptor descriptor \u003d new EditPdfDescriptorBuilder().withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        RenameCommand expectedCommand \u003d new RenameCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 40,
      "-": 51,
      "jetkan-yk": 25
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PDF));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "-": 22,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/logic/parser/TagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_DESC_INVALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_INVALID_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String VALID_TAG_ADD \u003d \"1 \" + CliSyntax.PREFIX_TAG_ADD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + CliSyntax.PREFIX_TAG_NAME.toString() + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String VALID_TAG_REMOVE \u003d \"1 \" + CliSyntax.PREFIX_TAG_REMOVE + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + CliSyntax.PREFIX_TAG_NAME.toString() + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String INVALID_TAG \u003d \" 1 \" + CliSyntax.PREFIX_TAG_ADD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + CliSyntax.PREFIX_TAG_NAME.toString() + TAG_INVALID_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String INVALID_TAG_PREAMBLE \u003d \" \" + CliSyntax.PREFIX_TAG_ADD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + CliSyntax.PREFIX_TAG_NAME.toString() + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private static final String INVALID_TAG_TYPE \u003d \" \" + \"-e\" + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            + CliSyntax.PREFIX_TAG_NAME.toString() + TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_validTagAdd_success() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            parser.parse(VALID_TAG_ADD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_validTagRemove_success() throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            parser.parse(VALID_TAG_REMOVE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_invalidTagCliDescription_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        parser.parse(TAG_DESC_INVALID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_invalidPreamble_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        parser.parse(INVALID_TAG_PREAMBLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_invalidTag_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        parser.parse(INVALID_TAG);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    public void parse_invalidTagType_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        parser.parse(INVALID_TAG_TYPE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 62,
      "WeiTangLau": 10,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.Model.PREDICATE_SHOW_ALL_PDFS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new PdfBook(), new PdfBook(modelManager.getPdfBook()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(null, modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"pdf/book/file/value\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"new/pdf/book/file/value\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdfBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdfBookFilePath(null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdfBookFilePath_validPath_setsPdfBookFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Path path \u003d Paths.get(\"pdf/book/file/value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdfBookFilePath(path);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(path, modelManager.getPdfBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void addPdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void addPdf_validPdf_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model sampleModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(modelManager, sampleModelManager);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.hasPdf(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_existingPdf_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(modelManager.hasPdf(SAMPLE_PDF_2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void deletePdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.deletePdf(null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void deletePdf_deleteExistingPdf_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.deletePdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(modelManager, new ModelManager());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdf(SAMPLE_PDF_1, null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdf(null, SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_pdfDoesNotExist_throwsPdfNotFoundException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdf(SAMPLE_PDF_1, SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_replaceExistingPdf_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setPdf(SAMPLE_PDF_1, SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model sampleModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.addPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(modelManager, sampleModelManager);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void updateFilteredPdfList_filteredByTag_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model sampleModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.addPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid Tag"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.updateFilteredPdfList(x -\u003e x.getTags().contains(new Tag(\"CS2103T\")));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(modelManager.getFilteredPdfList(), sampleModelManager.getFilteredPdfList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid Tag"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.updateFilteredPdfList(x -\u003e x.getTags().contains(new Tag(\"SERocks\")));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.updateFilteredPdfList(x -\u003e x.getTags().contains(new Tag(\"SERocks\")));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(modelManager.getFilteredPdfList(), sampleModelManager.getFilteredPdfList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setSelectedPdf_pdfDoesNotExist_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setSelectedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setSelectedPdf_pdfExist_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setSelectedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Model sampleModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.addPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sampleModelManager.setSelectedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(sampleModelManager.getSelectedPdf(), modelManager.getSelectedPdf());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook pdfBook \u003d new PdfBookBuilder().withPdf(SAMPLE_PDF_1).withPdf(SAMPLE_PDF_2).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook differentPdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager \u003d new ModelManager(pdfBook, userPrefs);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(pdfBook, userPrefs);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different selected pdf -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setSelectedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same filtered pdf list -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.updateFilteredPdfList(x -\u003e x.getTags().contains(new Tag(\"CS2103T\")));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManagerCopy.updateFilteredPdfList(x -\u003e x.getTags().contains(new Tag(\"CS2103T\")));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same selected pdf -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.setSelectedPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManagerCopy.setSelectedPdf(SAMPLE_PDF_2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdfBook -\u003e returns false"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPdfBook, userPrefs)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String[] keywords \u003d {\"CS2103T\", \"w9\"};"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.updateFilteredPdfList(new TagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pdfBook, userPrefs)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        modelManager.updateFilteredPdfList(PREDICATE_SHOW_ALL_PDFS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        differentUserPrefs.setPdfBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pdfBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 233
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/PdfBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class PdfBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(Collections.emptyList(), pdfBook.getPdfList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void resetData_withValidReadOnlyPdfBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook newData \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(newData, pdfBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void resetData_withDuplicatePdfs_throwsDuplicatePdfException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Two pdfs with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_7).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e newPdfs \u003d Arrays.asList(SAMPLE_PDF_7, editedPdf);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBookStub newData \u003d new PdfBookStub(newPdfs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.hasPdf(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_pdfNotInPdfBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(pdfBook.hasPdf(SAMPLE_PDF_7));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_pdfInPdfBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addPdf(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(pdfBook.hasPdf(SAMPLE_PDF_7));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void hasPdf_pdfWithSameIdentityFieldsInPdfBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addPdf(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_7).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(pdfBook.hasPdf(editedPdf));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void getPdfList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.getPdfList().remove(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addListener(listener);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addPdf(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.removeListener(listener);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addPdf(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * A stub ReadOnlyPdfBook whose pdfs list can violate interface constraints."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static class PdfBookStub implements ReadOnlyPdfBook {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        private final ObservableList\u003cPdf\u003e pdfs \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBookStub(Collection\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.pdfs.setAll(pdfs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public ObservableList\u003cPdf\u003e getPdfList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            return pdfs;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 139
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdfBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setPdfBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/VersionedPdfBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class VersionedPdfBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final ReadOnlyPdfBook pdfBookWithSample7 \u003d new PdfBookBuilder().withPdf(SAMPLE_PDF_7).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final ReadOnlyPdfBook pdfBookWithSample6 \u003d new PdfBookBuilder().withPdf(SAMPLE_PDF_6).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final ReadOnlyPdfBook pdfBookWithSample5 \u003d new PdfBookBuilder().withPdf(SAMPLE_PDF_5).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final ReadOnlyPdfBook emptyPdfBook \u003d new PdfBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void commit_singlePdfBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(emptyPdfBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(emptyPdfBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void commit_multiplePdfBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Arrays.asList(emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfBookWithSample6,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void commit_multiplePdfBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(emptyPdfBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canUndo_multiplePdfBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canUndo_multiplePdfBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canUndo_singlePdfBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(emptyPdfBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canUndo_multiplePdfBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canRedo_multiplePdfBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canRedo_multiplePdfBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canRedo_singlePdfBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(emptyPdfBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void canRedo_multiplePdfBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void undo_multiplePdfBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(emptyPdfBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfBookWithSample7,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(pdfBookWithSample6));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void undo_multiplePdfBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Arrays.asList(pdfBookWithSample7, pdfBookWithSample6));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void undo_singlePdfBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(emptyPdfBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertThrows(VersionedPdfBook.NoUndoableStateException.class, versionedPdfBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void undo_multiplePdfBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertThrows(VersionedPdfBook.NoUndoableStateException.class, versionedPdfBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void redo_multiplePdfBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Arrays.asList(emptyPdfBook, pdfBookWithSample7),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfBookWithSample6,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void redo_multiplePdfBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        versionedPdfBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertPdfBookListStatus(versionedPdfBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(emptyPdfBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfBookWithSample7,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(pdfBookWithSample6));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void redo_singlePdfBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(emptyPdfBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertThrows(VersionedPdfBook.NoRedoableStateException.class, versionedPdfBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void redo_multiplePdfBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                emptyPdfBook, pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertThrows(VersionedPdfBook.NoRedoableStateException.class, versionedPdfBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d preparePdfBookList(pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook copy \u003d preparePdfBookList(pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(versionedPdfBook.equals(versionedPdfBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook differentPdfBookList \u003d preparePdfBookList(pdfBookWithSample6, pdfBookWithSample5);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.equals(differentPdfBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook differentCurrentStatePointer \u003d preparePdfBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                pdfBookWithSample7, pdfBookWithSample6);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedPdfBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts that {@code versionedPdfBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * states before {@code versionedPdfBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * and states after {@code versionedPdfBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void assertPdfBookListStatus(VersionedPdfBook versionedPdfBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                                         List\u003cReadOnlyPdfBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                                         ReadOnlyPdfBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                                         List\u003cReadOnlyPdfBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new PdfBook(versionedPdfBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        while (versionedPdfBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (ReadOnlyPdfBook expectedPdfBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedPdfBook, new PdfBook(versionedPdfBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (ReadOnlyPdfBook expectedPdfBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertEquals(expectedPdfBook, new PdfBook(versionedPdfBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(versionedPdfBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedPdfBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Creates and returns a {@code VersionedPdfBook} with the {@code pdfBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code VersionedPdfBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private VersionedPdfBook preparePdfBookList(ReadOnlyPdfBook... pdfBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(pdfBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        VersionedPdfBook versionedPdfBook \u003d new VersionedPdfBook(pdfBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (int i \u003d 1; i \u003c pdfBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.resetData(pdfBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return versionedPdfBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Shifts the {@code versionedPdfBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedPdfBook versionedPdfBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            versionedPdfBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 298
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/DeadlineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DATE_1_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DATE_2_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_INVALIDSTATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_INVALID_DATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_MISSINGSTATUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_STATUS_DONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_STATUS_NOTDONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PROPERTY_SEPARATOR_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Deadline.STATUS_DONE_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Deadline.STATUS_NONE_PREFIX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Deadline.STATUS_ONGOING_PREFIX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Deadline.TOSTRING_HEADER_PREFIX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.MissingFormatArgumentException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void jsonConstructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // missing status -\u003e expected to throw MissingFormatArgumentException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                MissingFormatArgumentException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_MISSINGSTATUS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid status -\u003e expected to throw AssertionError"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                AssertionError.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_INVALIDSTATUS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // missing property seperator -\u003e expected to throw DateTimeParseException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                MissingFormatArgumentException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_MISSINGSEPERATORPREFIX));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid date -\u003e expected to throw dateTimeParseException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                DateTimeParseException.class, () -\u003e new Deadline(DEADLINE_JSON_INVALID_INVALID_DATE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid date -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Deadline(DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void normalConstructor() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid date -\u003e expected to throw DateTimeParseException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(DateTimeParseException.class, () -\u003e new Deadline(31, 2, 2012));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid date -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Deadline(Integer.parseInt(DATE_1_VALID.split(\"-\")[2]),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    Integer.parseInt(DATE_1_VALID.split(\"-\")[1]),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    Integer.parseInt(DATE_1_VALID.split(\"-\")[0]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid deadline with no parameters -\u003e expected to Not throw any Exceptions"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Deadline();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same deadline value, different objects -\u003e expect true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Deadline(DEADLINE_JSON_DONE).equals(new Deadline(DEADLINE_JSON_DONE)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Deadline(DEADLINE_JSON_DONE).equals(new Deadline(DEADLINE_JSON_NOT_DONE)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same dates different status -\u003e expected false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_DONE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .equals(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_NOTDONE)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different date same status -\u003e expected false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Deadline(DATE_2_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_DONE)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .equals(new Deadline(DATE_1_VALID + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_DONE)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // no deadline -\u003e expected None prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new StringBuilder(TOSTRING_HEADER_PREFIX).append(STATUS_NONE_PREFIX).toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new Deadline().toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // existing deadline complete prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Deadline(DEADLINE_JSON_DONE).toString(), new StringBuilder(TOSTRING_HEADER_PREFIX)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(String.format(DATE_2_VALID, \"dd-mm-yyyy\")).append(STATUS_DONE_PREFIX).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // existing deadline ongoing prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Deadline(DEADLINE_JSON_NOT_DONE).toString(), new StringBuilder(TOSTRING_HEADER_PREFIX)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(String.format(DATE_1_VALID, \"dd-mm-yyyy\")).append(STATUS_ONGOING_PREFIX).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toJsonString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // input to output conversion -\u003e expect same result"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Deadline(DEADLINE_JSON_NOT_DONE).toJsonString(), DEADLINE_JSON_NOT_DONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different date -\u003e expected fail"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(new Deadline(DEADLINE_JSON_NOT_DONE).toJsonString(), DATE_2_VALID"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_NOTDONE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different status -\u003e expected fail"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(new Deadline(DEADLINE_JSON_NOT_DONE).toJsonString(), DATE_1_VALID"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                + PROPERTY_SEPARATOR_PREFIX + DEADLINE_STATUS_DONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void exists() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank deadline -\u003e expected false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Deadline().exists());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        //existing deadline value, status not done -\u003e expected true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Deadline(DEADLINE_JSON_NOT_DONE).exists());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        //existing deadline value, status done -\u003e expected true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Deadline(DEADLINE_JSON_DONE).exists());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set done expected to work on valid deadline"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Deadline.setDone(new Deadline()).isDone());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set done expected to work on deadline that is not done"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Deadline.setDone(new Deadline(DEADLINE_JSON_NOT_DONE)).isDone());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set done expected to work on deadline that is already done"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Deadline.setDone(new Deadline(DEADLINE_JSON_DONE)).isDone());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setRemove() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set remove expected to work on empty deadline"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(Deadline.setRemove(new Deadline()).exists());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set remove expected to work on deadline that is done"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(Deadline.setRemove(new Deadline(DEADLINE_JSON_DONE)).exists());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // set remove expected to work on deadline that is not done"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(Deadline.setRemove(new Deadline(DEADLINE_JSON_NOT_DONE)).exists());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 166
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/DirectoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_DUPLICATE_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_2_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_INVALID_NONEXISTENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DirectoryTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Directory(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank value -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank space value -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Non existent directory -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Directory(DIR_INVALID_NONEXISTENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Correct Directory -\u003e should not throw Exceptions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Directory(DIR_1_VALID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e expected false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Directory(DIR_1_VALID).equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different directories -\u003e expected true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Directory(DIR_1_VALID).equals(new Directory(DIR_1_DUPLICATE_VALID)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same objects -\u003e expected true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Directory d \u003d new Directory(DIR_1_VALID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(d.equals(d));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values, different object -\u003e expected true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Directory(DIR_1_VALID).equals(new Directory(DIR_1_VALID)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String notExpected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(DIR_1_VALID)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(new Directory(DIR_1_DUPLICATE_VALID).toString(), notExpected);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e expected true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Directory: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(DIR_2_VALID)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Directory(DIR_2_VALID).toString(), expected);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 76
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(\"CS2103T\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"Lecture\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Your\", \"Lecture\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"My Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cS2103t\", \"lEctUre\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"Resume.pdf\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2107\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"CS2103T Lecture.pdf\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Keywords match directory, deadline and size, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", DIR_1_VALID,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                \"Transcript.pdf\", DEADLINE_JSON_DONE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withName(\"Resume.pdf\").withSize(\"12345\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withDirectory(DIR_1_VALID).withDeadline(DEADLINE_JSON_DONE).build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "jetkan-yk": 23
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_INVALID_CHARACTERS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_INVALID_EXTENSION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e expect NullPointerException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank Name -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank Space Name -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // wrong Extension -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(NAME_INVALID_EXTENSION));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // invalid character -\u003e throws IllegalArgumentException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(NAME_INVALID_CHARACTERS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // normal name -\u003e No Exceptions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Name(NAME_1_VALID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // name with space -\u003e No Exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Name(NAME_2_VALID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value -\u003e expect True"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new StringBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(NAME_1_VALID)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .toString(), new Name(NAME_1_VALID).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different value -\u003e expect false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(new StringBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Name: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(NAME_1_VALID)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .toString(), new Name(NAME_2_VALID).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different values -\u003e expected false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(new Name(NAME_1_VALID).equals(new Name(NAME_2_VALID)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e expected true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Name(NAME_1_VALID).equals(new Name(NAME_1_VALID)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values, different objects -\u003e expected true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(new Name(NAME_1_VALID).equals(new Name(NAME_1_VALID)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 80
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/PdfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_DUPLICATE_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_2_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_3_VALID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_INVALIDPDF_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1_DUPLICATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_3_ENCRYPTED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class PdfTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdf.getTags().remove(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void isSamePdf() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.isSamePdf(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different directory -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1_DUPLICATE).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_CS2103T).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        comparisonPdf \u003d new PdfBuilder(SAMPLE_PDF_2).withDeadline(DEADLINE_JSON_DONE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_2.isSamePdf(comparisonPdf));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void isValidPdf() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf validPdf \u003d SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(Paths.get(validPdf.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                validPdf.getName().getFullName()).toAbsolutePath().toFile().exists());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf invalidPdf \u003d SAMPLE_INVALIDPDF_1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(Paths.get(invalidPdf.getDirectory().getDirectory(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                invalidPdf.getName().getFullName()).toAbsolutePath().toFile().exists());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf acopy \u003d new PdfBuilder(SAMPLE_PDF_1).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.equals(acopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_1.equals(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(SAMPLE_PDF_2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withName(NAME_2_VALID).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different directory -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withDirectory(DIR_1_DUPLICATE_VALID).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different size -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withSize(SIZE_3_VALID).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withDeadline(DEADLINE_JSON_DONE).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        editedPdf \u003d new PdfBuilder(SAMPLE_PDF_1).withTags(TAG_VALID_LECTURE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.equals(editedPdf));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void isEncrypted() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // not encrypted pdf -\u003e expected false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(SAMPLE_PDF_1.getIsEncrypted());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        //encrypted pdf -\u003e expected true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(SAMPLE_PDF_3_ENCRYPTED.getIsEncrypted());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 122
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/SizeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_2_VALID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_3_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_INVALID_ALPHABET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_INVALID_NEGATIVE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.PREFIX_BYTE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.PREFIX_GIGABYTE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.PREFIX_KILOBYTE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.PREFIX_MEGABYTE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.THRESHOLD_GIGABYTE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.THRESHOLD_KILOBYTE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.model.pdf.Size.THRESHOLD_MEGABYTE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class SizeTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final int CONVERSION_KILOBYTE \u003d 10;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final int CONVERSION_MEGABYTE \u003d 20;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final int CONVERSION_GIGABYTE \u003d 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e expect NullPointerException to be thrown."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Size(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // no value -\u003e expect IllegalArgumentException to be thrown."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(\"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // blank space -\u003e expect IllegalArgumentException to be thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // negative value -\u003e expect IllegalArgumentException to be thrown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(SIZE_INVALID_NEGATIVE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // alphabet value -\u003e expect IllegalArgumentException to be thrown."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Size(SIZE_INVALID_ALPHABET));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // legitimate value -\u003e expect no exceptions to be thrown."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Size s \u003d new Size(SIZE_1_VALID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // single digit value -\u003e expect no exceptions to be thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Size s \u003d new Size(\"1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // long value -\u003e expect no exceptions to be thrown."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Size s \u003d new Size(\"12345678910111213141516171819202122232425\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value -\u003e expected match"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Size: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(SIZE_1_VALID)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expected, new Size(SIZE_1_VALID).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different value -\u003e expected non-match"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String notExpected \u003d new StringBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"Size: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(SIZE_1_VALID)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .append(\"\\n\").toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotEquals(notExpected, new Size(SIZE_2_VALID).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void getReadableValue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size smaller than kilobyte threshold -\u003e expected PREFIX_BYTE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_KILOBYTE - 1)).getReadableValue(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString(THRESHOLD_KILOBYTE - 1) + \" \" + PREFIX_BYTE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size equal to kilobyte threshold -\u003e expected PREFIX_KILOBYTE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_KILOBYTE)).getReadableValue(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString(THRESHOLD_KILOBYTE \u003e\u003e CONVERSION_KILOBYTE) + \" \" + PREFIX_KILOBYTE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size bigger than kilobyte threshold -\u003e expected PREFIX_KILOBYTE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_KILOBYTE + 1)).getReadableValue(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString((THRESHOLD_KILOBYTE + 1) \u003e\u003e CONVERSION_KILOBYTE) + \" \" + PREFIX_KILOBYTE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size equal to megabyte threshold -\u003e expected PREFIX_MEGABYTE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_MEGABYTE)).getReadableValue(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString(THRESHOLD_MEGABYTE \u003e\u003e CONVERSION_MEGABYTE) + \" \" + PREFIX_MEGABYTE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size bigger than megabyte threshold -\u003e expected PREFIX_MEGABYTE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_MEGABYTE + 1)).getReadableValue(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString((THRESHOLD_MEGABYTE + 1) \u003e\u003e CONVERSION_MEGABYTE) + \" \" + PREFIX_MEGABYTE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size equal to gigabyte threshold -\u003e expected PREFIX_GIGABYTE"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_GIGABYTE)).getReadableValue(),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString(THRESHOLD_GIGABYTE \u003e\u003e CONVERSION_GIGABYTE) + \" \" + PREFIX_GIGABYTE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // size bigger than gigabyte threshold -\u003e expected PREFIX_GIGABYTE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(new Size(Integer.toString(THRESHOLD_GIGABYTE + 1)).getReadableValue(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Integer.toString((THRESHOLD_GIGABYTE + 1) \u003e\u003e CONVERSION_GIGABYTE) + \" \" + PREFIX_GIGABYTE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value same object -\u003e expected true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Size size \u003d new Size(SIZE_3_VALID);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(size.equals(size));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same value different object -\u003e expected true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(size.equals(new Size(SIZE_3_VALID)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different value -\u003e expected false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(size.equals(new Size(SIZE_2_VALID)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null value -\u003e expected false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(size.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 142
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/TagContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // different pdf -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                Collections.singletonList(\"CS2103T\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withTags(\"CS2103T\", \"w9\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"w9\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withTags(\"CS2103T\", \"SEROCKS\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"CS2103T\", \"SEROCKS\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(predicate.test(new PdfBuilder().withTags(\"SEROCKS\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withTags(\"SEROCKS\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"CS2107\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withTags(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Multiple keywords, but none match"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"SEROCKS\", \"CS2103T\", \"PDF\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withTags(\"ITHINKIGETTINGAB\").withSize(\"12345\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                .withDirectory(DIR_1_VALID).withDeadline(DEADLINE_JSON_DONE).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"cS2103t\", \"lEctUre\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(predicate.test(new PdfBuilder().withTags(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 77
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/pdf/UniquePdfListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.DuplicatePdfException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.exceptions.PdfNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class UniquePdfListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final UniquePdfList uniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void contains_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void contains_pdfNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(uniquePdfList.contains(SAMPLE_PDF_7));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void contains_pdfInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(uniquePdfList.contains(SAMPLE_PDF_7));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void contains_pdfWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedPdf \u003d new PdfBuilder(SAMPLE_PDF_7).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertTrue(uniquePdfList.contains(editedPdf));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void add_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void add_duplicatePdf_throwsDuplicatePdfException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_nullTargetPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(null, SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_nullEditedPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_targetPdfNotInList_throwsPdfNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_editedPdfIsSamePdf_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedUniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_editedPdfHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf editedAlice \u003d new PdfBuilder(SAMPLE_PDF_7).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedUniquePdfList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_editedPdfHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedUniquePdfList.add(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_editedPdfHasNonUniqueIdentity_throwsDuplicatePdfException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdf(SAMPLE_PDF_7, SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void remove_nullPdf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void remove_pdfDoesNotExist_throwsPdfNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(PdfNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.remove(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void remove_existingPdf_removesPdf() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.remove(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_nullUniquePdfList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdfs((UniquePdfList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_uniquePdfList_replacesOwnListWithProvidedUniquePdfList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedUniquePdfList.add(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdfs(expectedUniquePdfList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdf_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdfs((List\u003cPdf\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdfs_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.add(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e pdfList \u003d Collections.singletonList(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdfs(pdfList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        UniquePdfList expectedUniquePdfList \u003d new UniquePdfList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        expectedUniquePdfList.add(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedUniquePdfList, uniquePdfList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void setPdfs_listWithDuplicatePdfs_throwsDuplicatedfException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cPdf\u003e listWithDuplicatePdfs \u003d Arrays.asList(SAMPLE_PDF_7, SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DuplicatePdfException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.setPdfs(listWithDuplicatePdfs);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        uniquePdfList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 185
    }
  },
  {
    "path": "src/test/java/seedu/pdf/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // valid tag -\u003e expect no exceptions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new Tag(TAG_VALID_LECTURE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            fail(MESSAGE_UNEXPECTEDEXCEPTION_VALIDINPUT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "jetkan-yk": 15
    }
  },
  {
    "path": "src/test/java/seedu/pdf/storage/JsonAdaptedPdfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_INVALID_INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_1_VALID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_INVALID_NONEXISTENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_1_VALID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.NAME_INVALID_EXTENSION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_1_VALID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.SIZE_INVALID_ALPHABET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_INVALID_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.TAG_VALID_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.storage.JsonAdaptedPdf.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class JsonAdaptedPdfTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_validPdfDetails_returnsPdf() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d new JsonAdaptedPdf(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(SAMPLE_PDF_1, pdf.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidDirectorty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(SAMPLE_PDF_1.getName().getFullName(), DIR_INVALID_NONEXISTENT, SIZE_1_VALID,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                null, DEADLINE_JSON_NOT_DONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d Directory.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(TAG_VALID_LECTURE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(TAG_INVALID_FRIEND));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_1_VALID, SIZE_1_VALID, invalidTags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, pdf::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_INVALID_EXTENSION, DIR_1_VALID, SIZE_1_VALID, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d new JsonAdaptedPdf(null, DIR_1_VALID, SIZE_1_VALID, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidDirectory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_INVALID_NONEXISTENT, SIZE_1_VALID, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d Directory.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_nullDirectory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d new JsonAdaptedPdf(NAME_1_VALID, null, SIZE_1_VALID, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Directory.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidSize_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_1_VALID, SIZE_INVALID_ALPHABET, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d Size.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_nullSize_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_1_VALID, null, tags, DEADLINE_JSON_DONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Size.class.getSimpleName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_1_VALID, SIZE_1_VALID, tags, DEADLINE_JSON_INVALID_INVALID_DATE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d Deadline.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void toModelType_nullDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonAdaptedPdf pdf \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new JsonAdaptedPdf(NAME_1_VALID, DIR_1_VALID, SIZE_1_VALID, tags, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Deadline.class.getSimpleName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, pdf::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 129
    }
  },
  {
    "path": "src/test/java/seedu/pdf/storage/JsonPdfBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_3;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class JsonPdfBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            \"JsonPdfBookStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void readPdfBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readPdfBook(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPdfBook\u003e readPdfBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new JsonPdfBookStorage(Paths.get(filePath)).readPdfBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertFalse(readPdfBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readPdfBook(\"notJsonFormatPdfBook.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void readPdfBook_invalidPdfPdfBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readPdfBook(\"invalidPdfPdfBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void readPdfBook_invalidAndValidPdfPdfBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readPdfBook(\"invalidAndValidPdfPdfBook.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void readAndSavePdfBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempPdfPlusPlus.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook original \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ReadOnlyPdfBook readBack \u003d jsonPdfBookStorage.readPdfBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        original.addPdf(SAMPLE_PDF_7);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        original.removePdf(SAMPLE_PDF_3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readBack \u003d jsonPdfBookStorage.readPdfBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // Save and read without specifying file value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        original.addPdf(SAMPLE_PDF_6);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        jsonPdfBookStorage.savePdfBook(original); // file value not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        readBack \u003d jsonPdfBookStorage.readPdfBook().get(); // file value not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(original, new PdfBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void savePdfBook_nullPdfBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        savePdfBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Saves {@code pdfBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private void savePdfBook(ReadOnlyPdfBook pdfBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            new JsonPdfBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    .savePdfBook(pdfBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void savePdfBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        savePdfBook(new PdfBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 125
    }
  },
  {
    "path": "src/test/java/seedu/pdf/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        userPrefs.setPdfBookFilePath(Paths.get(\"pdfplusplus.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 129,
      "jetkan-yk": 7
    }
  },
  {
    "path": "src/test/java/seedu/pdf/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        JsonPdfBookStorage pdfBookStorage \u003d new JsonPdfBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        storageManager \u003d new StorageManager(pdfBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void pdfBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "         * {@link JsonPdfBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPdfBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook original \u003d getTypicalPdfBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        storageManager.savePdfBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        ReadOnlyPdfBook retrieved \u003d storageManager.readPdfBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(original, new PdfBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void getPdfBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertNotNull(storageManager.getPdfBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "jetkan-yk": 17
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/EditPdfDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class to help with building EditPdfDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class EditPdfDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private RenameCommand.EditPdfDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor \u003d new RenameCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder(RenameCommand.EditPdfDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.descriptor \u003d new RenameCommand.EditPdfDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns an {@code EditPdfDescriptor} with fields containing {@code pdf}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder(Pdf pdf) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor \u003d new RenameCommand.EditPdfDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.setName(pdf.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.setTags(pdf.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPdfDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPdfDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder withSize(String size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.setSize(new Size(size));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPdfDescriptor}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public EditPdfDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public RenameCommand.EditPdfDescriptor build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 66
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/PdfBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class to help with building Pdfbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " *     {@code PdfBook ab \u003d new PdfBookBuilder().withPdf(SAMPLE_PDF_1).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class PdfBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private PdfBook pdfBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBookBuilder(PdfBook pdfBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.pdfBook \u003d pdfBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Adds a new {@code Pdf} to the {@code PdfBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBookBuilder withPdf(Pdf pdf) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        pdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return pdfBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 34
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/PdfBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class to help with building Pdf objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class PdfBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final File DEFAULT_FILE \u003d Paths.get("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            \"src\", \"test\", \"data\", \"JsonAdaptedPdfTest\", \"CS2103T_Lecture3.pdf\").toFile();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEFAULT_NAME \u003d DEFAULT_FILE.getName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEFAULT_DIRECTORY \u003d DEFAULT_FILE.getParent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEFAULT_SIZE \u003d Long.toString(DEFAULT_FILE.length());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEFAULT_DEADLINE \u003d CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final String DEADLINE_NEWLY_ADDED_FILE \u003d \"NEWLY ADDED\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Size size;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private boolean isEncrypted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        directory \u003d new Directory(DEFAULT_DIRECTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        size \u003d new Size(DEFAULT_SIZE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        isEncrypted \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Initializes the PdfBuilder with the data of {@code pdfToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder(Pdf pdfToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        name \u003d pdfToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        directory \u003d pdfToCopy.getDirectory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        size \u003d pdfToCopy.getSize();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(pdfToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deadline \u003d pdfToCopy.getDeadline();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        isEncrypted \u003d pdfToCopy.getIsEncrypted();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Name} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     *  Sets the {@code Directory} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withDirectory(String location) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.directory \u003d new Directory(location);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Size} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withSize(String size) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.size \u003d new Size(size);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Size} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withEncrypted(boolean isEncrypted) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        this.isEncrypted \u003d isEncrypted;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Pdf} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public PdfBuilder withDeadline(String date) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        if (date.equals(DEADLINE_NEWLY_ADDED_FILE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            this.deadline \u003d new Deadline(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public Pdf build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new Pdf(name, directory, size, tags, deadline, isEncrypted);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 113
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/PdfUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_DEADLINE_NEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_ADD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_TAG_REMOVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DecryptCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.EncryptCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RenameCommand.EditPdfDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class for Pdf."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class PdfUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns an add command string for adding the {@code pdf}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getAddCommand(Pdf pdf) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" f/\" + getPdfFilePath(pdf);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns pdf file path for adding the {@code pdf}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getPdfFilePath(Pdf pdf) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return Paths.get(pdf.getDirectory().getDirectory(), pdf.getName().getFullName()).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns a deadline command string for setting deadline to the {@code pdf}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getDeadlineCommand(Pdf pdf, int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return DeadlineCommand.COMMAND_WORD + \" \" + index + \" \" + PREFIX_DEADLINE_NEW + getPdfDeadline(pdf);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns pdf deadline for setting deadline the {@code pdf}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getPdfDeadline(Pdf pdf) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        final String deadlineSeparatorPrefix \u003d \"-\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Deadline deadline \u003d pdf.getDeadline();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        String[] splitDeadline \u003d deadline.toJsonString().split(deadlineSeparatorPrefix);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return splitDeadline[2].substring(0, 2) + deadlineSeparatorPrefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                + splitDeadline[1] + deadlineSeparatorPrefix + splitDeadline[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns a decrypt command string for decrypting the pdf at {@code index}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getDecryptCommand(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return DecryptCommand.COMMAND_WORD + \" \" + index + \" \" + PREFIX_PASSWORD + PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns an encrypt command string for encrypting the pdf at {@code index}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getEncryptCommand(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return EncryptCommand.COMMAND_WORD + \" \" + index + \" \" + PREFIX_PASSWORD + PASSWORD_1_VALID;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns a filter command string for returning a filtered list with that matches with {code tags}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getFilterCommand(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sb.append(FilterCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        tags.stream().forEach(tag -\u003e sb.append(\" \").append(PREFIX_TAG_NAME).append(tag.tagName));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the part of command string for the given {@code EditPdfDescriptor}\u0027s details."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getRenamePdfDescriptorDetails(EditPdfDescriptor descriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getFullName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the add tag command with {@code tags}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getAddTag(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sb.append(PREFIX_TAG_ADD).append(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        tags.stream().forEach(x -\u003e sb.append(PREFIX_TAG_NAME).append(x.tagName).append(\" \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the add tag command with {@code tags}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static String getRemoveTag(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        sb.append(PREFIX_TAG_REMOVE).append(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        tags.stream().forEach(x -\u003e sb.append(PREFIX_TAG_NAME).append(x.tagName).append(\" \"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 116
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder value and returns the resulting value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the middle index of the pdf in the {@code model}\u0027s pdf list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPdfList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the last index of the pdf in the {@code model}\u0027s pdf list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPdfList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns the pdf in the {@code model}\u0027s pdf list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static Pdf getPdf(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return model.getFilteredPdfList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "jetkan-yk": 12
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Index INDEX_FIRST_PDF \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Index INDEX_SECOND_PDF \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Index INDEX_THIRD_PDF \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 12
    }
  },
  {
    "path": "src/test/java/seedu/pdf/testutil/TypicalPdfs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_DONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DEADLINE_JSON_NOT_DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A utility class containing a list of {@code Pdf} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class TypicalPdfs {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    // Original Pdfs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_1_path \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_2_path \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_3_path \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS3230_Lecture9_GreedyAlgorithm.pdf\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_4_path \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_Lecture3.pdf\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_5_path \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103_Schedule_AY1819S2.pdf\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_6_path \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"GitCheatSheet.pdf\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_7_path \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"Markdown-Cheatsheet.pdf\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_8_path \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2101_UG and DG Peer Review.pdf\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_9_path \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2101_Product Demo strategies1.pdf\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_10_path \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_sample PPP.pdf\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_11_path \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2101_Writing User Guides.pdf\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_invalidPdf_1_path \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"invalidPathToFile.pdf\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_EditedPdf_1_path \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"NormalFiles\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"JustEdited.pdf\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_1_encrypted_path \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_2_encrypted_path \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_3_encrypted_path \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"EncryptedFiles\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"CS2101_Product_PW_123321.pdf\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_merged_1_2_path \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\", \"DuplicateFiles\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"Merged_PDF.pdf\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Duplicates - Pdfs that have the same name but in a different location"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_1_duplicate_path \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_PDF++_UG_Intro.pdf\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_2_duplicate_path \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_Week9_Integration Approaches.pdf\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_3_duplicate_path \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS3230_Lecture9_GreedyAlgorithm.pdf\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_4_duplicate_path \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_Lecture3.pdf\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_5_duplicate_path \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103_Schedule_AY1819S2.pdf\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_6_duplicate_path \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"GitCheatSheet.pdf\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_7_duplicate_path \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"Markdown-Cheatsheet.pdf\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_8_duplicate_path \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_UG and DG Peer Review.pdf\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_9_duplicate_path \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_Product Demo strategies1.pdf\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_10_duplicate_path \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2103T_sample PPP.pdf\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_pdf_11_duplicate_path \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"CS2101_Writing User Guides.pdf\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Path sample_invalidPdf_1_duplicate_path \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"SampleFiles\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                    \"DuplicateFiles\", \"invalidPdf_1.pdf\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Originals"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1 \u003d new PdfBuilder().withName(sample_pdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_path.toFile().length()))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_NOT_DONE).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2 \u003d new PdfBuilder().withName(sample_pdf_2_path.toFile().getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_2_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_path.toFile().length()))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_NOT_DONE).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3 \u003d new PdfBuilder().withName(sample_pdf_3_path.toFile().getName())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_3_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS3230\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_path.toFile().length()))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_NOT_DONE).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_4 \u003d new PdfBuilder().withName(sample_pdf_4_path.toFile().getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_4_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w3\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_4_path.toFile().length())).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_5 \u003d new PdfBuilder().withName(sample_pdf_5_path.toFile().getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_5_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103\", \"schedule\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_5_path.toFile().length())).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_6 \u003d new PdfBuilder().withName(sample_pdf_6_path.toFile().getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_6_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"Git\", \"cheatsheet\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_6_path.toFile().length())).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_7 \u003d new PdfBuilder().withName(sample_pdf_7_path.toFile().getName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_7_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"markdown\", \"cheatsheet\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_7_path.toFile().length())).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_8 \u003d new PdfBuilder().withName(sample_pdf_8_path.toFile().getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_8_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2101\", \"review\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_8_path.toFile().length())).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_9 \u003d new PdfBuilder().withName(sample_pdf_9_path.toFile().getName())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_9_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2101\", \"demo\", \"strategies\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_9_path.toFile().length())).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_10 \u003d new PdfBuilder().withName(sample_pdf_10_path.toFile().getName())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_10_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"PPP\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_10_path.toFile().length())).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_11 \u003d new PdfBuilder().withName(sample_pdf_11_path.toFile().getName())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_11_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2101\", \"writing\", \"UG\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_11_path.toFile().length())).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_INVALIDPDF_1 \u003d new PdfBuilder().withName(sample_invalidPdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_path.toFile().length())).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_EDITEDPDF \u003d new PdfBuilder().withName(sample_EditedPdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_DONE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_path.toFile().length())).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_WITH_DEADLINE \u003d new PdfBuilder(SAMPLE_PDF_1)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(DEADLINE_JSON_DONE).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_ENCRYPTED \u003d new PdfBuilder(SAMPLE_PDF_1)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withEncrypted(true).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2_ENCRYPTED \u003d new PdfBuilder(SAMPLE_PDF_2)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withEncrypted(true).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3_ENCRYPTED \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_3_encrypted_path.toFile().getName())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_encrypted_path.toFile().length()))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_3_encrypted_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withEncrypted(true)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_TOADD \u003d new PdfBuilder().withName(sample_pdf_1_path.toFile().getName())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_path.toFile().length()))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(\"NEWLY ADDED\").build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_MERGED_1_2 \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_merged_1_2_path.toFile().getName())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_1_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_merged_1_2_path.toFile().length()))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDeadline(\"NEWLY ADDED\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    //Duplicates"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_1_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_1_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_1_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_1_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_2_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_2_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_2_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_2_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_3_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_3_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_3_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS3230\", \"lecture\", \"w9\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_3_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_4_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_4_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_4_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"lecture\", \"w3\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_4_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_5_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_5_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_5_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103\", \"schedule\")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_5_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_6_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_6_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_6_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"Git\", \"cheatsheet\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_6_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_7_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_7_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_7_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"markdown\", \"cheatsheet\")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_7_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_8_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_8_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_8_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"moduleH\", \"tutorial\", \"w7\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_8_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_9_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_9_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_9_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2101\", \"review\")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_9_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_10_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_10_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_10_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2103T\", \"PPP\")"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_10_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_PDF_11_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_pdf_11_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_pdf_11_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"CS2101\", \"writing\", \"UG\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_pdf_11_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static final Pdf SAMPLE_INVALIDPDF_1_DUPLICATE \u003d new PdfBuilder()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withName(sample_invalidPdf_1_duplicate_path.toFile().getName())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withDirectory(sample_invalidPdf_1_duplicate_path.toAbsolutePath().getParent().toString())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withTags(\"invalid\", \"pdf\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            .withSize(Long.toString(sample_invalidPdf_1_duplicate_path.toFile().length())).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private TypicalPdfs() {} // prevents instantiation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns an {@code PdfBook} with all the typical pdfs."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static PdfBook getTypicalPdfBook() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (Pdf pdf : getTypicalPdfs()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            pdfBook.addPdf(pdf);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return pdfBook;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static List\u003cPdf\u003e getTypicalPdfs() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAMPLE_PDF_1, SAMPLE_PDF_2, SAMPLE_PDF_3));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 272
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "/*import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    /*private SimpleObjectProperty\u003cPdf\u003e selectedPdf \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedPdf));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a pdf"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPdf.set(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        URL expectedPdfUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + SAMPLE_PDF_1.getName().getFullName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "                .replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedPdfUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "WeiTangLau": 5,
      "-": 31,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 155,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A GUI unit test class for PdfBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 1,
      "-": 28,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 174,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonPdfBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        JsonPdfBookStorage jsonPdfBookStorage \u003d new JsonPdfBookStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonPdfBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 2,
      "-": 90,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/PdfCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertCardDisplaysPdf;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import guitests.guihandles.PdfCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PdfCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf pdfWithNoTags \u003d new PdfBuilder(SAMPLE_PDF_1).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard pdfCard \u003d new PdfCard(pdfWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCardDisplay(pdfCard, pdfWithNoTags, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdfWithTags \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        pdfCard \u003d new PdfCard(pdfWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertCardDisplay(pdfCard, pdfWithTags, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        Pdf pdf \u003d new PdfBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard pdfCard \u003d new PdfCard(pdf, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same pdf, same index -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfCard copy \u003d new PdfCard(pdf, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfCard.equals(copy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertTrue(pdfCard.equals(pdfCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different pdf, same index -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf differentPdf \u003d new PdfBuilder().withName(\"differentName.pdf\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(new PdfCard(differentPdf, 0)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same pdf, different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertFalse(pdfCard.equals(new PdfCard(pdf, 1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Asserts that {@code pdfCard} displays the details of {@code expectedPdf} correctly and matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private void assertCardDisplay(PdfCard pdfCard, Pdf expectedPdf, int expectedId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        PdfCardHandle pdfCardHandle \u003d new PdfCardHandle(pdfCard.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", pdfCardHandle.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify pdf details are displayed correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCardDisplaysPdf(expectedPdf, pdfCardHandle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 18,
      "WeiTangLau": 7,
      "-": 44,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/PdfListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_SECOND_PDF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.getTypicalPdfs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertCardDisplaysPdf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import guitests.guihandles.PdfCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import guitests.guihandles.PdfListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Directory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Size;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PdfListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPdf\u003e TYPICAL_PDFS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            FXCollections.observableList(getTypicalPdfs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private final SimpleObjectProperty\u003cPdf\u003e selectedPdf \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    private PdfListPanelHandle pdfListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PDFS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PDFS.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            pdfListPanelHandle.navigateToCard(TYPICAL_PDFS.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Pdf expectedPdf \u003d TYPICAL_PDFS.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            PdfCardHandle actualCard \u003d pdfListPanelHandle.getPdfCardHandle(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "            assertCardDisplaysPdf(expectedPdf, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public void selection_modelSelectedPdfChanged_selectionChanges() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PDFS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Pdf secondPdf \u003d TYPICAL_PDFS.get(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        guiRobot.interact(() -\u003e selectedPdf.set(secondPdf));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfCardHandle expectedPdf \u003d pdfListPanelHandle.getPdfCardHandle(INDEX_SECOND_PDF.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        PdfCardHandle selectedPdf \u003d pdfListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCardEquals(expectedPdf, selectedPdf);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Verifies that creating and deleting large number of pdfs in {@code PdfListPanel} requires lesser than"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPdf\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of pdf cards exceeded time limit\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Returns a list of pdfs containing {@code pdfCount} pdfs that is used to populate the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * {@code PdfListPanel}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private ObservableList\u003cPdf\u003e createBackingList(int pdfCount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPdf\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (int i \u003d 0; i \u003c pdfCount; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Name name \u003d new Name(i + \"a.pdf\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Directory directory \u003d new Directory(\"C:\\\\Users\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Size size \u003d new Size(\"1024\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            Pdf pdf \u003d new Pdf(name, directory, size, Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            backingList.add(pdf);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Initializes {@code pdfListPanelHandle} with a {@code PdfListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PdfListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPdf\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        PdfListPanel pdfListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                new PdfListPanel(backingList, selectedPdf, selectedPdf::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        uiPartRule.setUiPart(pdfListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        pdfListPanelHandle \u003d new PdfListPanelHandle(getChildNode(pdfListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                PdfListPanelHandle.PDF_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 4,
      "WeiTangLau": 10,
      "-": 63,
      "jetkan-yk": 24
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "    private final PdfBook pdfBook \u003d new PdfBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, pdfBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        // after pdf book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        guiRobot.interact(() -\u003e pdfBook.addPdf(SAMPLE_PDF_1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 3,
      "-": 66,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "jetkan-yk": 3
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import guitests.guihandles.PdfCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import guitests.guihandles.PdfListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertCardEquals(PdfCardHandle expectedCard, PdfCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getDirectory(), actualCard.getDirectory());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getSize(), actualCard.getSize());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPdf}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertCardDisplaysPdf(Pdf expectedPdf, PdfCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedPdf.getName().getFullName(), actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expectedPdf.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts that the list in {@code pdfListPanelHandle} displays the details of {@code pdfs} correctly and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertListMatching(PdfListPanelHandle pdfListPanelHandle, Pdf... pdfs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        for (int i \u003d 0; i \u003c pdfs.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            pdfListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            assertCardDisplaysPdf(pdfs[i], pdfListPanelHandle.getPdfCardHandle(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts that the list in {@code pdfListPanelHandle} displays the details of {@code pdfs} correctly and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertListMatching(PdfListPanelHandle pdfListPanelHandle, List\u003cPdf\u003e pdfs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertListMatching(pdfListPanelHandle, pdfs.toArray(new Pdf[0]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts the size of the list in {@code pdfListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertListSize(PdfListPanelHandle pdfListPanelHandle, int size) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        int numberOfPdf \u003d pdfListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(size, numberOfPdf);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jetkan-yk": 71
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/seedu/pdf/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "package seedu.pdf.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jetkan-yk": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.DIR_2_VALID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.CommandTestUtil.FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.SAMPLE_PDF_2_DUPLICATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.PdfUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class AddCommandSystemTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: add a pdf without tags to a non-empty pdf book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf toAdd \u003d SAMPLE_PDF_1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lormee94"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String command \u003d AddCommand.COMMAND_WORD + \" \" + PREFIX_FILE + FILEPATH_1_VALID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /* Case: undo adding SAMPLE_PDF_1 to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        /* Case: redo adding SAMPLE_PDF_1 to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.addPdf(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: add another pdf with different properties */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d new PdfBuilder(SAMPLE_PDF_2).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + DIR_2_VALID;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: add a pdf with the same name but different directory -\u003e added*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        toAdd \u003d SAMPLE_PDF_2_DUPLICATE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        command \u003d PdfUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: add to empty pdf book -\u003e added */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteAllPdf();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(SAMPLE_PDF_1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Pdf toAdd) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandSuccess(PdfUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Pdf)}. Executes {@code command}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Pdf)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Pdf toAdd) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        expectedModel.addPdf(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Pdf)} except asserts that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 2. {@code Storage} and {@code PdfListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Pdf)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 1,
      "ptvrajsk": 5,
      "WeiTangLau": 12,
      "-": 90,
      "jetkan-yk": 21
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class ClearCommandSystemTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: clear non-empty pdf book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: undo clearing pdf book -\u003e original pdf book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: redo clearing pdf book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        /* Case: selects first card in pdf list and clears pdf book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original pdf book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        selectPdf(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: filters the pdf list before clearing -\u003e entire pdf book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original pdf book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: clear empty pdf book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 5,
      "-": 78,
      "jetkan-yk": 18
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.DeleteCommand.MESSAGE_DELETE_PDF_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TestUtil.getPdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class DeleteCommandSystemTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first pdf in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PDF.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf deletedPdf \u003d removePdf(expectedModel, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last pdf in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index lastPdfIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(lastPdfIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last pdf in the list -\u003e last pdf restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last pdf in the list -\u003e last pdf deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        removePdf(modelBeforeDeletingLast, lastPdfIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle pdf in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index middlePdfIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(middlePdfIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: filtered pdf list, delete index within bounds of pdf book and pdf list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        Index index \u003d INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: filtered pdf list, delete index within bounds of pdf book but out of bounds of pdf list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int invalidIndex \u003d getModel().getPdfBook().getPdfList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a pdf card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected pdf -\u003e pdf list panel selects the pdf before the deleted pdf */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showAllPdfs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        selectPdf(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deletedPdf \u003d removePdf(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                getModel().getPdfBook().getPdfList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Removes the {@code Pdf} at the specified {@code index} in {@code model}\u0027s pdf book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed pdf"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private Pdf removePdf(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf targetPdf \u003d getPdf(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        model.deletePdf(targetPdf);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPdf;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the pdf at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Pdf deletedPdf \u003d removePdf(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PDF_SUCCESS, deletedPdf);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 5,
      "WeiTangLau": 7,
      "-": 144,
      "jetkan-yk": 37
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class HelpCommandSystemTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        getPdfListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPdfListPanel(), getModel().getFilteredPdfList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 2,
      "WeiTangLau": 2,
      "-": 95,
      "jetkan-yk": 8
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    private static final Predicate\u003cPdf\u003e PREDICATE_MATCHING_NO_PDFS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cPdf\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPredicate\u003cPdf\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        model.updateFilteredPdfList(predicate.orElse(PREDICATE_MATCHING_NO_PDFS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFilteredList(Model model, Pdf... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Pdf} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Predicate\u003cPdf\u003e getPredicateMatching(Pdf other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        return pdf -\u003e pdf.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "jetkan-yk": 5
    }
  },
  {
    "path": "src/test/java/systemtests/PdfBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "import guitests.guihandles.PdfListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.TypicalPdfs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.BrowserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.ui.CommandBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": " * A system test class for PdfBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public abstract class PdfBookSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    protected PdfBook getInitialData() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return TypicalPdfs.getTypicalPdfBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    public PdfListPanelHandle getPdfListPanel() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        return mainWindowHandle.getPdfListPanel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Displays all pdfs in the pdf book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    protected void showAllPdfs() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(getModel().getPdfBook().getPdfList().size(), getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Displays all pdfs with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    protected void showPdfWithName(String keyword) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(getModel().getFilteredPdfList().size() \u003c getModel().getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the pdf at {@code index} of the displayed list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    protected void selectPdf(Index index) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(index.getZeroBased(), getPdfListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * Deletes all pdfs in the pdf book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    protected void deleteAllPdf() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(0, getModel().getPdfBook().getPdfList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same pdf objects as {@code expectedModel}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * and the pdf list panel displays the pdfs in the model correctly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "        assertEquals(new PdfBook(expectedModel.getPdfBook()), testApp.readStoragePdfBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPdfListPanel(), expectedModel.getFilteredPdfList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PdfListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        getPdfListPanel().rememberSelectedPdfCard();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(getPdfListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the pdf in the pdf list panel at"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see PdfListPanelHandle#isSelectedPdfCardChanged()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        getPdfListPanel().navigateToCard(getPdfListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        String selectedCardName \u003d getPdfListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPdfListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the pdf list panel remain unchanged."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "     * @see PdfListPanelHandle#isSelectedPdfCardChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertFalse(getPdfListPanel().isSelectedPdfCardChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPdfListPanel(), getModel().getFilteredPdfList());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ptvrajsk": 1,
      "WeiTangLau": 21,
      "-": 242,
      "jetkan-yk": 23
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.PdfBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.pdf.Pdf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class SampleDataTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "    protected PdfBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        Pdf[] expectedList \u003d SampleDataUtil.getSamplePdfs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertListMatching(getPdfListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WeiTangLau": 3,
      "-": 42,
      "jetkan-yk": 6
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_INVALID_PDF_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.logic.commands.SelectCommand.MESSAGE_SELECT_PDF_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalIndexes.INDEX_FIRST_PDF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import static seedu.pdf.testutil.TypicalPdfs.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "public class SelectCommandSystemTest extends PdfBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the pdf list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PDF);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the pdf list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        Index pdfCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + pdfCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        assertCommandSuccess(command, pdfCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the pdf list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: filtered pdf list, select index within bounds of pdf book but out of bounds of pdf list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        showPdfWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int invalidIndex \u003d getModel().getPdfBook().getPdfList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: filtered pdf list, select index within bounds of pdf book and pdf list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPdfList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPdfList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        /* Case: select from empty pdf book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "        deleteAllPdf();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lormee94"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PDF.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                MESSAGE_INVALID_PDF_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected pdf.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "                MESSAGE_SELECT_PDF_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WeiTangLau"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPdfListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ptvrajsk"
        },
        "content": "     * 4. {@code Storage} and {@code PdfListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * {@code PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "     * @see PdfBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lormee94": 3,
      "ptvrajsk": 2,
      "WeiTangLau": 8,
      "-": 114,
      "jetkan-yk": 27
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "import seedu.pdf.model.ReadOnlyPdfBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyPdfBook\u003e pdfBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(pdfBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "jetkan-yk": 4
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003c?import seedu.pdf.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "jetkan-yk": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jetkan-yk"
        },
        "content": "\u003cfx:root type\u003d\"seedu.pdf.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "jetkan-yk": 1
    }
  }
]
