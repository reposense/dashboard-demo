[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d Personal Trainer Pro Application"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-F12-B2/main[image:https://travis-ci.org/CS2103JAN2018-F12-B2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "https://ci.appveyor.com/project/hypertun/main/branch/master[image:https://ci.appveyor.com/api/projects/status/690sw2r4l3lxa1fr/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-F12-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F12-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* This is a desktop Personal Trainer Pro application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* It is a Java application meant for Personal Trainers to manage and view their clients."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* PersonCard.css was adapted from https://codepen.io/er40/pen/bdFgx."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 3,
      "-": 29,
      "hypertun": 4
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    compile \u0027com.google.api-client:google-api-client:1.23.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    compile \u0027com.google.apis:google-api-services-calendar:v3-rev302-1.23.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \"addressbook.jar\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00272.12\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 3,
      "-": 203
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  \"appTitle\" : \"Personal Trainer Pro\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  \"logLevel\" : \"INFO\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  \"userPrefsFilePath\" : \"preferences.json\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 5
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Personal Trainer Pro was developed by the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "https://github.com/orgs/CS2103JAN2018-F12-B2/people[CS2103JAN2018-F12-B2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Yeo Chong Han"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::ivan.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[https://github.com/hypertun[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "{empty}[https://github.com/CS2103JAN2018-F12-B2/main/blob/master/docs/team/Yeo%20Chong%20Han.adoc[portfolio]]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Cheng Wenhao"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "image::wenhao.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/wenhao53y[github]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "{empty}[https://github.com/CS2103JAN2018-F12-B2/main/blob/master/docs/team/Cheng%20Wenhao.adoc[portfolio]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Responsibilities: UI, Documentation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Ong Wei Sheng"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::weisheng.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/wayneong95[github]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "{empty}[https://github.com/CS2103JAN2018-F12-B2/main/blob/master/docs/team/Ong%20Wei%20Sheng.adoc[portfolio]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Praneeth"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/ppalla0325[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wenhao53": 10,
      "-": 37,
      "hypertun": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F12-B2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Email us* : You can also reach us at `wenhao.cheng [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d Personal Trainer Pro (PTP) - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F12-B2/main/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "By: `CS2103JAN2018-F12-B2`      Since: `Feb 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "After forking the repo, links in the documentation will still point to the `CS2103JAN2018-F12-B2/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-F12-B2/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Personal Trainer Pro data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "// tag::GoogleCalendarApi[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "@by Wei Sheng"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d Integrated Google Calendar Services"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "The integrated Google Calendar API will allow personal trainers and clients to access their google calendar within the app for increased"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "ease and functionality. The trainers and clients will be able to interact with the google calendar through a mouse click or Command Line"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Interface. The proposed commands to be implemented are as follows:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". calendar: Opens up the user\u0027s Google Calendar"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". addEvent: Allow users to add an event to their Google Calendar (Eg. training sessions with their clients)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". deleteEvent: Deletes an event in the case where trainers/clients are unable to make it [v2.0]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". findAll: Find all the sessions for a particular client for ease of viewing [v2.0]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation [v1.5]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "The Google Calendar is displayed within the PTP application upon calling of the \u0027calendar\u0027 command and"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "supports Command Line Interface via the \u0027addEvent\u0027 command."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "The \u0027calendar\u0027 command interacts primarily with the UI but also other components of the application. The following sequence diagram shows how"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "the \u0027calendar\u0027 command works."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".Component interactions for `calendar` command"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "image::calendarCommand.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "The \u0027addEvent\u0027 command interacts primarily with the Google Calendar Api but also other components of the application including the"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "CalendarEvent class under the Model component. The following sequence diagram shows how the \u0027addEvent\u0027 command works."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".Component interactions for `addEvent` command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "image::addEventCommand.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d\u003d Future implementation [V2.0]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "More features will be implemented to allow increased ease of use for the users of Personal Trainer Pro such as the \u0027deleteEvent\u0027 command"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "and the \u0027findAll\u0027 command."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Google Calendar API"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Alternative 1: Open up in a new browser"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Pros: Easy to implement and debug"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Cons: Troublesome for users to keep switching between the PTP app and browser, and lacks Command Line Interface"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Alternative 2 (current choice): Open Google Calendar within the PTP application"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Pros: Ease of usage for users and supports Command Line Interface"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Cons: Browser window for Google Calendar within the application cannot be too big as it is limited by the positioning of other"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "fxml objects such as the status bar and person list panel. This may make it harder for users to view as compared to opening up Google"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Calendar on a separate browser."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "// end::GoogleCalendarApi[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//tag::gender[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hypertun"
        },
        "content": "@by Ivan"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Gender attribute : Current Implementation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hypertun"
        },
        "content": "The Gender attribute only accepts male and female genders. This is shown by only accepting characters M, F, m and f and only single letters are accepted. The \u0027GENDER_VALIDATION_REGEX\u0027 ensures that only the selected single alphabets are able to be input into the command line."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hypertun"
        },
        "content": "The Gender attribute resides as an attribute to a person under \u0027model\u0027. This means that every Person added by the AddCommand line must have a gender."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Gender is implemented in this way:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \"Gender can only be the alphabets M or F or m or f\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String GENDER_VALIDATION_REGEX \u003d \"[mfMF]{1}+\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     //... rest of attribute functions ..."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     // Test for regex is shown below"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hypertun"
        },
        "content": "             return test.matches(GENDER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     //... rest of attribute functions ..."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Supposed the user has just created a person using the command line but the gender is null or not within the regex this will cause a failure in execution of the AddCommand and a display of the \u0027MESSAGE_GENDER_CONSTRAINTS\u0027."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hypertun"
        },
        "content": "The same applies to the Editfunction where the same checks will apply. However this attribute differs from the name attribute as it can be duplicated to different persons."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hypertun"
        },
        "content": "AddCommand:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hypertun"
        },
        "content": "EditCommand:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        //... rest of edit command ..."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hypertun"
        },
        "content": "As one can see it will throw an exception be it either command when a duplicate person is found."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `Gender` attribute"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* **Alternative 1 (current choice):** Add a new gender attribute to person \u0027g/\u0027."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Cons: It will now require constant addition of the gender attribute to a person even when the gender attribute is not needed in some cases."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* **Alternative 2:** Add gender as a tag"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Pros: It will not require a constant addition of the gender attribute, only added for the times it is needed."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Cons: UI looks messy as some will have gender tags and some will not have gender tags which does not make sense, since everyone has a gender."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "//end::gender[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "@by Wenhao"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// tag::bmiclassification[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Auto-assigning and Sorting of BMI Classification labels to clients"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "The user will be able to have a quick glance at the list of clients that are sorted according to their BMI Classification (Obese, Overweight,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "Acceptable, or Underweight), so as to allow the user to identify which clients need more help in reaching their desired BMI range."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "The BMI classification will be adapted from the standards set by the World Health Organisation (WHO). The background colour of the Person card for each"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "client will differ in colour according to the BMI classification for that particular client."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Current BMI standards set by the World Health Organisation (WHO) are as follows:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "[width\u003d\"70%\",cols\u003d\"25%,\u003c30%,\u003c45%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|Classification |BMI Range |Background Colour (Light Theme)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|**Underweight** |BMI \u003c 18.5 |Light Yellow"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|**Acceptable** |18.5 \u0026le; BMI \u0026le; 24.9 |Light Green"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|**Overweight** |25 \u0026le; BMI \u0026le; 29.9 |Light Orange"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|**Obese** |BMI \u0026ge; 30 |Light Red"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Each client is saved as a person with weight and height attributes facilitate the calculation of their BMI."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Having the weight and height attributes in a Person allows the easy updating using the `edit` command in the application."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "This will allow the BMI to be re-calculated each time a client\u0027s weight or height (or both) is updated."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The background colour of the PersonCard will be updated automatically according to the BMI Classification"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The BMI for individual clients is calculated using the following formula: **BMI \u003d weight / (height / 100)^2^ **."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The BMI of each client is stored as a Person attribute and is currently displayed (to 4 significant figures) in the PersonCard."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Display of BMI Classification"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Individual client\u0027s BMI will not be shown as a number, but classification is reflected using the Person card\u0027s background colour"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to see at first glance which client is in which classification, minimise information included in a Person card."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Cons: User has to select a client in order to view his/her BMI value."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* **Alternative 2:** Display client\u0027s BMI classification as tags to their Person card"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Ease of viewing for trainer, actual BMI value will be available at first glance."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Displaying each client\u0027s BMI values as tags may interfere with the implementation and display of any existing tags and it is crucial to ensure the implementation of this tag, if desired,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "in a way that will not affect the storage or retrieval of other tags associated with each client."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Classification Command to filter clients displayed"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "As the user may have a large list of clients, he may wish to filter out clients that belong to a certain BMI classification."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The `bmi` command was implemented to allow the user to filter the list of clients using the case-insensitive keywords that corresponds"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "to the BMI classification (i.e. acceptable, overweight, underweight, obese)."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// end::bmiclassification[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*Feature Contribution*:"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* Ivan:"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* Minor - Html and css design of the person card so as to improve aesthetics instead of the boring google search page."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* Major - Mainly, a function to estimate the approximate calories needed to reach the goal of the client and"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  then a page with the exercises the clients can do with links to video they can watch from the application. Secondly,"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  a function to log the past weights of the clients so that they and the trainers can track their progress."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  A chart will also be plotted based on their progress."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "* Wenhao:"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* Minor - Filter command to group the list of clients by BMI Classifications"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* Major - Automatically generate BMI classifications (Overweight/Acceptable/Underweight) based on"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "  current attributes of each client. BMI Classifications will be reflected as the background colour of the person\u0027s card"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Wei Sheng:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Minor - Weight Attribute added. Since this is an application for fitness trainers, the weight of the clients is"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "essential as it allows the trainers to gauge the physical fitness of the clients."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Major - Integrated google calendar to allow the trainer to add training sessions with the clients and for the"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "clients to view the training sessions they have signed up for."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of clients"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* personal trainers who keep records of clients"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "* personal trainers who want to track clients\u0027 progress"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "* manage clients faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "* group clients according to BMI classification"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "* track individual client\u0027s progress using a chart for weight changes"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "* set goals for clients and see clients\u0027 feedback"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// tag::userstories[]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "[width\u003d\"70%\",cols\u003d\"15%,15%,\u003c35%,\u003c35%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |add a new client |expand and record my client database"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |delete a client |remove entries that I no longer need"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |edit a client | edit the attributes of my clients as they progress"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |find a client by name |locate details of clients without having to go through the entire list"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |update the weight of my client |track his/her weight progress"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |filter my clients according to BMI classification |easily view clients with similar BMI"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* * *` |user |schedule appointments with my clients |craft my schedule and ensure that I am able to balance my efforts among clients"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`* *` |user |determine the caloric needs of my clients |help my clients to plan a healthy program that suits their needs"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |track the weight changes of my clients |view my clients\u0027 progression till date using past weight updates"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|`*` |user |communicate with my clients |address any needs or instructions outside of workout sessions"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// end::userstories[]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "(For all use cases below, the *System* is the `Personal Trainer Pro` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "2.  Personal Trainer Pro shows a list of persons"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "4.  Personal Trainer Pro deletes the person"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3a1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// tag::usecases[]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to add person"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "2. Personal Trainer Pro prompts for data input"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "3. User inputs data for person to be added"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "4. Personal Trainer Pro adds the new person"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* 3a. Person of the same name (regardless of case) is already in Personal Trainer Pro"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3a1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add goal for person"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to add goal"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "2. Personal Trainer Pro prompts for data input"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "3. User inputs person name and goal to be added"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "4. Personal Trainer Pro adds the new goal for the person"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3a1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. The input goal is empty."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3b1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Use case: Filter persons according to BMI Classification"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "1. User requests to filter persons"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "2. Personal Trainer Pro prompts for classification input"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "3. User inputs BMI classification to filter"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "4. Personal Trainer Pro displays a list of persons with that BMI classification"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* 3a. User does not provide any input keywords, or provides invalid keywords"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3a1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Use case: Track weight changes for person"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "1. User requests to track weight changes"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "2. Personal Trainer Pro prompts for data input"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "3. User inputs person to track past weight"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "4. Personal Trainer Pro displays a chart showing past changes in weight"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** 3a1. Personal Trainer Pro shows an error message."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// end::usecases[]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".  Should be able to display data in a simple and clean format so a user is able to view the data with ease."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".  New information submitted by user should be updated immediately."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".  Client details should only be accessible to the client and the Trainer."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::glossary[]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[personal-trainer]] Personal trainer::"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Target audience"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[trainer]] Trainer::"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Same as above"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[client]] Client::"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Indirect target audience, due the the fact the employer-employee relationship between them and trainers"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[track]] Track::"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Understanding the fitness(e.g. weight loss/gain, calories, protein) progress of the clients"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[meal-plans]] Meal plan::"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "hypertun"
        },
        "content": "A combination of dietary information that should be followed"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[training]] Training::"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "hypertun"
        },
        "content": "A period of time when client is working out"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[session]] Session::"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Same as above"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[appointment]] Appointment::"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Same as above"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[[goals]] Goals::"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "hypertun"
        },
        "content": "A combination of desirable attributes that clients want to achieve"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "//end::glossary[]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Shutdown"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Type \u0027exit\u0027 on the Command Line Interface bar in order to close or shutdown the application."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. To reload the application look at the section \u0027Initial launch\u0027 above."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Viewing the help interface"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Using the help command and interface to view the user guide."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Prerequisites: None."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `help` +"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: The help interface appears, the user guide is displayed within the help interface for the user."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Filtering persons according to BMI Classification"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ". Filters persons according to BMI classification at any point of time"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Prerequisites: None"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi obese` +"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: Shows all persons with obese BMI classification. Background colour of all person cards should be light red in colour."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi acceptable` +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: Shows all persons with acceptable BMI classification. Background colour of all person cards should be light green in colour."
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi underweight` +"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: Shows all persons with underweight BMI classification. Background colour of all person cards should be light yellow in colour."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi overweight` +"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: Shows all persons with overweight BMI classification. Background colour of all person cards should be light orange in colour."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi overweight underweight acceptable obese` +"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: Shows all persons with all BMI classification. Listed persons result should match that of the `list` command."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi` +"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: No change to persons listed, shows an error message of invalid command format."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi notAValidKeyword` +"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: No change to persons listed, shows an error message saying one or more invalid keywords found."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".. Test case: `bmi notAValidKeyword overweight` +"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "   Expected: No change to persons listed, shows an error message saying one or more invalid keywords found."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Adding a person"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Adding a person to the list. Alias `a` can be used."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Prerequisites: Add a person using the `add` command."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 h/169.0 w/66.7 g/f age/21 al/1.9 t/criminal` +"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Person called Betsy is created and added to the list with the above attributes and the tag of criminal. This will be accompanied with a confirmation message."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `a n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 h/173.0 w/55.5 g/M age/22 al/1.2` +"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Person called John is created and added to the list with the above attributes and with no tags. The alias a is used for the add command."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Other incorrect add commands to try: `add`, `add John Doe 98765432 ....` (where prefixes are not given) +"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Error message relevant to error is shown."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Editing a person"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Editing a person on the list. Alias `e` can be used."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Prerequisites: Edit a person using the `edit` command. A person on the list to be edited."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `edit 1 h/170` +"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: First contact is edited on the list. The height of the first contact is changed to 170."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `e 0 w/60` +"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: No person is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Other incorrect edit commands to try: `edit`, `e x w/50` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Selecting a person"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Selects a person from the list and shows the person card on the browser, hovering mouse over the person card will display more attributes. Alias `s` can be used."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Prerequisites: Selects a person using the `select` command. A person on the list to be selected."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `select 1` +"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: First contact is on the list is selected. The person card is displayed on the browser."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `s 0` +"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: No person is selected. Error details shown in the status message."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Other incorrect select commands to try: `select`, `s x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Similar to previous"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Show Calories a person requires : `Calories`"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "hypertun"
        },
        "content": ". Selects the person and shows the amount of calories needed to increase, decrease or maintain in weight. Alias `cal` can be used."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Prerequisites: Shows the calories of a person using the `Calories` command. A person on the list that has all attributes filled in."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `Calories 1` +"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Calories of the first contact on the list is shown in the browser panel."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Test case: `Cal 0` +"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Calories is not shown. Error details shown in status message."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".. Other incorrect calories commands to try: `calories`, `cal x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "hypertun"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "// tag::GoogleCalendar[]"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d Show Google Calendar"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". Show the Google Calendar"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Prerequisites: User must log in for the first time upon use of \u0027calendar\u0027 command."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Test case: `calendar` +"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Expected: Google Calendar is shown in the UI."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d Adding a calendar event"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ". Adds a calendar event in the users\u0027 Google Calendar"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Prerequisites: User have to be logged in to their Google account. User have to allow Personal Trainer Pro (PTP) to manage their Google calendar upon first use of \u0027addEvent\u0027 command (will be prompted via a new browser). If user chose the wrong Google Account or did not allow PTP to manage their calendar, locate the credentials under \u0027C:\\Users\\[User\u0027s name]\\.credentials\\calendar-java-quickstart\u0027 and delete the credential to start over. Reopen the application and repeat the steps."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Test case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/13:30 ` +"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Expected: New calendar event is added. \u0027New event added: Weights Training Start Date: 2017-11-30 Start Time: 11:30 End Date: 2017-11-30 End Time: 13:30\u0027 shown in result display. Refresh Google Calendar by using \u0027calendar\u0027 command to see updated Google Calendar."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Test case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-10-30 et/13:30 `"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Expected: Event not added due to invalid end date. \u0027End Date cannot be earlier than Start Date!\u0027 shown in result display."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Test case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/10:30  `"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Expected: Event not added due to invalid end time. \u0027End Time cannot be earlier than Start Time!\u0027 shown in result display."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".. Other incorrect addEvent commands to try: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/hh:30 `, `addEvent n/Weights Training sd/2017-mm-30 st/11:30 ed/2017-11-30 et/11:30` +"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Expected: Error messages for the individual fields will be displayed. Eg. \u0027Event end time should only contain numbers in the HH:MM format. Eg. 11:30\u0027"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "// end::GoogleCalendar[]"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 86,
      "wenhao53": 107,
      "-": 1018,
      "hypertun": 167
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d Personal Trainer Pro (PTP) - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F12-B2/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "By: `CS2103JAN2018-F12-B2`      Since: `Feb 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Personal Trainer Pro (PTP) is for those who *prefer to use a desktop app for managing clients*. More importantly, PTP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Personal Trainers can make use of the application to manage their clients, schedule appointments, and view their clients\u0027 progress. If you can type fast, PTP can get your client management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".  Download the latest `PTP.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all clients"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 h/169.0 w/55.5 g/M age/22` : adds a contact named `John Doe` to the Personal Trainer Pro application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS h/HEIGHT w/WEIGHT g/GENDER age/AGE al/ACTIVITYLEVEL [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `a`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 h/173.0 w/55.5 g/M age/22 al/1.2 `"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 h/169.0 w/66.7 g/f age/21 al/1.9 t/criminal`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the PTP application. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `l`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Filtering all persons according to BMI Classification : `bmi`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Shows a filtered list of all persons in the PTP application whose BMI classification matches the given search query. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: `bmi KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Keywords (any of the below):"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `Underweight` (BMI \u003c 18.5)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `Acceptable` (18.5 \u0026le; BMI \u0026le; 24.9)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `Overweight` (25 \u0026le; BMI \u0026le; 29.9)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `Obese` (BMI \u0026ge; 30)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `bmi overweight`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* `bmi overweight underweight obese`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [g/GENDER] [age/AGE] [al/ACTIVITYLEVEL] [t/TAG]...`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `e`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `e 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `f`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `f Betsy Tim John` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `d`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hypertun"
        },
        "content": "`d 1` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Selects the person identified by the index number used in the last person listing and displays the person card that can be viewed by hovering mouse over the card. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `s`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* Selects the person and loads the person card at the specified `INDEX`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hypertun"
        },
        "content": "`s 1` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//tag::calendar[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d Show Google Calendar : `calendar`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Shows the User\u0027s Google Calendar within the Personal Trainer Pro Application. +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Format: `calendar`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "****"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Loads the Google Calendar login page."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Users have to login the first time. After that, Google Calendar will be displayed upon \u0027calendar\u0027 command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Users will need to re-login if they close and reopen the PTP app."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "****"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* `calendar`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//end::calendar[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//tag::addEvent[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d\u003d Add event to Google Calendar : `addEvent`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Adds an event to the Google Calendar on the signed-in Google account within the Personal Trainer Pro Application. +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: `addEvent n/EVENT_NAME sd/EVENT_START_DATE st/EVENT_START_TIME ed/EVENT_END_DATE et/EVENT_END_TIME`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "****"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Adds an event to the Google Calendar on the signed-in Google account via Command Line Interface."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Upon first use of the \u0027addEvent\u0027 command, users will be prompted via a new browser window to authorize access to PTP app to manage their calendars."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Select the account logged in to Google Calendar and click \u0027allow\u0027."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* The event will then be added to the user\u0027s Google Calendar."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* Refresh the calendar to show the newly added event by using the \u0027calendar\u0027 command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Once logged in to Google Calendar, be sure to tick your calendar in the left panel under \u0027My Calendars\u0027 to allow added events to be shown."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/13:30`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//end::addEvent[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::calories[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d\u003d Show Calories a person requires : `Calories`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Selects the person identified by the index number and shows the amount of calories needed to increase or decrease in weight. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Format: `Calories INDEX`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Alias: `cal`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hypertun"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* Selects the person and loads the Calories calculator page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hypertun"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hypertun"
        },
        "content": "`Calories 2` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Shows the calories of the 2nd person in the address book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hypertun"
        },
        "content": "`cal 1` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Shows the calories of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "//end::calories[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Weight Logging for clients `[coming in v2.0]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Users will be able to view the history of weight changes for each client in a graphical and list format."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d\u003d Scheduling appointments with clients `[coming in v2.0]`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Cancelling appointments with clients `[coming in v2.0]`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Sharing workouts with clients `[coming in v2.0]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Obtaining feedback from clients `[coming in v2.0]`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Personal Trainer Pro data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS h/HEIGHT w/WEIGHT g/GENDER age/AGE al/ACTIVITYLEVEL [t/TAG]...` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hypertun"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 h/169.0 w/55.5 g/M age/22 al/1.9 t/friend t/colleague`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [h/HEIGHT] [w/WEIGHT] [g/GENDER] [age/AGE] [al/ACTIVITYLEVEL] [t/TAG]...` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* *Filter* : `bmi KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `bmi overweight underweight`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `select 2`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Calories* : `calories INDEX` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "e.g. `calories 2`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Calendar* : `calendar`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *addEvent* : `addEvent n/EVENT_NAME sd/EVENT_START_DATE st/EVENT_START_TIME ed/EVENT_END_DATE et/EVENT_END_TIME` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "e.g. `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/13:30`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 39,
      "wenhao53": 34,
      "-": 257,
      "hypertun": 41
    }
  },
  {
    "path": "docs/team/Cheng Wenhao.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d Cheng Wenhao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d PROJECT: Personal Trainer Pro"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Personal Trainer Pro is a desktop application used by personal trainers and their clients to keep track of their fitness journey. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Major enhancement*: changed background colour for person card to be *attribute-dependent*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** What it does: The BMI of each person is automatically recalculated with any updates in height or weight. The classification of the BMI (Underweight, Acceptable, Overweight, Obese)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "changes after is reflected as the change in background colour of the PersonCard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Justification: At times, personal trainers want to design a set of workout tailored for a group of people and more often than not, workouts are tailored based on the client\u0027s BMI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Allowing the personal trainer to know at a quick glance how many of his clients fall under which BMI classification would allow the trainer to better gauge what kind of workouts is needed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Highlights: the background colour of the PersonCard is changed immediately upon any changes to the BMI classification with each edit command. This also reduces the cluttering of information displayed on the card."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Minor enhancement*: added a *filtering command to sieve of clients of the same BMI classification* that complements the justification above."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Minor enhancement*: added a height and BMI attribute to facilitate the classification of clients according to BMI.(Pull requests https://github.com/CS2103JAN2018-F12-B2/main/pull/27/[#27], https://github.com/CS2103JAN2018-F12-B2/main/pull/38/[#38])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/wenhao53.md[Functional code]] [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/wenhao53.md[Test code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Future implementations*: To make use of Google Charts API to provide an interactive display in Weight Logging for each client."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "This has already been done and tested working in a soft release but is not included in the `v1.5` release of the product due to testing inconsistencies and difficulties."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Managed `v1.2` - `v1.5rc` (4 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Written all enhancements and ensured that code complies to coding standards, resulting in minimal (\u003c 0.5%) drop in code coverage with each PR."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Implemented case-insensitivity for AddCommand to allow leniency with alphabetical case errors. (Pull request https://github.com/CS2103JAN2018-F12-B2/main/pull/15/[#15])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Restricted Height and Weight input to a specified range to prevent overflow issues and display problems, and to facilitate the calculation of BMI for clients."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Served as the main link and auditor for documentation (User Guide, Developer Guide) to ensure consistencies in display, format and representation. (Pull requests https://github.com/CS2103JAN2018-F12-B2/main/pull/24/[#24], https://github.com/CS2103JAN2018-F12-B2/main/pull/45/[#45], https://github.com/CS2103JAN2018-F12-B2/main/pull/57/[#57])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Updated user stories and use cases in accordance with initial projections of project implementations. (Pull request https://github.com/CS2103JAN2018-F12-B2/main/pull/20/[#20])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Helped to solve most test failures in the early stages of the project by pinpointing missing implementations and person tests."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class during user testing (examples: https://github.com/CS2103JAN2018-F09-B2/main/issues/114[#114])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfilter]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbmiclassification]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecases]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wenhao53": 63
    }
  },
  {
    "path": "docs/team/Cheng Wenhao.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.6.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctitle\u003eCheng Wenhao - Project Portfolio\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/gh-pages.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/coderay-asciidoctor.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch1\u003eCheng Wenhao - Project Portfolio\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"project-personal-trainer-pro-application\"\u003e\u003ca class\u003d\"link\" href\u003d\"#project-personal-trainer-pro-application\"\u003ePROJECT: Personal Trainer Pro Application\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"overview\"\u003e\u003ca class\u003d\"link\" href\u003d\"#overview\"\u003eOverview\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro is a desktop application used by personal trainers and their clients to keep track of their fitness journey. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"summary-of-contributions\"\u003e\u003ca class\u003d\"link\" href\u003d\"#summary-of-contributions\"\u003eSummary of contributions\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMajor enhancement\u003c/strong\u003e: changed background colour for person card to be \u003cstrong\u003eattribute-dependent\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWhat it does: The BMI of each person is automatically recalculated with any updates in height or weight. The classification of the BMI (Underweight, Acceptable, Overweight, Obese)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "changes after is reflected as the change in background colour of the PersonCard.\u003c/p\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eJustification: At times, personal trainers want to design a set of workout tailored for a group of people and more often than not, workouts are tailored based on the client\u0026#8217;s BMI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Allowing the personal trainer to know at a quick glance how many of his clients fall under which BMI classification would allow the trainer to better gauge what kind of workouts is needed.\u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eHighlights: the background colour of the PersonCard is changed immediately upon any changes to the BMI classification with each edit command. This also reduces the cluttering of information displayed on the card.\u003c/p\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMinor enhancement\u003c/strong\u003e: added a \u003cstrong\u003efiltering command to sieve of clients of the same BMI classification\u003c/strong\u003e that complements the justification above.\u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMinor enhancement\u003c/strong\u003e: added a height and BMI attribute to facilitate the classification of clients according to BMI.(Pull requests \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/27/\"\u003e#27\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/38/\"\u003e#38\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eCode contributed\u003c/strong\u003e: [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/wenhao53.md\"\u003eFunctional code\u003c/a\u003e] [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/wenhao53.md\"\u003eTest code\u003c/a\u003e]\u003c/p\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eFuture implementations\u003c/strong\u003e: To make use of Google Charts API to provide an interactive display in Weight Logging for each client."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "This has already been done and tested working in a soft release but is not included in the \u003ccode\u003ev1.5\u003c/code\u003e release of the product due to testing inconsistencies and difficulties.\u003c/p\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eOther contributions\u003c/strong\u003e:\u003c/p\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eProject management:\u003c/p\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eManaged \u003ccode\u003ev1.2\u003c/code\u003e - \u003ccode\u003ev1.5rc\u003c/code\u003e (4 releases) on GitHub\u003c/p\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWritten all enhancements and ensured that code complies to coding standards, resulting in minimal (\u0026lt; 0.5%) drop in code coverage with each PR.\u003c/p\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eEnhancements to existing features:\u003c/p\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eImplemented case-insensitivity for AddCommand to allow leniency with alphabetical case errors. (Pull request \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/15/\"\u003e#15\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eRestricted Height and Weight input to a specified range to prevent overflow issues and display problems, and to facilitate the calculation of BMI for clients.\u003c/p\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eDocumentation:\u003c/p\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eServed as the main link and auditor for documentation (User Guide, Developer Guide) to ensure consistencies in display, format and representation. (Pull requests \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/24/\"\u003e#24\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/45/\"\u003e#45\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/57/\"\u003e#57\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUpdated user stories and use cases in accordance with initial projections of project implementations. (Pull request \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/20/\"\u003e#20\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCommunity:\u003c/p\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eHelped to solve most test failures in the early stages of the project by pinpointing missing implementations and person tests.\u003c/p\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eReported bugs and suggestions for other teams in the class during user testing (examples: \u003ca href\u003d\"https://github.com/CS2103JAN2018-F09-B2/main/issues/114\"\u003e#114\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-user-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-user-guide\"\u003eContributions to the User Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"filtering-all-persons-according-to-bmi-classification-code-bmi-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#filtering-all-persons-according-to-bmi-classification-code-bmi-code\"\u003eFiltering all persons according to BMI Classification : \u003ccode\u003ebmi\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eShows a filtered list of all persons in the PTP application whose BMI classification matches the given search query.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: \u003ccode\u003ebmi KEYWORD [MORE_KEYWORDS]\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eKeywords (any of the below):\u003c/p\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003eUnderweight\u003c/code\u003e (BMI \u0026lt; 18.5)\u003c/p\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003eAcceptable\u003c/code\u003e (18.5 \u0026le; BMI \u0026le; 24.9)\u003c/p\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003eOverweight\u003c/code\u003e (25 \u0026le; BMI \u0026le; 29.9)\u003c/p\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003eObese\u003c/code\u003e (BMI \u0026ge; 30)\u003c/p\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003ebmi overweight\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003ebmi overweight underweight obese\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-developer-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-developer-guide\"\u003eContributions to the Developer Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"auto-assigning-and-sorting-of-bmi-classification-labels-to-clients\"\u003e\u003ca class\u003d\"link\" href\u003d\"#auto-assigning-and-sorting-of-bmi-classification-labels-to-clients\"\u003eAuto-assigning and Sorting of BMI Classification labels to clients\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe user will be able to have a quick glance at the list of clients that are sorted according to their BMI Classification (Obese, Overweight,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Acceptable, or Underweight), so as to allow the user to identify which clients need more help in reaching their desired BMI range.\u003c/p\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe BMI classification will be adapted from the standards set by the World Health Organisation (WHO). The background colour of the Person card for each"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "client will differ in colour according to the BMI classification for that particular client.\u003c/p\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCurrent BMI standards set by the World Health Organisation (WHO) are as follows:\u003c/p\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all\" style\u003d\"width: 70%;\"\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 30%;\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 45%;\"\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eClassification\u003c/th\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eBMI Range\u003c/th\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eBackground Colour (Light Theme)\u003c/th\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cstrong\u003eUnderweight\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eBMI \u0026lt; 18.5\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eLight Yellow\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cstrong\u003eAcceptable\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e18.5 \u0026le; BMI \u0026le; 24.9\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eLight Green\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cstrong\u003eOverweight\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e25 \u0026le; BMI \u0026le; 29.9\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eLight Orange\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cstrong\u003eObese\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eBMI \u0026ge; 30\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eLight Red\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eEach client is saved as a person with weight and height attributes facilitate the calculation of their BMI."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Having the weight and height attributes in a Person allows the easy updating using the \u003ccode\u003eedit\u003c/code\u003e command in the application."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "This will allow the BMI to be re-calculated each time a client\u0026#8217;s weight or height (or both) is updated."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The background colour of the PersonCard will be updated automatically according to the BMI Classification\u003c/p\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe BMI for individual clients is calculated using the following formula: \u003cstrong\u003eBMI \u003d weight / (height / 100)\u003csup\u003e2\u003c/sup\u003e \u003c/strong\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe BMI of each client is stored as a Person attribute and is currently displayed (to 4 significant figures) in the PersonCard.\u003c/p\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch4 id\u003d\"design-considerations\"\u003e\u003ca class\u003d\"link\" href\u003d\"#design-considerations\"\u003eDesign Considerations\u003c/a\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch5 id\u003d\"aspect-display-of-bmi-classification\"\u003e\u003ca class\u003d\"link\" href\u003d\"#aspect-display-of-bmi-classification\"\u003eAspect: Display of BMI Classification\u003c/a\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e Individual client\u0026#8217;s BMI will not be shown as a number, but classification is reflected using the Person card\u0026#8217;s background colour\u003c/p\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: Easy to see at first glance which client is in which classification, minimise information included in a Person card.\u003c/p\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: User has to select a client in order to view his/her BMI value.\u003c/p\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e Display client\u0026#8217;s BMI classification as tags to their Person card\u003c/p\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: Ease of viewing for trainer, actual BMI value will be available at first glance.\u003c/p\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: Displaying each client\u0026#8217;s BMI values as tags may interfere with the implementation and display of any existing tags and it is crucial to ensure the implementation of this tag, if desired,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "in a way that will not affect the storage or retrieval of other tags associated with each client.\u003c/p\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"classification-command-to-filter-clients-displayed\"\u003e\u003ca class\u003d\"link\" href\u003d\"#classification-command-to-filter-clients-displayed\"\u003eClassification Command to filter clients displayed\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAs the user may have a large list of clients, he may wish to filter out clients that belong to a certain BMI classification."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The \u003ccode\u003ebmi\u003c/code\u003e command was implemented to allow the user to filter the list of clients using the case-insensitive keywords that corresponds"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "to the BMI classification (i.e. acceptable, overweight, underweight, obese).\u003c/p\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"user-stories\"\u003e\u003ca class\u003d\"link\" href\u003d\"#user-stories\"\u003eUser Stories\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePriorities: High (must have) - \u003ccode\u003e* * *\u003c/code\u003e, Medium (nice to have) - \u003ccode\u003e* *\u003c/code\u003e, Low (unlikely to have) - \u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all\" style\u003d\"width: 70%;\"\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 15%;\"\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 15%;\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 35%;\"\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 35%;\"\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003ePriority\u003c/th\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAs a \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eI want to \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eSo that I can\u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003enew user\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee usage instructions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erefer to instructions when I forget how to use the App\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eadd a new client\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eexpand and record my client database\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003edelete a client\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eremove entries that I no longer need\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eedit a client\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eedit the attributes of my clients as they progress\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efind a client by name\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003elocate details of clients without having to go through the entire list\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eupdate the weight of my client\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etrack his/her weight progress\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efilter my clients according to BMI classification\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eeasily view clients with similar BMI\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eschedule appointments with my clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ecraft my schedule and ensure that I am able to balance my efforts among clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003edetermine the caloric needs of my clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ehelp my clients to plan a healthy program that suits their needs\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ehide \u003ca href\u003d\"#private-contact-detail\"\u003eprivate contact details\u003c/a\u003e by default\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eminimize chance of someone else seeing them by accident\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etrack the weight changes of my clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eview my clients\u0027 progression till date using past weight updates\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ecommunicate with my clients\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eaddress any needs or instructions outside of workout sessions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"use-case-add-person\"\u003e\u003ca class\u003d\"link\" href\u003d\"#use-case-add-person\"\u003eUse case: Add person\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser requests to add person\u003c/p\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro prompts for data input\u003c/p\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser inputs data for person to be added\u003c/p\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro adds the new person\u003c/p\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a. Person of the same name (regardless of case) is already in Personal Trainer Pro\u003c/p\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a1. Personal Trainer Pro shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"use-case-add-goal-for-person\"\u003e\u003ca class\u003d\"link\" href\u003d\"#use-case-add-goal-for-person\"\u003eUse case: Add goal for person\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser requests to add goal\u003c/p\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro prompts for data input\u003c/p\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser inputs person name and goal to be added\u003c/p\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro adds the new goal for the person\u003c/p\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a. The given index is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a1. Personal Trainer Pro shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3b. The input goal is empty.\u003c/p\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3b1. Personal Trainer Pro shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"use-case-filter-persons-according-to-bmi-classification\"\u003e\u003ca class\u003d\"link\" href\u003d\"#use-case-filter-persons-according-to-bmi-classification\"\u003eUse case: Filter persons according to BMI Classification\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser requests to filter persons\u003c/p\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro prompts for classification input\u003c/p\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser inputs BMI classification to filter\u003c/p\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro displays a list of persons with that BMI classification\u003c/p\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a. User does not provide any input keywords, or provides invalid keywords\u003c/p\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a1. Personal Trainer Pro shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"use-case-track-weight-changes-for-person\"\u003e\u003ca class\u003d\"link\" href\u003d\"#use-case-track-weight-changes-for-person\"\u003eUse case: Track weight changes for person\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser requests to track weight changes\u003c/p\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro prompts for data input\u003c/p\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUser inputs person to track past weight\u003c/p\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro displays a chart showing past changes in weight\u003c/p\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a. The given index is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist none\"\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e3a1. Personal Trainer Pro shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Last updated 2018-04-15 14:53:49 SGT"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 609
    }
  },
  {
    "path": "docs/team/Ong Wei Sheng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d Ong Wei Sheng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003d\u003d PROJECT: Personal Trainer Pro"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "Personal Trainer Pro is a desktop application used by personal trainers and their clients to keep track of their fitness journey. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* *Major enhancement*: added *integrated Google Calendar Services*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** What it does: Through the \u0027calendar\u0027 and \u0027addEvent\u0027 command, users can display their Google Calendar within the application, and also add new events to their Google Calendar through CLI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Justification: This feature improves the product significantly as it allows users to have increased ease in the management of their schedule. It can be troublesome to have to switch between applications when planning one\u0027s schedule. This feature allows the user to do everything within the application itself, allowing them to finish planning quicker and more efficiently."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Highlights: This enhancement touched on all the different components of the code from User Interface to the Model component. Therefore, it required a deep understanding of how the different component interacts with one another. Also, since Google Calendar is integrated, it requires knowledge on how the Google Calendar API works and how to set it up, making it very challenging to implement."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Credits: Google Calendar API was used to allow Google Calendar services to be integrated into the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* *Minor enhancement*: added a weight attribute that stores the users\u0027 weight, which is essential since this is a fitness application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* *Minor enhancement*: revamped the UI from a dark theme to a brighter and more positive light theme to match our product, which is a fitness application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/wayneong95.md[Functional code]] [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/wayneong95.md[Test code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Managed v1.5rc release on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Proposed initial idea of a fitness application for personal trainers and clients"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 85% to 88% (Pull request https://github.com/CS2103JAN2018-F12-B2/main/pull/90)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Constantly checks and updates user and developer guide. (examples: https://github.com/CS2103JAN2018-F12-B2/main/pull/44/files, https://github.com/CS2103JAN2018-F12-B2/main/pull/100, https://github.com/CS2103JAN2018-F12-B2/main/pull/120"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-W09-B1/main/issues/134, https://github.com/CS2103JAN2018-W09-B1/main/issues/130, https://github.com/CS2103JAN2018-W09-B1/main/issues/126)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "*** Integrated a third party service (Google Calendar) to the project (https://github.com/CS2103JAN2018-F12-B2/main/pull/56)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddEvent]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dGoogleCalendarApi]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dGoogleCalendar]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 61,
      "wenhao53": 1
    }
  },
  {
    "path": "docs/team/Ong Wei Sheng.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.6.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctitle\u003eOng Wei Sheng - Project Portfolio\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/gh-pages.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/coderay-asciidoctor.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch1\u003eOng Wei Sheng - Project Portfolio\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"project-personal-trainer-pro-application\"\u003e\u003ca class\u003d\"link\" href\u003d\"#project-personal-trainer-pro-application\"\u003ePROJECT: Personal Trainer Pro Application\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"overview\"\u003e\u003ca class\u003d\"link\" href\u003d\"#overview\"\u003eOverview\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro is a desktop application used by personal trainers and their clients to keep track of their fitness journey. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"summary-of-contributions\"\u003e\u003ca class\u003d\"link\" href\u003d\"#summary-of-contributions\"\u003eSummary of contributions\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMajor enhancement\u003c/strong\u003e: added \u003cstrong\u003eintegrated Google Calendar Services\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWhat it does: Through the \u0027calendar\u0027 and \u0027addEvent\u0027 command, users can display their Google Calendar within the application, and also add new events to their Google Calendar through CLI.\u003c/p\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eJustification: This feature improves the product significantly as it allows users to have increased ease in the management of their schedule. It can be troublesome to have to switch between applications when planning one\u0026#8217;s schedule. This feature allows the user to do everything within the application itself, allowing them to finish planning quicker and more efficiently.\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eHighlights: This enhancement touched on all the different components of the code from User Interface to the Model component. Therefore, it required a deep understanding of how the different component interacts with one another. Also, since Google Calendar is integrated, it requires knowledge on how the Google Calendar API works and how to set it up, making it very challenging to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCredits: Google Calendar API was used to allow Google Calendar services to be integrated into the application.\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMinor enhancement\u003c/strong\u003e: added a weight attribute that stores the users\u0027 weight, which is essential since this is a fitness application.\u003c/p\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMinor enhancement\u003c/strong\u003e: revamped the UI from a dark theme to a brighter and more positive light theme to match our product, which is a fitness application.\u003c/p\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eCode contributed\u003c/strong\u003e: [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/wayneong95.md\"\u003eFunctional code\u003c/a\u003e] [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/wayneong95.md\"\u003eTest code\u003c/a\u003e]\u003c/p\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eOther contributions\u003c/strong\u003e:\u003c/p\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eProject management:\u003c/p\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eManaged v1.5rc release on GitHub\u003c/p\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eProposed initial idea of a fitness application for personal trainers and clients\u003c/p\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eEnhancements to existing features:\u003c/p\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWrote additional tests for existing features to increase coverage from 85% to 88% (Pull request \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/90\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/pull/90\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eDocumentation:\u003c/p\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eConstantly checks and updates user and developer guide. (examples: \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/44/files\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/pull/44/files\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/100\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/pull/100\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/120\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/pull/120\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCommunity:\u003c/p\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eReported bugs and suggestions for other teams in the class (examples: \u003ca href\u003d\"https://github.com/CS2103JAN2018-W09-B1/main/issues/134\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-W09-B1/main/issues/134\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-W09-B1/main/issues/130\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-W09-B1/main/issues/130\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-W09-B1/main/issues/126\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-W09-B1/main/issues/126\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTools:\u003c/p\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eIntegrated a third party service (Google Calendar) to the project (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/56\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/pull/56\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-user-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-user-guide\"\u003eContributions to the User Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"show-google-calendar-code-calendar-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#show-google-calendar-code-calendar-code\"\u003eShow Google Calendar : \u003ccode\u003ecalendar\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eShows the User\u0026#8217;s Google Calendar within the Personal Trainer Pro Application.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: \u003ccode\u003ecalendar\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eLoads the Google Calendar login page.\u003c/p\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUsers have to login the first time. After that, Google Calendar will be displayed upon \u0027calendar\u0027 command.\u003c/p\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUsers will need to re-login if they close and reopen the PTP app.\u003c/p\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003ecalendar\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"add-event-to-google-calendar-code-addevent-code\"\u003e\u003ca class\u003d\"link\" href\u003d\"#add-event-to-google-calendar-code-addevent-code\"\u003eAdd event to Google Calendar : \u003ccode\u003eaddEvent\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAdds an event to the Google Calendar on the signed-in Google account within the Personal Trainer Pro Application.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: \u003ccode\u003eaddEvent n/EVENT_NAME sd/EVENT_START_DATE st/EVENT_START_TIME ed/EVENT_END_DATE et/EVENT_END_TIME\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAdds an event to the Google Calendar on the signed-in Google account via Command Line Interface.\u003c/p\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUpon first use of the \u0027addEvent\u0027 command, users will be prompted via a new browser window to authorize access to PTP app to manage their calendars.\u003c/p\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSelect the account logged in to Google Calendar and click \u0027allow\u0027.\u003c/p\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe event will then be added to the user\u0026#8217;s Google Calendar.\u003c/p\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eRefresh the calendar to show the newly added event by using the \u0027calendar\u0027 command.\u003c/p\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip\"\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ci class\u003d\"fa icon-tip\" title\u003d\"Tip\"\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Once logged in to Google Calendar, be sure to tick your calendar in the left panel under \u0027My Calendars\u0027 to allow added events to be shown."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003eaddEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/13:30\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-developer-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-developer-guide\"\u003eContributions to the Developer Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e@by Wei Sheng\u003c/p\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"integrated-google-calendar-services\"\u003e\u003ca class\u003d\"link\" href\u003d\"#integrated-google-calendar-services\"\u003eIntegrated Google Calendar Services\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe integrated Google Calendar API will allow personal trainers and clients to access their google calendar within the app for increased"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "ease and functionality. The trainers and clients will be able to interact with the google calendar through a mouse click or Command Line"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Interface. The proposed commands to be implemented are as follows:\u003c/p\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ecalendar: Opens up the user\u0026#8217;s Google Calendar\u003c/p\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eaddEvent: Allow users to add an event to their Google Calendar (Eg. training sessions with their clients)\u003c/p\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003edeleteEvent: Deletes an event in the case where trainers/clients are unable to make it [v2.0]\u003c/p\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003efindAll: Find all the sessions for a particular client for ease of viewing [v2.0]\u003c/p\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch4 id\u003d\"current-implementation-v1-5\"\u003e\u003ca class\u003d\"link\" href\u003d\"#current-implementation-v1-5\"\u003eCurrent Implementation [v1.5]\u003c/a\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe Google Calendar is displayed within the PTP application upon calling of the \u0027calendar\u0027 command and"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "supports Command Line Interface via the \u0027addEvent\u0027 command.\u003c/p\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe \u0027calendar\u0027 command interacts primarily with the UI but also other components of the application. The following sequence diagram shows how"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "the \u0027calendar\u0027 command works.\u003c/p\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cimg src\u003d\"../images/calendarCommand.PNG\" alt\u003d\"calendarCommand\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 1. Component interactions for \u003ccode\u003ecalendar\u003c/code\u003e command\u003c/div\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe \u0027addEvent\u0027 command interacts primarily with the Google Calendar Api but also other components of the application including the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "CalendarEvent class under the Model component. The following sequence diagram shows how the \u0027addEvent\u0027 command works.\u003c/p\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"imageblock\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cimg src\u003d\"../images/addEventCommand.PNG\" alt\u003d\"addEventCommand\" width\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 2. Component interactions for \u003ccode\u003eaddEvent\u003c/code\u003e command\u003c/div\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch4 id\u003d\"future-implementation-v2-0\"\u003e\u003ca class\u003d\"link\" href\u003d\"#future-implementation-v2-0\"\u003eFuture implementation [V2.0]\u003c/a\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eMore features will be implemented to allow increased ease of use for the users of Personal Trainer Pro such as the \u0027deleteEvent\u0027 command"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "and the \u0027findAll\u0027 command.\u003c/p\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch4 id\u003d\"design-consideration\"\u003e\u003ca class\u003d\"link\" href\u003d\"#design-consideration\"\u003eDesign Consideration\u003c/a\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch5 id\u003d\"aspect-implementation-of-google-calendar-api\"\u003e\u003ca class\u003d\"link\" href\u003d\"#aspect-implementation-of-google-calendar-api\"\u003eAspect: Implementation of Google Calendar API\u003c/a\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAlternative 1: Open up in a new browser\u003c/p\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: Easy to implement and debug\u003c/p\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: Troublesome for users to keep switching between the PTP app and browser, and lacks Command Line Interface\u003c/p\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAlternative 2 (current choice): Open Google Calendar within the PTP application\u003c/p\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: Ease of usage for users and supports Command Line Interface\u003c/p\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: Browser window for Google Calendar within the application cannot be too big as it is limited by the positioning of other"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "fxml objects such as the status bar and person list panel. This may make it harder for users to view as compared to opening up Google"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Calendar on a separate browser.\u003c/p\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"show-google-calendar\"\u003e\u003ca class\u003d\"link\" href\u003d\"#show-google-calendar\"\u003eShow Google Calendar\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eShow the Google Calendar\u003c/p\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePrerequisites: User must log in for the first time upon use of \u0027calendar\u0027 command.\u003c/p\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTest case: \u003ccode\u003ecalendar\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Expected: Google Calendar is shown in the UI.\u003c/p\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"adding-a-calendar-event\"\u003e\u003ca class\u003d\"link\" href\u003d\"#adding-a-calendar-event\"\u003eAdding a calendar event\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist arabic\"\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAdds a calendar event in the users\u0027 Google Calendar\u003c/p\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"olist loweralpha\"\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003col class\u003d\"loweralpha\" type\u003d\"a\"\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePrerequisites: User have to be logged in to their Google account. User have to allow Personal Trainer Pro (PTP) to manage their Google calendar upon first use of \u0027addEvent\u0027 command (will be prompted via a new browser). If user chose the wrong Google Account or did not allow PTP to manage their calendar, locate the credentials under \u0027C:\\Users\\[User\u0026#8217;s name]\\.credentials\\calendar-java-quickstart\u0027 and delete the credential to start over. Reopen the application and repeat the steps.\u003c/p\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTest case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/13:30 `\u003cbr\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Expected: New calendar event is added. \u0027New event added: Weights Training Start Date: 2017-11-30 Start Time: 11:30 End Date: 2017-11-30 End Time: 13:30\u0027 shown in result display. Refresh Google Calendar by using \u0027calendar\u0027 command to see updated Google Calendar.\u003c/p\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTest case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-10-30 et/13:30 `"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Expected: Event not added due to invalid end date. \u0027End Date cannot be earlier than Start Date!\u0027 shown in result display.\u003c/p\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTest case: `addEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/10:30  `"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Expected: Event not added due to invalid end time. \u0027End Time cannot be earlier than Start Time!\u0027 shown in result display.\u003c/p\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eOther incorrect addEvent commands to try: \u003ccode\u003eaddEvent n/Weights Training sd/2017-11-30 st/11:30 ed/2017-11-30 et/hh:30 `, `addEvent n/Weights Training sd/2017-mm-30 st/11:30 ed/2017-11-30 et/11:30\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Expected: Error messages for the individual fields will be displayed. Eg. \u0027Event end time should only contain numbers in the HH:MM format. Eg. 11:30\u0027\u003c/p\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Last updated 2018-04-15 18:22:50 SGT"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 394
    }
  },
  {
    "path": "docs/team/Yeo Chong Han.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d Yeo Chong Han(Ivan) - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d PROJECT: Personal Trainer Pro"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Personal Trainer Pro is a free to use application used for helping personal trainers gauge the improvement of their clients as well as help them improve."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "It comes with a highly capable Command Line Interface(CLI) personal organiser and tracker keep together with an easy to use interface. The Graphical User Interface(GUI) is very simplistic but extremely detailed and easy to use to aid trainers in helping their clients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Major enhancement*: added *Calories Calculator*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** What it does: allows the user/trainer to calculate the required calories based on a reliable website to obtain the best amount of calories the clients should have in order to improve, grow or lose weight. It uses all attribute data of the client to find the amount of calories needed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Justification: This feature will allow for trainers to quickly and readily answer questions about the client and also choose a perfect workout to suit the needs and wants, be it to gain lose or maintain, of the client."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Highlights: This feature required additional attributes being added on to the original base and handling of events and creation of specific tests for each attribute before combining everything."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Credits: Calculator.net was used as the main calculator that was being build around."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "**External behaviour"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B2/main/blob/master/docs/UserGuide.adoc#show-calories-a-person-requires-code-calories-code]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Minor enhancement*: added a html design when selecting the personal card in order to improve aesthetics and remove clutter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "**External behaviour"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B2/main/blob/master/docs/UserGuide.adoc#selecting-a-person-code-select-code]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "---"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/hypertun.md] [https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/hypertun.md]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Future implementation: *Tracking Weight for clients*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "**What it does: This will allow for trainers as well as clients to track their progress to reach their goal."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "**Justification: As the clients progress using the calories calculator it is important that they track their progress whether to gain weight, lose weight or to maintain weight. It already has a preliminary design as shown below in other contributions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "* *Other contributions*: Tried to implement the weight log attribute but was unsuccessful. (Pull request(s): https://github.com/CS2103JAN2018-F12-B2/main/pull/40[#40])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Managed releases `v1.0` - `v1.5rc` (6 releases) on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Solved several bugs that was found during preliminary testing (Pull requests https://github.com/CS2103JAN2018-F12-B2/main/pull/102[#102], https://github.com/CS2103JAN2018-F12-B2/main/pull/101[#101], https://github.com/CS2103JAN2018-F12-B2/main/pull/88[#88])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Added Command Aliases (https://github.com/CS2103JAN2018-F12-B2/main/pull/4[#4])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Added Gender Attribute(https://github.com/CS2103JAN2018-F12-B2/main/pull/22[#22])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Updated Major and Minor Enhancement (https://github.com/CS2103JAN2018-F12-B2/main/pull/23[#23])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Documentation for attributes (https://github.com/CS2103JAN2018-F12-B2/main/pull/32[#32], https://github.com/CS2103JAN2018-F12-B2/main/pull/28[#28])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Revamped original person card (https://github.com/CS2103JAN2018-F12-B2/main/pull/29[#29])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "*** Reverted error coding causing failure to merge due to previous member (https://github.com/CS2103JAN2018-F12-B2/main/pull/12[#12])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalories]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgender]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dglossary]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hypertun"
        },
        "content": "Collated the code together. (https://github.com/CS2103JAN2018-F12-B2/main/pull/108[#108])"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "hypertun": 75
    }
  },
  {
    "path": "docs/team/Yeo Chong Han.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c!--[if IE]\u003e\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e\u003c![endif]--\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 1.5.6.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctitle\u003eYeo Chong Han(Ivan) - Project Portfolio\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/gh-pages.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"../stylesheets/coderay-asciidoctor.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch1\u003eYeo Chong Han(Ivan) - Project Portfolio\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"project-personal-trainer-pro\"\u003e\u003ca class\u003d\"link\" href\u003d\"#project-personal-trainer-pro\"\u003ePROJECT: Personal Trainer Pro\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"overview\"\u003e\u003ca class\u003d\"link\" href\u003d\"#overview\"\u003eOverview\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePersonal Trainer Pro is a free to use application used for helping personal trainers gauge the improvement of their clients as well as help them improve."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "It comes with a highly capable Command Line Interface(CLI) personal organiser and tracker keep together with an easy to use interface. The Graphical User Interface(GUI) is very simplistic but extremely detailed and easy to use to aid trainers in helping their clients."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.\u003c/p\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"summary-of-contributions\"\u003e\u003ca class\u003d\"link\" href\u003d\"#summary-of-contributions\"\u003eSummary of contributions\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMajor enhancement\u003c/strong\u003e: added \u003cstrong\u003eCalories Calculator\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWhat it does: allows the user/trainer to calculate the required calories based on a reliable website to obtain the best amount of calories the clients should have in order to improve, grow or lose weight. It uses all attribute data of the client to find the amount of calories needed.\u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eJustification: This feature will allow for trainers to quickly and readily answer questions about the client and also choose a perfect workout to suit the needs and wants, be it to gain lose or maintain, of the client.\u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eHighlights: This feature required additional attributes being added on to the original base and handling of events and creation of specific tests for each attribute before combining everything.\u003c/p\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCredits: Calculator.net was used as the main calculator that was being build around.\u003c/p\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e**External behaviour"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---\u003c/p\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMinor enhancement\u003c/strong\u003e: added a html design when selecting the personal card in order to improve aesthetics and remove clutter.\u003c/p\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e**External behaviour"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---\u003c/p\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eCode contributed\u003c/strong\u003e: [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/hypertun.md\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/functional/hypertun.md\u003c/a\u003e] [\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/hypertun.md\" class\u003d\"bare\"\u003ehttps://github.com/CS2103JAN2018-F12-B2/main/blob/master/collated/test/hypertun.md\u003c/a\u003e]\u003c/p\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eFuture implementation: *Tracking Weight for clients\u003c/strong\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cstrong\u003eWhat it does: This will allow for trainers as well as clients to track their progress to reach their goal."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/strong\u003eJustification: As the clients progress using the calories calculator it is important that they track their progress whether to gain weight, lose weight or to maintain weight. It already has a preliminary design as shown below in other contributions.\u003c/p\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eOther contributions\u003c/strong\u003e: Tried to implement the weight log attribute but was unsuccessful. (Pull request(s): \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/40\"\u003e#40\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eProject management:\u003c/p\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eManaged releases \u003ccode\u003ev1.0\u003c/code\u003e - \u003ccode\u003ev1.5rc\u003c/code\u003e (6 releases) on GitHub\u003c/p\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eEnhancements to existing features:\u003c/p\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSolved several bugs that was found during preliminary testing (Pull requests \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/102\"\u003e#102\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/101\"\u003e#101\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/88\"\u003e#88\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests \u003ca href\u003d\"https://github.com\"\u003e#36\u003c/a\u003e, \u003ca href\u003d\"https://github.com\"\u003e#38\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAdded Command Aliases (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/4\"\u003e#4\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAdded Gender Attribute(\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/22\"\u003e#22\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eDocumentation:\u003c/p\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUpdated Major and Minor Enhancement (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/23\"\u003e#23\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eDocumentation for attributes (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/32\"\u003e#32\u003c/a\u003e, \u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/28\"\u003e#28\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCommunity:\u003c/p\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eRevamped original person card (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/29\"\u003e#29\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eReverted error coding causing failure to merge due to previous member (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/12\"\u003e#12\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-user-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-user-guide\"\u003eContributions to the User Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"show-calories-a-person-requires-code-calories-code-2\"\u003e\u003ca class\u003d\"link\" href\u003d\"#show-calories-a-person-requires-code-calories-code-2\"\u003eShow Calories a person requires : \u003ccode\u003eCalories\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSelects the person identified by the index number and shows the amount of calories needed to increase or decrease in weight.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Format: \u003ccode\u003eCalories INDEX\u003c/code\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Alias: \u003ccode\u003ecal\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSelects the person and loads the Calories calculator page the person at the specified \u003ccode\u003eINDEX\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe index refers to the index number shown in the most recent listing.\u003c/p\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe index \u003cstrong\u003emust be a positive integer\u003c/strong\u003e \u003ccode\u003e1, 2, 3, \u0026#8230;\u0026#8203;\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccode\u003eCalories 2\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Shows the calories of the 2nd person in the address book.\u003c/p\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003ccode\u003efind Betsy\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccode\u003ecal 1\u003c/code\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Shows the calories of the 1st person in the results of the \u003ccode\u003efind\u003c/code\u003e command.\u003c/p\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"contributions-to-the-developer-guide\"\u003e\u003ca class\u003d\"link\" href\u003d\"#contributions-to-the-developer-guide\"\u003eContributions to the Developer Guide\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all spread\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ccol style\u003d\"width: 100%;\"\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003cem\u003eGiven below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project.\u003c/em\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e@by Ivan\u003c/p\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect2\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch3 id\u003d\"gender-attribute-current-implementation\"\u003e\u003ca class\u003d\"link\" href\u003d\"#gender-attribute-current-implementation\"\u003eGender attribute : Current Implementation\u003c/a\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe Gender attribute only accepts male and female genders. This is shown by only accepting characters M, F, m and f and only single letters are accepted. The \u0027GENDER_VALIDATION_REGEX\u0027 ensures that only the selected single alphabets are able to be input into the command line.\u003c/p\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe Gender attribute resides as an attribute to a person under \u0027model\u0027. This means that every Person added by the AddCommand line must have a gender.\u003c/p\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eGender is implemented in this way:\u003c/p\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"listingblock\"\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre class\u003d\"CodeRay highlight\"\u003e\u003ccode data-lang\u003d\"java\"\u003e---"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cspan class\u003d\"directive\"\u003epublic\u003c/span\u003e \u003cspan class\u003d\"type\"\u003eclass\u003c/span\u003e \u003cspan class\u003d\"class\"\u003eGender\u003c/span\u003e {\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"literalblock\"\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre\u003epublic static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \"Gender can only be the alphabets M or F or m or f\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public static final String GENDER_VALIDATION_REGEX \u003d \"[mfMF]{1}+\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public final String value;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " //... rest of attribute functions ...\u003c/pre\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"literalblock\"\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre\u003e// Test for regex is shown below"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return test.matches(GENDER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }\u003c/pre\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"literalblock\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre\u003e     //... rest of attribute functions ..."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---\u003c/pre\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSupposed the user has just created a person using the command line but the gender is null or not within the regex this will cause a failure in execution of the AddCommand and a display of the \u0027MESSAGE_GENDER_CONSTRAINTS\u0027.\u003c/p\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eThe same applies to the Editfunction where the same checks will apply. However this attribute differs from the name attribute as it can be duplicated to different persons.\u003c/p\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAddCommand:\u003c/p\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"listingblock\"\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre class\u003d\"CodeRay highlight\"\u003e\u003ccode data-lang\u003d\"java\"\u003e---"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    \u003cspan class\u003d\"annotation\"\u003e@Override\u003c/span\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    \u003cspan class\u003d\"directive\"\u003epublic\u003c/span\u003e CommandResult executeUndoableCommand() \u003cspan class\u003d\"directive\"\u003ethrows\u003c/span\u003e CommandException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cspan class\u003d\"keyword\"\u003etry\u003c/span\u003e {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            \u003cspan class\u003d\"keyword\"\u003ereturn\u003c/span\u003e \u003cspan class\u003d\"keyword\"\u003enew\u003c/span\u003e CommandResult(\u003cspan class\u003d\"predefined-type\"\u003eString\u003c/span\u003e.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } \u003cspan class\u003d\"keyword\"\u003ecatch\u003c/span\u003e (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            \u003cspan class\u003d\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class\u003d\"keyword\"\u003enew\u003c/span\u003e CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"literalblock\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre\u003e    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---\u003c/pre\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eEditCommand:\u003c/p\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"listingblock\"\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cpre class\u003d\"CodeRay highlight\"\u003e\u003ccode data-lang\u003d\"java\"\u003e---"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    \u003cspan class\u003d\"annotation\"\u003e@Override\u003c/span\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    \u003cspan class\u003d\"directive\"\u003epublic\u003c/span\u003e CommandResult executeUndoableCommand() \u003cspan class\u003d\"directive\"\u003ethrows\u003c/span\u003e CommandException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cspan class\u003d\"keyword\"\u003etry\u003c/span\u003e {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } \u003cspan class\u003d\"keyword\"\u003ecatch\u003c/span\u003e (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            \u003cspan class\u003d\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class\u003d\"keyword\"\u003enew\u003c/span\u003e CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } \u003cspan class\u003d\"keyword\"\u003ecatch\u003c/span\u003e (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            \u003cspan class\u003d\"keyword\"\u003ethrow\u003c/span\u003e \u003cspan class\u003d\"keyword\"\u003enew\u003c/span\u003e \u003cspan class\u003d\"exception\"\u003eAssertionError\u003c/span\u003e(\u003cspan class\u003d\"string\"\u003e\u003cspan class\u003d\"delimiter\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class\u003d\"content\"\u003eThe target person cannot be missing\u003c/span\u003e\u003cspan class\u003d\"delimiter\"\u003e\u0026quot;\u003c/span\u003e\u003c/span\u003e);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cspan class\u003d\"comment\"\u003e//... rest of edit command ...\u003c/span\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "---\u003c/code\u003e\u003c/pre\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eAs one can see it will throw an exception be it either command when a duplicate person is found.\u003c/p\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect3\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch4 id\u003d\"design-considerations\"\u003e\u003ca class\u003d\"link\" href\u003d\"#design-considerations\"\u003eDesign Considerations\u003c/a\u003e\u003c/h4\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect4\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch5 id\u003d\"aspect-implementation-of-code-gender-code-attribute\"\u003e\u003ca class\u003d\"link\" href\u003d\"#aspect-implementation-of-code-gender-code-attribute\"\u003eAspect: Implementation of \u003ccode\u003eGender\u003c/code\u003e attribute\u003c/a\u003e\u003c/h5\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e Add a new gender attribute to person \u0027g/\u0027.\u003c/p\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: We will not lose any undone/redone functionality as it is now part of the default behaviour.\u003c/p\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: It will now require constant addition of the gender attribute to a person even when the gender attribute is not needed in some cases.\u003c/p\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e Add gender as a tag\u003c/p\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"ulist\"\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003ePros: It will not require a constant addition of the gender attribute, only added for the times it is needed.\u003c/p\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cli\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCons: UI looks messy as some will have gender tags and some will not have gender tags which does not make sense, since everyone has a gender.\u003c/p\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"glossary\"\u003e\u003ca class\u003d\"link\" href\u003d\"#glossary\"\u003eAppendix A: Glossary\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"dlist\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"mainstream-os\"\u003e\u003c/a\u003e Mainstream OS\u003c/dt\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eWindows, Linux, Unix, OS-X\u003c/p\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"private-contact-detail\"\u003e\u003c/a\u003e Private contact detail\u003c/dt\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eA contact detail that is not meant to be shared with others\u003c/p\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"personal-trainer\"\u003e\u003c/a\u003e Personal trainer\u003c/dt\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eTarget audience\u003c/p\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"trainer\"\u003e\u003c/a\u003e Trainer\u003c/dt\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSame as above\u003c/p\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"client\"\u003e\u003c/a\u003e Client\u003c/dt\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eIndirect target audience, due the the fact the employer-employee relationship between them and trainers\u003c/p\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"track\"\u003e\u003c/a\u003e Track\u003c/dt\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eUnderstanding the fitness(e.g. weight loss/gain, calories, protein) progress of the clients\u003c/p\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"meal-plans\"\u003e\u003c/a\u003e Meal plan\u003c/dt\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eA combination of dietary information that should be followed\u003c/p\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"training\"\u003e\u003c/a\u003e Training\u003c/dt\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eA period of time when client is working out\u003c/p\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"session\"\u003e\u003c/a\u003e Session\u003c/dt\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSame as above\u003c/p\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"appointment\"\u003e\u003c/a\u003e Appointment\u003c/dt\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eSame as above\u003c/p\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ca id\u003d\"goals\"\u003e\u003c/a\u003e Goals\u003c/dt\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eA combination of desirable attributes that clients want to achieve\u003c/p\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sect1\"\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003ch2 id\u003d\"other-contributions\"\u003e\u003ca class\u003d\"link\" href\u003d\"#other-contributions\"\u003eOther Contributions\u003c/a\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv class\u003d\"paragraph\"\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cp\u003eCollated the code together. (\u003ca href\u003d\"https://github.com/CS2103JAN2018-F12-B2/main/pull/108\"\u003e#108\u003c/a\u003e)\u003c/p\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "Last updated 2018-04-15 18:22:50 SGT"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 426
    }
  },
  {
    "path": "src/main/java/seedu/address/GoogleCalendar/AddEventManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.GoogleCalendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.GoogleCalendar.AddCalendarEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "content": "//@@author wayneong95-reused"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Some code referenced from CS2103AUG2017-W15-B2."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddEventManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddEventManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static AddEventManager instance \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public AddEventManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Creates an instance of the Google Calendar Api and register it as an event handler."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static AddEventManager init() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            instance \u003d new AddEventManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    //@@author wayneong95"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void handleNewAddCalendarEvent(AddCalendarEvent event) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent newEvent \u003d event.getCalendarEvent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        GoogleCalendarApi.createEvent(newEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "Wayneong95": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/GoogleCalendar/GoogleCalendarApi.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.GoogleCalendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.http.HttpTransport;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.util.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.client.util.store.FileDataStoreFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.services.calendar.CalendarScopes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.services.calendar.model.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.api.services.calendar.model.EventDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**Google calendar Api*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class GoogleCalendarApi {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Application name. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final String APPLICATION_NAME \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Google Calendar API Java Quickstart\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Directory to store user credentials for this application. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Global instance of the {@link FileDataStoreFactory}. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static FileDataStoreFactory DATA_STORE_FACTORY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Global instance of the JSON factory. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final JsonFactory JSON_FACTORY \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Global instance of the HTTP transport. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static HttpTransport HTTP_TRANSPORT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /** Global instance of the scopes required by this quickstart."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * If modifying these scopes, delete your previously saved credentials"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * at ~/.credentials/calendar-java-quickstart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final List\u003cString\u003e SCOPES \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Arrays.asList(CalendarScopes.CALENDAR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            HTTP_TRANSPORT \u003d GoogleNetHttpTransport.newTrustedTransport();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            DATA_STORE_FACTORY \u003d new FileDataStoreFactory(DATA_STORE_DIR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (Throwable t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            t.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Creates an authorized Credential object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @return an authorized Credential object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Credential authorize() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // Load client secrets."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        InputStream in \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                GoogleCalendarApi.class.getResourceAsStream(\"/client_secret.json\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        GoogleClientSecrets clientSecrets \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // Build flow and trigger user authorization request."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        GoogleAuthorizationCodeFlow flow \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        .setDataStoreFactory(DATA_STORE_FACTORY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        .setAccessType(\"offline\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Credential credential \u003d new AuthorizationCodeInstalledApp("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                flow, new LocalServerReceiver()).authorize(\"user\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                \"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return credential;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Build and return an authorized Calendar client service."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @return an authorized Calendar client service"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static com.google.api.services.calendar.Calendar getCalendarService() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Credential credential \u003d authorize();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new com.google.api.services.calendar.Calendar.Builder("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                HTTP_TRANSPORT, JSON_FACTORY, credential)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .setApplicationName(APPLICATION_NAME)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**Creates a new Calendar Event*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static void createEvent(CalendarEvent newEvent) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        com.google.api.services.calendar.Calendar service \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                getCalendarService();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String calendarId \u003d \"primary\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String eventName \u003d newEvent.getEventName().toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String eventStartDate \u003d newEvent.getEventStartDate().toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String eventStartTime \u003d newEvent.getEventStartTime().toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String eventEndDate \u003d newEvent.getEventEndDate().toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String eventEndTime \u003d newEvent.getEventEndTime().toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Event event \u003d new Event()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .setSummary(eventName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        DateTime startDateTime \u003d new DateTime(eventStartDate + \"T\" + eventStartTime + \":00+08:00\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        EventDateTime start \u003d new EventDateTime()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .setDateTime(startDateTime);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        event.setStart(start);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        DateTime endDateTime \u003d new DateTime(eventEndDate + \"T\" + eventEndTime + \":00+08:00\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        EventDateTime end \u003d new EventDateTime()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .setDateTime(endDateTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        event.setEnd(end);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        event \u003d service.events().insert(calendarId, event).execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        System.out.printf(\"Event created: %s\\n\", event.getHtmlLink());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**Starts a google calendar service*/"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static void startCalendar() throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        com.google.api.services.calendar.Calendar service \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                getCalendarService();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 5, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[Initializing Personal Trainer Pro]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "         * To allow sign in to Google calendar page to load."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * The data from the sample Personal Trainer Pro will be used instead if {@code storage}\u0027s Personal Trainer Pro"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * is not found, or an empty Personal Trainer Pro will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * {@code storage}\u0027s Personal Trainer Pro."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Personal Trainer Pro\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    + \"Personal Trainer Pro\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    + \"Personal Trainer Pro\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        logger.info(\"Starting Personal Trainer Pro \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Personal Trainer Pro ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 5,
      "wenhao53": 12,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private String appTitle \u003d \"Personal Trainer Pro\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "hypertun": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d \"One or more invalid keyword(s) found! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/GoogleCalendar/AddCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.commons.events.GoogleCalendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * An event requesting to add an event to the calendar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddCalendarEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private CalendarEvent calendarEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public AddCalendarEvent(CalendarEvent calendarEvent) { this.calendarEvent \u003d calendarEvent; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CalendarEvent getCalendarEvent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return calendarEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * An event requesting to view calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class ShowCalendarEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowCaloriesEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Event raised on \u0027goal\u0027 command\u0027s successful execution"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class ShowCaloriesEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public ShowCaloriesEvent(Person person) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_HEIGHT + \"HEIGHT \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_WEIGHT + \"WEIGHT \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_ACTIVITYLEVEL + \"ACTIVITY LEVEL \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_HEIGHT + \"168 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_WEIGHT + \"55.5 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_GENDER + \"m \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_AGE + \"22 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + PREFIX_ACTIVITYLEVEL + \"1.2 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 3,
      "-": 70,
      "hypertun": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.GoogleCalendar.AddEventManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.GoogleCalendar.AddCalendarEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Adds an event to the Google Calendar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addEvent\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the Google Calendar. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_NAME + \"EVENT NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"EVENT START DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_START_TIME + \"EVENT START TIME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"EVENT END DATE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_END_TIME + \"EVENT END TIME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_NAME + \"Weights Training \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_START_DATE + \"2017-11-30 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_START_TIME + \"11:30 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_END_DATE + \"2017-11-30 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + PREFIX_EVENT_END_TIME + \"13:30 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final CalendarEvent toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Creates an AddEventCommand to add the specified {@code CalendarEvent}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public AddEventCommand(CalendarEvent calendarEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(calendarEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        toAdd \u003d calendarEvent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        AddEventManager.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        EventsCenter.getInstance().post(new AddCalendarEvent(toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Opens up the Google Calendar window"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays calendar.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String SHOWING_CALENDAR_MESSAGE \u003d \"Calendar displayed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        EventsCenter.getInstance().post(new ShowCalendarEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            GoogleCalendarApi.startCalendar();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            System.out.println(\"IOException\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new CommandResult(SHOWING_CALENDAR_MESSAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CaloriesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Opens up the Calories Calculator window with specific index"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class CaloriesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"Calories\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"cal\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the calories of specified person. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_FIND_CALORIES_SUCCESS \u003d \"Calories Required Of %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public CaloriesCommand(Index index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Person personWhoseCaloriesIsToBeShown \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            model.showCalories(personWhoseCaloriesIsToBeShown);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            assert false : \"The target person cannot be missing\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FIND_CALORIES_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                personWhoseCaloriesIsToBeShown.getName().fullName, personWhoseCaloriesIsToBeShown.getAddress()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                || (other instanceof CaloriesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 this.index.equals(((CaloriesCommand) other).index)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClassificationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.NameContainsClassificationPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Finds and lists all persons in the Personal Trainer Pro application whose BodyMassIndexClassification matches"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * any of the given keywords."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class ClassificationCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bmi\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String INVALID_KEYWORD \u003d \"One or more invalid keyword(s) found! \\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose BMI classification matches \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" overweight\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"KEYWORD: \u0027Underweight\u0027(BMI \u003c 18.5), \u0027Acceptable\u0027 (18.5 \u003c\u003d BMI \u003c\u003d 24.9), \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    + \"\u0027Overweight\u0027 (25 \u003c\u003d BMI \u003c\u003d 29.9), \u0027Obese\u0027 (BMI \u003e 30)\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private final NameContainsClassificationPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public ClassificationCommand(NameContainsClassificationPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || (other instanceof ClassificationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((ClassificationCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "hypertun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "hypertun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"[\" + PREFIX_AGE + \"AGE] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITYLEVEL + \"ACTIVITY LEVEL] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Height updatedHeight \u003d editPersonDescriptor.getHeight().orElse(personToEdit.getHeight());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Weight updatedWeight \u003d editPersonDescriptor.getWeight().orElse(personToEdit.getWeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Age updatedAge \u003d editPersonDescriptor.getAge().orElse(personToEdit.getAge());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        ActivityLevel updatedActivityLevel \u003d editPersonDescriptor.getActivityLevel().orElse(personToEdit"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .getActivityLevel());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedHeight, updatedWeight,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                updatedGender, updatedAge, updatedActivityLevel, updatedTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        private Height height;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        private Weight weight;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        private Age age;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        private ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            setHeight(toCopy.height);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            setWeight(toCopy.weight);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            setAge(toCopy.age);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            setActivityLevel(toCopy.activityLevel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    this.height, this.weight, this.gender, this.age, this.activityLevel, this.tags);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setHeight(Height height) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            this.height \u003d height;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cHeight\u003e getHeight() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(height);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public void setWeight(Weight weight) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            this.weight \u003d weight;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public Optional\u003cWeight\u003e getWeight() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return Optional.ofNullable(weight);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public void setAge(Age age) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            this.age \u003d age;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public Optional\u003cAge\u003e getAge() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return Optional.ofNullable(age);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public void setActivityLevel(ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public Optional\u003cActivityLevel\u003e getActivityLevel() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return Optional.ofNullable(activityLevel);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getHeight().equals(e.getHeight())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    \u0026\u0026 getWeight().equals(e.getWeight())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    \u0026\u0026 getAge().equals(e.getAge())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    \u0026\u0026 getActivityLevel().equals(e.getActivityLevel())"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 8,
      "-": 250,
      "hypertun": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "hypertun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "hypertun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "hypertun": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_GENDER, PREFIX_AGE, PREFIX_ACTIVITYLEVEL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_HEIGHT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                PREFIX_WEIGHT, PREFIX_GENDER, PREFIX_AGE, PREFIX_ACTIVITYLEVEL)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT)).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT)).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE)).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            ActivityLevel activityLevel \u003d ParserUtil.parseActivityLevel(argMultimap.getValue(PREFIX_ACTIVITYLEVEL))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    .get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, height, weight, gender, age, activityLevel,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    tagList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 4,
      "-": 66,
      "hypertun": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.model.CalendarEvent.EventEndDate.INVALID_END_DATE_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.model.CalendarEvent.EventEndTime.INVALID_END_TIME_MESSAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_EVENT_START_DATE, PREFIX_EVENT_START_TIME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        PREFIX_EVENT_END_DATE, PREFIX_EVENT_END_TIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_EVENT_START_DATE, PREFIX_EVENT_START_TIME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                PREFIX_EVENT_END_DATE, PREFIX_EVENT_END_TIME)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            EventName eventName \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME)).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            EventStartDate eventStartDate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    ParserUtil.parseEventStartDate(argMultimap.getValue(PREFIX_EVENT_START_DATE)).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            EventStartTime eventStartTime \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    ParserUtil.parseEventStartTime(argMultimap.getValue(PREFIX_EVENT_START_TIME)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            EventEndDate eventEndDate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    ParserUtil.parseEventEndDate(argMultimap.getValue(PREFIX_EVENT_END_DATE)).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            EventEndTime eventEndTime \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    ParserUtil.parseEventEndTime(argMultimap.getValue(PREFIX_EVENT_END_TIME)).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            dateRestrictions(eventStartDate, eventEndDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            //If event is on same day, check for time restrictions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            if (eventStartDate.toString().equals(eventEndDate.toString())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    timeRestrictions(eventStartTime, eventEndTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    throw new ParseException(INVALID_END_TIME_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            CalendarEvent calendarEvent \u003d new CalendarEvent(eventName, eventStartDate, eventStartTime,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    eventEndDate, eventEndTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            return new AddEventCommand(calendarEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new ParseException(INVALID_END_DATE_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Checks if eventEndDate is earlier then eventStartDate and throws an exception if so."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void dateRestrictions (EventStartDate eventStartDate, EventEndDate eventEndDate) throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Date date1 \u003d sdf.parse(eventStartDate.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Date date2 \u003d sdf.parse(eventEndDate.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            if (date2.before(date1)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                throw new Exception(\"End Date cannot be earlier than Start Date!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            System.out.println(\"ParseException\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Checks if eventEndTime is earlier then eventStartTime if events are"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * on the same day and throws an exception if so."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void timeRestrictions (EventStartTime eventStartTime, EventEndTime eventEndTime) throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HH:MM\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Date time1 \u003d timeFormat.parse(eventStartTime.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Date time2 \u003d timeFormat.parse(eventEndTime.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            if (time2.before(time1)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                throw new Exception(\"End Time cannot be earlier than Start Time!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            System.out.println(\"ParseException\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.CaloriesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.ClassificationCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        * Adapted from https://nus-cs2103-ay1718s2.github.io/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        * addressbook-level4/DeveloperGuide.html#improving-each-component"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        case ClassificationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            return new ClassificationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case CaloriesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case CaloriesCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return new CaloriesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 8,
      "wenhao53": 5,
      "-": 91,
      "hypertun": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CaloriesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.CaloriesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Parses input arguments and creates a new CaloriesCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class CaloriesCommandParser implements Parser\u003cCaloriesCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CaloriesCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * and returns an CaloriesCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public CaloriesCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CaloriesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new CaloriesCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClassificationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.model.person.BodyMassIndex.ACCEPTABLE_CLASSIFICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.model.person.BodyMassIndex.OBESE_CLASSIFICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.model.person.BodyMassIndex.OVERWEIGHT_CLASSIFICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.model.person.BodyMassIndex.UNDERWEIGHT_CLASSIFICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.ClassificationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.NameContainsClassificationPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Parses input classifications and creates a new ClassificationCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class ClassificationCommandParser implements Parser\u003cClassificationCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClassificationCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * and returns an ClassificationCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public ClassificationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClassificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String[] classificationKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        checkClassificationKeywordValidity(classificationKeywords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return new ClassificationCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new NameContainsClassificationPredicate(Arrays.asList(classificationKeywords)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Checks the validity of the keywords input in the context of a Classification Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @throws ParseException if the keyword does not match any of the acceptable keywords"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void checkClassificationKeywordValidity(String[] classificationKeywords) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        for (String keyword:classificationKeywords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            if (!isValidClassifcationKeyword(keyword)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                        String.format(ClassificationCommand.INVALID_KEYWORD, ClassificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Checks the given keyword in the parser to see it if matches any of the allowable classification"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean isValidClassifcationKeyword(String keyword) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return keyword.compareToIgnoreCase(ACCEPTABLE_CLASSIFICATION) \u003d\u003d 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || keyword.compareToIgnoreCase(OBESE_CLASSIFICATION) \u003d\u003d 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || keyword.compareToIgnoreCase(OVERWEIGHT_CLASSIFICATION) \u003d\u003d 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || keyword.compareToIgnoreCase(UNDERWEIGHT_CLASSIFICATION) \u003d\u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"age/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITYLEVEL \u003d new Prefix(\"al/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_EVENT_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_EVENT_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_EVENT_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final Prefix PREFIX_EVENT_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 6,
      "-": 15,
      "hypertun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_GENDER, PREFIX_AGE, PREFIX_ACTIVITYLEVEL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT)).ifPresent(editPersonDescriptor::setHeight);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT)).ifPresent(editPersonDescriptor::setWeight);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).ifPresent(editPersonDescriptor::setGender);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE)).ifPresent(editPersonDescriptor::setAge);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            ParserUtil.parseActivityLevel(argMultimap.getValue(PREFIX_ACTIVITYLEVEL))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setActivityLevel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 3,
      "-": 80,
      "hypertun": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author wenhao53"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Parses a {@code String height} into a {@code Height}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @throws IllegalValueException if the given {@code height} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static Height parseHeight(String height) throws IllegalValueException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return new Height(trimmedHeight);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e height} into an {@code Optional\u003cHeight\u003e} if {@code height} is present."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static Optional\u003cHeight\u003e parseHeight(Optional\u003cString\u003e height) throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return height.isPresent() ? Optional.of(parseHeight(height.get())) : Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code weight} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Weight parseWeight(String weight) throws IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new Weight(trimmedWeight);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e weight} into an {@code Optional\u003cWeight\u003e} if {@code weight} is present."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cWeight\u003e parseWeight(Optional\u003cString\u003e weight) throws IllegalValueException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return weight.isPresent() ? Optional.of(parseWeight(weight.get())) : Optional.empty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @throws IllegalValueException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static Gender parseGender(String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return gender.isPresent() ? Optional.of(parseGender(gender.get())) : Optional.empty();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @throws IllegalValueException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static Age parseAge(String age) throws IllegalValueException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e age} into an {@code Optional\u003cAge\u003e} if {@code age} is present."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static Optional\u003cAge\u003e parseAge(Optional\u003cString\u003e age) throws IllegalValueException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return age.isPresent() ? Optional.of(parseAge(age.get())) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code String activityLevel} into a {@code ActivityLevel}."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @throws IllegalValueException if the given {@code activityLevel} is invalid."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static ActivityLevel parseActivityLevel(String activityLevel) throws IllegalValueException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(activityLevel);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String trimmedActivityLevel \u003d activityLevel.trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!ActivityLevel.isValidActivityLevel(trimmedActivityLevel)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new ActivityLevel(trimmedActivityLevel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e activityLevel} into an {@code Optional\u003cActivityLevel\u003e}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * if {@code activityLevel} is present."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static Optional\u003cActivityLevel\u003e parseActivityLevel(Optional\u003cString\u003e activityLevel) throws"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(activityLevel);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return activityLevel.isPresent() ? Optional.of(parseActivityLevel(activityLevel.get())) : Optional.empty();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static EventName parseEventName(String eventName) throws IllegalValueException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedName \u003d eventName.trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e eventName} into an {@code Optional\u003cEventName\u003e} if {@code eventName} is present."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cEventName\u003e parseEventName(Optional\u003cString\u003e eventName) throws IllegalValueException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventName.isPresent() ? Optional.of(parseEventName(eventName.get())) : Optional.empty();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String eventStartDate} into a {@code EventStartDate}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code eventStartDate} is invalid."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static EventStartDate parseEventStartDate(String eventStartDate) throws IllegalValueException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventStartDate);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedStartDate \u003d eventStartDate.trim();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!EventStartDate.isValidDate(trimmedStartDate)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(EventStartDate.MESSAGE_START_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new EventStartDate(trimmedStartDate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e eventStartDate} into an {@code Optional\u003cEventStartDate\u003e}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * if {@code eventStartDate} is present."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cEventStartDate\u003e parseEventStartDate(Optional\u003cString\u003e eventStartDate)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventStartDate);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventStartDate.isPresent() ? Optional.of(parseEventStartDate(eventStartDate.get())) : Optional.empty();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String eventEndDate} into a {@code EventEndDate}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code eventEndDate} is invalid."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static EventEndDate parseEventEndDate(String eventEndDate) throws IllegalValueException {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventEndDate);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedEndDate \u003d eventEndDate.trim();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!EventEndDate.isValidDate(trimmedEndDate)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(EventEndDate.MESSAGE_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new EventEndDate(trimmedEndDate);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e eventEndDate} into an {@code Optional\u003cEventEndDate\u003e}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * if {@code eventEndDate} is present."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cEventEndDate\u003e parseEventEndDate(Optional\u003cString\u003e eventEndDate)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventEndDate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventEndDate.isPresent() ? Optional.of(parseEventEndDate(eventEndDate.get())) : Optional.empty();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String eventStartTime} into a {@code EventStartTime}."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code eventStartTime} is invalid."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static EventStartTime parseEventStartTime(String eventStartTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventStartTime);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedStartTime \u003d eventStartTime.trim();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!EventStartTime.isValidTime(trimmedStartTime)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(EventStartTime.MESSAGE_START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new EventStartTime(trimmedStartTime);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e eventStartTime} into an {@code Optional\u003cEventStartTime\u003e}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * if {@code eventStartTime} is present."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cEventStartTime\u003e parseEventStartTime(Optional\u003cString\u003e eventStartTime)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventStartTime);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventStartTime.isPresent() ? Optional.of(parseEventStartTime(eventStartTime.get())) : Optional.empty();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code String eventEndTime} into a {@code EventEndTime}."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @throws IllegalValueException if the given {@code eventEndTime} is invalid."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static EventEndTime parseEventEndTime(String eventEndTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventEndTime);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String trimmedEndTime \u003d eventEndTime.trim();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!EventEndTime.isValidTime(trimmedEndTime)) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(EventEndTime.MESSAGE_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new EventEndTime(trimmedEndTime);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e eventEndTime} into an {@code Optional\u003cEventEndTime\u003e}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * if {@code eventEndTime} is present."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static Optional\u003cEventEndTime\u003e parseEventEndTime(Optional\u003cString\u003e eventEndTime)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventEndTime);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventEndTime.isPresent() ? Optional.of(parseEventEndTime(eventEndTime.get())) : Optional.empty();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 158,
      "wenhao53": 25,
      "-": 170,
      "hypertun": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                person.getHeight(), person.getWeight(), person.getGender(), person.getAge(), person.getActivityLevel(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                correctTagReferences);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 186,
      "hypertun": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/CalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.ReadOnlyCalendarEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents a Calendar event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarEvent implements ReadOnlyCalendarEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final EventStartDate eventStartDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final EventStartTime eventStartTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final EventEndDate eventEndDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final EventEndTime eventEndTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CalendarEvent (EventName eventName, EventStartDate eventStartDate, EventStartTime eventStartTime,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                          EventEndDate eventEndDate, EventEndTime eventEndTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireAllNonNull(eventName, eventStartDate, eventStartTime, eventEndDate, eventEndTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventStartDate \u003d eventStartDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventEndDate \u003d eventEndDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventName getEventName() { return eventName; }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventStartDate getEventStartDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventStartDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventStartTime getEventStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventStartTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventEndDate getEventEndDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventEndDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventEndTime getEventEndTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventEndTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(getEventStartDate())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(\" Start Time: \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(getEventStartTime())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(getEventEndDate())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(\" End Time: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(getEventEndTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/EventEndDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents the end date of an event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventEndDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_END_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Event end date should only contain numbers in the format YYYY-MM-DD. Eg. 2008-11-30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_DATE_MESSAGE \u003d \"End Date cannot be earlier than Start Date!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^\\\\d{4}\\\\-(0?[1-9]|1[012])\\\\-(0?[1-9]|[12][0-9]|3[01])$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs an {@code EventEndDate}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param endDate A valid endDate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventEndDate(String endDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(endDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidDate(endDate), MESSAGE_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid event end date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/EventEndTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents the end time of an event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventEndTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_END_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Event end time should only contain numbers in the HH:MM format. Eg. 11:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_TIME_MESSAGE \u003d \"End Time cannot be earlier than Start Time!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs an {@code EventEndTime}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param endTime A valid endTime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventEndTime(String endTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidTime(endTime), MESSAGE_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid event end time."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents the name of an event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_EVENT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Event name should only contain alphanumeric characters and spaces,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    + \" and it should not be blank. Eg. Weights Training\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENTNAME_VALIDATION_REGEX \u003d \"^[a-zA-Z0-9_ ]+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs a {@code EventName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param eventName A valid eventName."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidEventName(eventName), MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(EVENTNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/EventStartDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents the start date of an event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventStartDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_START_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Event start date should only contain numbers in the format YYYY-MM-DD. Eg. 2008-11-30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^\\\\d{4}\\\\-(0?[1-9]|1[012])\\\\-(0?[1-9]|[12][0-9]|3[01])$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs an {@code EventStartDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param startDate A valid startDate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventStartDate(String startDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(startDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidDate(startDate), MESSAGE_START_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid event start date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarEvent/EventStartTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents the start time of an event in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventStartTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_START_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Event start time should only contain numbers in the HH:MM format. Eg. 11:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs an {@code EventStartTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param startTime A valid startTime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventStartTime(String startTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidTime(startTime), MESSAGE_START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid event start time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /** Shows calories of given person */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    void showCalories(Person person) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "hypertun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.events.ui.ShowCaloriesEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void showCalories(Person person) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        raise(new ShowCaloriesEvent(person));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "hypertun": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCalendarEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Unmodifiable view of an event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public interface ReadOnlyCalendarEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns an unmodifiable view of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    EventName getEventName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    EventStartDate getEventStartDate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    EventStartTime getEventStartTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    EventEndDate getEventEndDate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    EventEndTime getEventEndTime();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ActivityLevel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Represents a Person\u0027s activity in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidActivityLevel(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class ActivityLevel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_ACTIVITYLEVEL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \"Activity Level can only be Basal Metabolic Rate(1.0), Sedentary(1.2) - little to no exercise per week,\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    + \" Lightly Active(1.375) - exercise 1-3 times per week,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    + \" Moderately Active(1.55) - exercise 3-5 times per week,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    + \" Very Active(1.725) -  exercise 6-7 times per week,\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    + \" Extra Active(1.9) - very hard exercise or physical job\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Constructs a {@code ActivityLevel}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @param activityLevel A valid ActivityLevel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public ActivityLevel(String activityLevel) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(activityLevel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        checkArgument(isValidActivityLevel(activityLevel), MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.value \u003d activityLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Returns true if a given string is a valid activityLevel."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static boolean isValidActivityLevel(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (test.equals(\"1.0\") || test.equals(\"1.2\") || test.equals(\"1.375\") || test.equals(\"1.55\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                || test.equals(\"1.725\") || test.equals(\"1.9\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                || (other instanceof ActivityLevel // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 this.value.equals(((ActivityLevel) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hypertun": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Represents a Person\u0027s age in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class Age {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \"Age can only be up to three numbers long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String AGE_VALIDATION_REGEX \u003d \"\\\\d{1,3}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @param age A valid age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.value \u003d age;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Returns true if a given string is a valid age."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return test.matches(AGE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 this.value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/BodyMassIndex.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Represents a Person\u0027s Body Mass Index (BMI) (in kg/m^2) in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Guarantees: mutable; is valid long as Height as declared in {@link #isValidHeight(String)} and Weight as"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * declared in {@Link #isValidWeight(String)} is valid."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class BodyMassIndex {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String ACCEPTABLE_CLASSIFICATION \u003d \"ACCEPTABLE\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String OBESE_CLASSIFICATION \u003d \"OBESE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String OVERWEIGHT_CLASSIFICATION \u003d \"OVERWEIGHT\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String UNDERWEIGHT_CLASSIFICATION \u003d \"UNDERWEIGHT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public final String classification;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private double bodyMassIndexValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private double heightValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private double weightValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Constructs a {@code BodyMassIndex}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @param height A valid height (in cm)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @param weight A valid weight (in kg)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public BodyMassIndex(String height, String weight) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        bodyMassIndexValue \u003d getBodyMassIndexValue(height, weight);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.classification \u003d getBodyMassIndexClassificationFromValue(bodyMassIndexValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.value \u003d convertBodyMassIndexValueToStringForDisplay(bodyMassIndexValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Formats the BMI value of a Person into a String, displayed to two decimal places."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private String convertBodyMassIndexValueToStringForDisplay(Double value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the BMI Classification of a Person when given the BMI value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private String getBodyMassIndexClassificationFromValue(Double bodyMassIndexValue) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        if (bodyMassIndexValue \u003c 18.5) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            return UNDERWEIGHT_CLASSIFICATION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } else if (bodyMassIndexValue \u003c 25) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            return ACCEPTABLE_CLASSIFICATION;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } else if (bodyMassIndexValue \u003c 30) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            return OVERWEIGHT_CLASSIFICATION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            return OBESE_CLASSIFICATION;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the BMI value of a Person when given valid Height and Weight"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private double getBodyMassIndexValue(String height, String weight) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        heightValue \u003d Double.parseDouble(height);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        weightValue \u003d Double.parseDouble(weight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        bodyMassIndexValue \u003d calculateBodyMassIndexValueFromHeightAndWeight(heightValue, weightValue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return bodyMassIndexValue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the BMI value calculated from heightValue and weightValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private double calculateBodyMassIndexValueFromHeightAndWeight(double heightValue, double weightValue) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return weightValue / ((heightValue / 100) * (heightValue / 100));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Represents a Person\u0027s Gender (whether male or female) in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \"Gender can only be the alphabets M or F or m or f\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String GENDER_VALIDATION_REGEX \u003d \"[mfMF]{1}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * @param sex A valid gender."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public Gender(String sex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireNonNull(sex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        checkArgument(isValidGender(sex), MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.value \u003d sex.toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Returns true if a given string is a valid Gender."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return test.matches(GENDER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Height.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Represents a Person\u0027s height (in cm) in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHeight(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String MESSAGE_HEIGHT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            \"Height(in cm) can only contain numbers and decimals, and should be at between 10.0 to 400.0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String HEIGHT_VALIDATION_REGEX \u003d \"\\\\d{2,}(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @param height A valid height (in cm)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public Height(String height) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        checkArgument(isValidHeight(height), MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.value \u003d height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return test.matches(HEIGHT_VALIDATION_REGEX) \u0026\u0026 heightWithinRange(test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns true if a given Height string is within the allowable range of input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private static boolean heightWithinRange(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return Double.parseDouble(test) \u003e\u003d 10.0 \u0026\u0026 Double.parseDouble(test) \u003c\u003d 400.0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                \u0026\u0026 this.value.equals(((Height) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 56,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author wenhao53"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns true if two Names in comparison are alphabetically the same (regardless of case)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean alphabeticallyEquals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                \u0026\u0026 this.fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsClassificationPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code BodyMassIndexClassification} matches the given search query."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class NameContainsClassificationPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public NameContainsClassificationPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return keywords.stream().anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                StringUtil.containsWordIgnoreCase(person.getBodyMassIndexClassification(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || (other instanceof NameContainsClassificationPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((NameContainsClassificationPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private final BodyMassIndex bodyMassIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private final String bodyMassIndexClassification;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private final ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Height height,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                  Weight weight, Gender gender, Age age, ActivityLevel activityLevel, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        requireAllNonNull(name, phone, email, address, height, weight, age, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.bodyMassIndex \u003d new BodyMassIndex(height.toString(), weight.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.bodyMassIndexClassification \u003d bodyMassIndex.classification;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public BodyMassIndex getBodyMassIndex() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return bodyMassIndex;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public String getBodyMassIndexClassification() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return bodyMassIndexClassification;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public ActivityLevel getActivityLevel() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().alphabeticallyEquals(this.getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().alphabeticallyEquals(this.getAddress())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getHeight().equals(this.getHeight())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 otherPerson.getWeight().equals(this.getWeight())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(this.getGender())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(this.getAge())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 otherPerson.getActivityLevel().equals(this.getActivityLevel());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return Objects.hash(name, phone, email, address, height, weight, gender, age, activityLevel, tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Height: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getHeight())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(\" Weight: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .append(getWeight())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(\" Age: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(getAge())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(\" Activity Level: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .append(getActivityLevel())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 5,
      "wenhao53": 13,
      "-": 107,
      "hypertun": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Weight.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Represents a Person\u0027s weight (in Kg) in the Personal Trainer Pro app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String MESSAGE_WEIGHT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"Weight(in Kg) can only contain numbers and decimals, and should be at least 2 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String WEIGHT_VALIDATION_REGEX \u003d \"\\\\d{2,}(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * @param weight A valid weight (in Kg)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public Weight(String weight) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        checkArgument(isValidWeight(weight), MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.value \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return test.matches(WEIGHT_VALIDATION_REGEX) \u0026\u0026 weightWithinRange(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author wenhao53"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns true if a given Weight string is within the allowable range of input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private static boolean weightWithinRange(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return Double.parseDouble(test) \u003e\u003d 10.0 \u0026\u0026 Double.parseDouble(test) \u003c\u003d 400.0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                \u0026\u0026 this.value.equals(((Weight) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 55,
      "wenhao53": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/HtmlFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": " * Change PersonCard to html format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class HtmlFormatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static String getHtmlFormat(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String name \u003d person.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String phone \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String email \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String height \u003d person.getHeight().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String weight \u003d person.getWeight().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String bmi \u003d person.getBodyMassIndex().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String age \u003d person.getAge().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String activityLevel \u003d person.getActivityLevel().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (person.getGender().toString().equals(\"m\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            gender \u003d \"Male\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            gender \u003d \"Female\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        URL personcardcss \u003d MainApp.class.getResource(FXML_FILE_FOLDER + \"PersonCard.css\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String bodyhtmlcode \u003d \"\u003cdiv class\u003d\\\"container\\\"\u003e\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003ch1\u003ePersonal Trainer Pro\u003c/h1\u003e\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003ch2\u003ev1.5\u003c/h2\u003e\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cdiv class\u003d\\\"service-details\\\"\u003e\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cimg src\u003d\\\"https://cdn.pixabay.com/photo/2014/03/24/13/40/dumbbells-293955_960_720.png\\\"\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \" alt\u003d\\\"realm\\\" /\u003e\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cdiv class\u003d\\\"service-hover-text\\\"\u003e\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003ch3\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + gender"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/h3\u003e\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003ch4\u003eBMI :\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + bmi"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/h4\u003e\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003ePhone Number :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + phone"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003eAddress :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + address"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003eHeight :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + height"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003eWeight :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + weight"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003eAge :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + age"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003eActivity Level :\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + activityLevel"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cdiv class\u003d\\\"service-white service-text\\\"\u003e\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cp\u003e\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/p\u003e\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003ca href\u003d\\\"#\\\"\u003e@\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + email"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/a\u003e\u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/div\u003e\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String htmlcode \u003d \"\u003chtml\u003e\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003chead\u003e\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003clink rel \u003d \u0027stylesheet\u0027 type\u003d\u0027text/css\u0027 href\u003d\u0027\" + personcardcss.toExternalForm() + \"\u0027 /\u003e\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/head\u003e\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003cbody\u003e\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + bodyhtmlcode"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/body\u003e\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"\u003c/html\u003e\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return htmlcode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Height(\"169.0\"), new Weight(\"55.5\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Height(\"169.0\"), new Weight(\"55.5\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    new Gender(\"F\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Height(\"169.0\"), new Weight(\"85.5\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    new Gender(\"F\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Height(\"169.0\"), new Weight(\"45.5\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Height(\"169.0\"), new Weight(\"55.5\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Height(\"169.0\"), new Weight(\"99.5\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Elliot Kingsly\"), new Phone(\"96524617\"), new Email(\"elliotk@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 College Ave East, #11-31\"), new Height(\"179.0\"), new Weight(\"45.5\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"acquaintance\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Fabian Journey\"), new Phone(\"92802347\"), new Email(\"fabianj@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"30 College Ave East, #21-160\"), new Height(\"169.0\"), new Weight(\"95.5\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"George Lincoln\"), new Phone(\"93023853\"), new Email(\"georgel@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 Colleg Ave East, #10-150\"), new Height(\"169.0\"), new Weight(\"45.5\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Holdor Stopdor\"), new Phone(\"91203312\"), new Email(\"holdors@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 College Ave East, #05-170A\"), new Height(\"169.0\"), new Weight(\"55.5\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"cousin\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Julienne Vegette\"), new Phone(\"90012593\"), new Email(\"cutvege@example.com\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 College Ave West, #20-180\"), new Height(\"169.0\"), new Weight(\"85.5\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"F\"), new Age(\"22\"), new ActivityLevel(\"1.375\"), getTagSet(\"cousin\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Kingler Watercrab\"), new Phone(\"90901238\"), new Email(\"krabby@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 Seafoam Islands, #01-10\"), new Height(\"179.0\"), new Weight(\"65.5\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Ligate Tor\"), new Phone(\"91920123\"), new Email(\"croc@example.com\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"17 Kerning Swamps\"), new Height(\"169.0\"), new Weight(\"45.5\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"crocodile\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Maggie Karp\"), new Phone(\"92112391\"), new Email(\"uselessfish@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 Hoenn Waters, #01-01\"), new Height(\"179.0\"), new Weight(\"75.5\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"F\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Never Gionna\"), new Phone(\"90231238\"), new Email(\"letyouup@example.com\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"13 Rick Roll, #01-02\"), new Height(\"169.0\"), new Weight(\"85.5\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"mememaker\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Olive Pickles\"), new Phone(\"91032031\"), new Email(\"vege@example.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Height(\"169.0\"), new Weight(\"45.5\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"F\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Pian Urse\"), new Phone(\"82013381\"), new Email(\"bigfish@example.com\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"26 Aquarium Depths, #01-02\"), new Height(\"149.0\"), new Weight(\"105.5\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"72\"), new ActivityLevel(\"1.0\"), getTagSet(\"boss\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Queen Trojan\"), new Phone(\"90012491\"), new Email(\"neighneigh@example.com\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"10 Ludibrium Tower, #03-01\"), new Height(\"169.0\"), new Weight(\"105.5\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"horse\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Sparta Kook\"), new Phone(\"91102941\"), new Email(\"commander@example.com\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"271 Euljiro-3-Ga\"), new Height(\"172.0\"), new Weight(\"82.5\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"korean\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            new Person(new Name(\"Tropi Us\"), new Phone(\"91239910\"), new Email(\"grassbird@example.com\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new Address(\"21 Grasslands Ave, #01-20\"), new Height(\"189.0\"), new Weight(\"65.5\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    new Gender(\"M\"), new Age(\"22\"), new ActivityLevel(\"1.2\"), getTagSet(\"grasstype\"))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "wenhao53": 46,
      "-": 59,
      "hypertun": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    String getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 4,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private String weight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private String height;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private String age;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private String activityLevel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                            String height, String weight, String gender, String age, String activityLevel,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        height \u003d source.getHeight().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        weight \u003d source.getWeight().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        age \u003d source.getAge().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        activityLevel \u003d source.getActivityLevel().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.height \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Height.isValidHeight(this.height)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final Height height \u003d new Height(this.height);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (this.weight \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        if (!Weight.isValidWeight(this.weight)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        final Weight weight \u003d new Weight(this.weight);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (this.gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!Gender.isValidGender(this.gender)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final Gender gender \u003d new Gender(this.gender);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (this.age \u003d\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!Age.isValidAge(this.age)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final Age age \u003d new Age(this.age);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (this.activityLevel \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ActivityLevel"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    .class.getSimpleName()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        if (!ActivityLevel.isValidActivityLevel(this.activityLevel)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalValueException(ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final ActivityLevel activityLevel \u003d new ActivityLevel(this.activityLevel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new Person(name, phone, email, address, height, weight, gender, age, activityLevel, tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(height, otherPerson.height)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                \u0026\u0026 Objects.equals(weight, otherPerson.weight)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 Objects.equals(gender, otherPerson.gender)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 Objects.equals(age, otherPerson.age)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \u0026\u0026 Objects.equals(activityLevel, otherPerson.activityLevel)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 15,
      "-": 149,
      "hypertun": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        File addressBookFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!addressBookFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        saveAddressBook(addressBook, filePath + \".backup\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 5,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.events.ui.ShowCaloriesEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.util.HtmlFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"https://www.google.com.sg/search?q\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_PREFIX_URL \u003d \"http://www.calculator.net/calorie-calculator.html?ctype\u003dmetric\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_AGE_PREFIX \u003d \"\u0026cage\u003d\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_GENDER_PREFIX \u003d \"\u0026csex\u003d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_HEIGHT_PREFIX \u003d \"\u0026cheightfeet\u003d5\u0026cheightinch\u003d10\u0026cpound\u003d160\u0026cheightmeter\u003d\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_WEIGHT_PREFIX \u003d \"\u0026ckg\u003d\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_ACTIVITY_LEVEL_PREFIX \u003d \"\u0026cactivity\u003d\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String CALCULATOR_SUFFIX_URL \u003d \"\u0026printit\u003d0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        browser.getEngine().loadContent(HtmlFormatter.getHtmlFormat(person));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Creates calories from given person"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void loadPersonCalories(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        loadPage(CALCULATOR_PREFIX_URL"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_AGE_PREFIX + person.getAge().value"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_GENDER_PREFIX + person.getGender().value"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_HEIGHT_PREFIX + person.getHeight().value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_WEIGHT_PREFIX + person.getWeight().value"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_ACTIVITY_LEVEL_PREFIX + person.getActivityLevel().value"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + CALCULATOR_SUFFIX_URL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        loadPersonPage(event.getNewSelection().person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private void handleShowCaloriesEvent(ShowCaloriesEvent event) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                \"Processing Calories of \" + event.person.getName().fullName));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        loadPersonCalories(event.person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 56,
      "hypertun": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Controller for a Calendar Window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String CALENDAR_PAGE_URL \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            \"https://calendar.google.com/calendar\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CalendarWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private WebView calendar;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Creates a new Calendar Window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CalendarWindow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        loadCalendarPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void loadCalendarPage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        loadPage(CALENDAR_PAGE_URL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Platform.runLater(() -\u003e calendar.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Frees resources allocated to the Google calendar."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        calendar \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void showCalendarEvent (ShowCalendarEvent event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        loadPage(CALENDAR_PAGE_URL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.events.ui.ShowCaloriesEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private CalendarWindow calendarWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    //@@author wayneong95"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Switch to calendar window."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void handleCalendar() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        calendarWindow \u003d new CalendarWindow();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        browserPlaceholder.getChildren().add(calendarWindow.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        browserPlaceholder.getChildren().setAll(calendarWindow.getRoot());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Switch to browser from calendar."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void handleBrowser() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        browserPlaceholder.getChildren().setAll(browserPanel.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private void handleShowCalendarEvent(ShowCalendarEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        handleCalendar();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private void handleShowCaloriesEvent(ShowCaloriesEvent event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        handleBrowser();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private void handleShowBrowserEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        handleBrowser();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 37,
      "-": 192,
      "hypertun": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private String bmiClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        gender.setText(person.getGender().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        //@@author wenhao53"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        bmiClass \u003d person.getBodyMassIndexClassification();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        setBackgroundColourAccordingToClassification(cardPane, bmiClass);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private void setBackgroundColourAccordingToClassification(HBox cardPane, String bmiClass) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d cardPane.getStyleClass();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        styleClass.setAll(\"cardPane\", bmiClass);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 16,
      "-": 68,
      "hypertun": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPersonCard\u003e personListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(mappedList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(PersonCard person, boolean empty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/personal_trainer_pro_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "wenhao53": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/resources/client_secret.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "{\"installed\":{\"client_id\":\"294160962796-gkl8ka1uubqp7or0j3tjsv2ba8c5hm7v.apps.googleusercontent.com\",\"project_id\":\"apt-canyon-198615\",\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"token_uri\":\"https://accounts.google.com/o/oauth2/token\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\",\"client_secret\":\"Q04ID3X7C95h5AM-2sSfYngF\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"http://localhost\"]}}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "  \u003cWebView fx:id\u003d\"calendar\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/* @@author wenhao53 */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".ACCEPTABLE {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #003000;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#003000, 25%);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".OBESE {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #500000;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#500000, 25%);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".OVERWEIGHT {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #553300;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#553300, 25%);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".UNDERWEIGHT {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #553300;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#553300, 25%);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/* @@author */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 33,
      "-": 345
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/* @@author wayneong95 */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    background-color: white;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-base: white;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-control-inner-background: white;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-table-cell-border-color: #dddddd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-table-header-border-color: #dddddd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        #dddddd"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        #dddddd"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        #dddddd"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        #dddddd;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: #dddddd #dddddd #dddddd #dddddd;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #eaedf2;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: #000000;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     -fx-border-color: #dddddd #dddddd #dddddd #dddddd;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: #dddddd;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: #dddddd;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-style: null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #cccccc;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:hover{"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:pressed, .button:default:hover:pressed"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "{"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "  -fx-text-fill: white;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:focused"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "{"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-style: segments(1, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:disabled, .button:default:disabled"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "{"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #cccccc;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: #212121;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:default"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "{"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #008287;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".button:default:hover{"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #219297;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #bbbbbb;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/* @@author wenhao53 */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-radius: 6;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-radius: 6;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".ACCEPTABLE {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #ddffdd;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#ddffdd, -30%);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".OBESE {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #ffdddd;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#ffdddd, -30%);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".OVERWEIGHT {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #ffe3bf;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#ffe3bf, -30%);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ".UNDERWEIGHT {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: #ffffdd;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-color: derive(#ffffdd, -30%);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/* @@author */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    -fx-background-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-color: #dddddd #dddddd #dddddd #dddddd;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-effect: innershadow(gaussian, white, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 350,
      "wenhao53": 32
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    \u003cImage url\u003d\"@/images/personal_trainer_pro_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "wenhao53": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/PersonCard.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "@import \"compass/css3\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dOpen+Sans:400,300,700);"
      },
      {
        "lineNumber": 4,
        "content": "/* @@author hypertun-reused */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "body {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    background:#485b6e;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    max-width:500px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin-left:auto;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin-right:auto;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin-top:10%;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "h1 {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\", sans;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-weight:300;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    text-align:center;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color:rgba(255,255,255,0.6)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "h2 {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color:#2c3e52;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family:  \"Open Sans\", sans;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 14px;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    text-align:center;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-weight:700;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin-bottom:50px;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: 600px;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: 460px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    overflow: hidden;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    position: relative;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details img {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    top: 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    left: 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: inherit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: auto;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    transition: all 0.8s;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    -moz-transition: all 0.8s;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details:hover img {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /*opacity: 0.4 !important;*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-hover-text h3 {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 25px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-weight:300;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-hover-text h4 {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding-bottom: 13px;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 14px;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    letter-spacing: 3px;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: 90%;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    text-transform:uppercase;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    border-bottom: 2px solid #000;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-hover-text p {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 9px;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    line-height: 10px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-hover-text{"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: 42%;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: 89%;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    top: 0%;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    left: 50%;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding: 3% 4%;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    background: #D90E0E;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color: rgba(255,255,255,1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /*\tdisplay: none;*/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    transition: all 0.5s ease-in-out;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    -moz-transition: all 0.4s;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details:hover .service-hover-text {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    display: block !important;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color: rgba(255,255,255,1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    background:rgba(217,14,14,0.85);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    left: 0px;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    top: 0px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-text {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: 50%;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: inherit;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    background: #000;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    position: absolute;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    left: 50%;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-text p {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding:100px 0px 0px 20px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 24px;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-weight:700;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color: #fff;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-text p span {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\" !important;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-text a , .service-white .service-text {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    padding: 0px 0px 0px 20px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-size: 14px !important;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color:#FF5A22 !important;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    font-family: \"Open Sans\" !important;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    text-decoration: none !important;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-details .service-text {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-white {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    background: #eee !important;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    width: 50% !important;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    height: inherit !important;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hypertun"
        },
        "content": ".service-white p {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    color: #000 !important;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "hypertun": 148
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/9.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "  \u003cGridPane prefWidth\u003d\"150.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003c!-- @@author hypertun --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         \u003cLabel text\u003d\"Name(Gender):\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cLabel fx:id\u003d\"gender\" alignment\u003d\"CENTER\" style\u003d\"-fx-text-fill: crimson;\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         \u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "           \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "             \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "             \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                  \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "           \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         \u003cLabel text\u003d\"Phone:\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         \u003cLabel text\u003d\"Address:\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "         \u003cLabel text\u003d\"Email:\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "               \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 5,
      "-": 23,
      "hypertun": 42
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"LightTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "hypertun": 8
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "hypertun": 4
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 11,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{@code TypicalPersons#getTypicalAddressBook()}--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e85355255\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cweight\u003e95.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cweight\u003e95.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cweight\u003e45.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        \u003cweight\u003e75.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003efriends\u003c/tags\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003eowesMoney\u003c/tags\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 3,
      "wenhao53": 4,
      "-": 59,
      "hypertun": 21
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 10,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 9,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cheight isPrivate\u003d\"false\"\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        \u003cweight isPrivate\u003d\"false\"\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        \u003cactivityLevel isPrivate\u003d\"false\"\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 9,
      "-": 66,
      "hypertun": 27
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cheight\u003e169.0\u003c/height\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    \u003cweight\u003e55.5\u003c/weight\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cgender\u003ef\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cage\u003e22\u003c/age\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    \u003cactivityLevel\u003e1.2\u003c/activityLevel\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 9,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 50000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return listTargetWindows().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .count() \u003e\u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 104
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Returns the HTML of the currently loaded page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String getLoadedHtml() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return webView.getEngine().getDocument().getDocumentElement().getTextContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "hypertun": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CalendarWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * A handler for the {@code CalendarWindow} of the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarWindowHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String CALENDARWINDOW_ID \u003d \"#calendar\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CalendarWindowHandle(Node calendarWindowNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        super(calendarWindowNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        WebView webView \u003d getChildNode(CALENDARWINDOW_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(CALENDARWINDOW_ID));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 66
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "hypertun": 7
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void waitUntilBrowserLoaded(BrowserPanelHandle browserPanelHandle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * If the {@code calendarWindowHandle}\u0027s {@code WebView} is loading,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static void waitUntilCalendarLoaded(CalendarWindowHandle calendarWindowHandle) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        new GuiRobot().waitForEvent(calendarWindowHandle::isLoaded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new AssertionError(\"Data is not in the Personal Trainer Pro format.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStorageSaveLocation() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            File saveFileForTesting \u003d new File(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(saveFileForTesting);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(saveFileForTesting, data);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Personal Trainer Pro\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "hypertun": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /* To be edited"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false,  errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"169.0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final String VALID_WEIGHT \u003d \"55.5\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_GENDER \u003d \"f\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_AGE \u003d \"22\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_ACTIVITYLEVEL \u003d \"1.2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 1,
      "-": 147,
      "hypertun": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        public void showCalories(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            fail(\"This method should not be called. \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 171,
      "hypertun": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**Test for AddEvent command*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        new AddEventCommand(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /* Works only on manual testing as it requires authentication by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void execute_event_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent validEvent \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CommandResult commandResult \u003d getAddEventCommandForEvent(validEvent).execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Tests for same command created by the same event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void addEvent_sameEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent event1 \u003d new EventBuilder().withEventName(\"Weights Training\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        AddEventCommand command1 \u003d new AddEventCommand(event1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        AddEventCommand command2 \u003d new AddEventCommand(event1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        //Tests if command1 is equals to command2."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(command1.equals(command2));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Generates a new AddEventCommand with the details of the given CalendarEvent."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private AddEventCommand getAddEventCommandForEvent(CalendarEvent event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        AddEventCommand command \u003d new AddEventCommand(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CalendarCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CalendarCommand.SHOWING_CALENDAR_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void execute_calendar_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CommandResult result \u003d new CalendarCommand().execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertEquals(SHOWING_CALENDAR_MESSAGE, result.feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowCalendarEvent);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CaloriesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.commons.events.ui.ShowCaloriesEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class CaloriesCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        CaloriesCommand caloriesCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(caloriesCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final CaloriesCommand standardCommand \u003d new CaloriesCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final CaloriesCommand commandWithSameIndex \u003d new CaloriesCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        final CaloriesCommand commandWithDifferentIndex \u003d new CaloriesCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // same object -\u003e Returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // different object, same type with same values -\u003e return true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // same type but different index -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithDifferentIndex));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void checkIfEventCollected() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        CaloriesCommand caloriesCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        caloriesCommand.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowCaloriesEvent);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Executes a {@code CaloriesCommand} with the given {@code index}, and checks that {@code ShowCaloriesEvent}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        CaloriesCommand caloriesCommand \u003d prepareCommand(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            CommandResult commandResult \u003d caloriesCommand.execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            assertEquals(String.format(CaloriesCommand.MESSAGE_FIND_CALORIES_SUCCESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    model.getFilteredPersonList().get(index.getZeroBased()).getName().fullName,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    model.getFilteredPersonList().get(index.getZeroBased()).getAddress().value),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                    commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        ShowCaloriesEvent lastEvent \u003d (ShowCaloriesEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(index.getZeroBased()), lastEvent.person);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Returns an {@code CaloriesCommand} with parameters {@code index}}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private CaloriesCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        CaloriesCommand caloriesCommand \u003d new CaloriesCommand(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        caloriesCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return caloriesCommand;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClassificationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_KEYWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.logic.commands.ClassificationCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.NameContainsClassificationPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ClassificationCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class ClassificationCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        NameContainsClassificationPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new NameContainsClassificationPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        NameContainsClassificationPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new NameContainsClassificationPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand classificationFirstCommand \u003d new ClassificationCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand classificationSecondCommand \u003d new ClassificationCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(classificationFirstCommand.equals(classificationFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand classificationFirstCommandCopy \u003d new ClassificationCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(classificationFirstCommand.equals(classificationFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(classificationFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(classificationFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(classificationFirstCommand.equals(classificationSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandFailure(command, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_incorrectKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_KEYWORD, MESSAGE_USAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"notValid\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandFailure(command, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_acceptableClassification_personFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"acceptable\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_obeseClassification_personFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"obese\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_overweightClassification_personFound() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"overweight\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.singletonList(GEORGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_underweightClassification_personFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"underweight\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.singletonList(FIONA));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_overweightAndUnderweightClassification_personFound() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"underweight overweight\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(FIONA, GEORGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_underweightAndAcceptableClassification_personFound() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"underweight acceptable\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE, FIONA));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_underweightAndObeseClassification_personFound() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"underweight obese\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, FIONA));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_acceptableAndOverweightClassification_personFound() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"overweight acceptable\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE, GEORGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_acceptableAndObeseClassification_personFound() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"obese acceptable\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_overweightAndObeseClassification_personFound() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"obese overweight\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, GEORGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_allClassification_personFound() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d prepareCommand(\"underweight overweight obese acceptable\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Parses {@code userInput} into a {@code ClassificationCommand}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private ClassificationCommand prepareCommand(String userInput) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand command \u003d new ClassificationCommand("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new NameContainsClassificationPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private void assertCommandSuccess(ClassificationCommand command,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                                      String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Asserts that {@code command} is not successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - there is no {@code FilteredList\u003cPerson\u003e} displayed\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     *     - the model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private void assertCommandFailure(ClassificationCommand command, String expectedMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertNotEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_HEIGHT_AMY \u003d \"158.0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_HEIGHT_BOB \u003d \"169.0\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_WEIGHT_AMY \u003d \"55.5\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_WEIGHT_BOB \u003d \"65.5\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"f\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"m\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"22\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"23\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_ACTIVITYLEVEL_AMY \u003d \"1.2\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String VALID_ACTIVITYLEVEL_BOB \u003d \"1.9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_EVENT_NAME \u003d \"Weights Training\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_START_DATE \u003d \"2018-05-20\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_START_TIME \u003d \"15:30\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_END_DATE \u003d \"2018-05-20\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String VALID_END_TIME \u003d \"16:30\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENT_START_DATE_DESC \u003d \" \" + PREFIX_EVENT_START_DATE + VALID_START_DATE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENT_START_TIME_DESC \u003d \" \" + PREFIX_EVENT_START_TIME + VALID_START_TIME;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENT_END_DATE_DESC \u003d \" \" + PREFIX_EVENT_END_DATE + VALID_END_DATE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String EVENT_END_TIME_DESC \u003d \" \" + PREFIX_EVENT_END_TIME + VALID_END_TIME;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HEIGHT_DESC_AMY \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HEIGHT_DESC_BOB \u003d \" \" + PREFIX_HEIGHT + VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String WEIGHT_DESC_AMY \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String WEIGHT_DESC_BOB \u003d \" \" + PREFIX_WEIGHT + VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String ACTIVITYLEVEL_DESC_AMY \u003d \" \" + PREFIX_ACTIVITYLEVEL + VALID_ACTIVITYLEVEL_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String ACTIVITYLEVEL_DESC_BOB \u003d \" \" + PREFIX_ACTIVITYLEVEL + VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_HEIGHT_DESC \u003d \" \" + PREFIX_HEIGHT; // empty string not allowed for height"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_WEIGHT_DESC \u003d \" \" + PREFIX_WEIGHT; // empty string not allowed for weight"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"Y\"; // \u0027Y\u0027 not allowed for gender"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"Y\"; // \u0027Y\u0027 not allowed for age"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String INVALID_ACTIVITYLEVEL_DESC \u003d \" \" + PREFIX_ACTIVITYLEVEL + \"Y\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    // \u0027Y\u0027 not allowed for activity level"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_EVENT_NAME \u003d \"Weights\u0026Training\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_START_DATE \u003d \"18-05-20\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_START_TIME \u003d \"15:300\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_DATE \u003d \"18-05-20\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_TIME \u003d \"160:30\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"Weight\u0026Training\"; // \u0027\u0026\u0027 not allowed in event names"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_EVENT_START_DATE"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"18-05-20\"; // Start Date should be in YYYY-MM-DD format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_EVENT_START_TIME"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"3:300\"; // Start Time should be in HH:MM format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_EVENT_END_DATE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"18-05-20\"; // End Date should be in YYYY-MM-DD format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_EVENT_END_TIME"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            + \"4:300\"; // End Time should be in HH:MM format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 40,
      "-": 162,
      "hypertun": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // different age -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_AGE_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // different activityLevel -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ACTIVITYLEVEL_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "hypertun": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITYLEVEL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withWeight(VALID_WEIGHT_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY).withTags().build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing height prefix"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + VALID_HEIGHT_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing weight prefix"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + VALID_WEIGHT_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + WEIGHT_DESC_BOB + VALID_GENDER_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // missing age prefix"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + WEIGHT_DESC_BOB  + GENDER_DESC_BOB + VALID_AGE_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // missing activityLevel prefix"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + WEIGHT_DESC_BOB  + GENDER_DESC_BOB + AGE_DESC_BOB + VALID_ACTIVITYLEVEL_BOB,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + VALID_HEIGHT_BOB + VALID_WEIGHT_BOB + VALID_GENDER_BOB + VALID_AGE_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + VALID_ACTIVITYLEVEL_BOB,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB  + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + INVALID_HEIGHT_DESC + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Height.MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + INVALID_WEIGHT_DESC + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Weight.MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid Gender"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + INVALID_GENDER_DESC + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid Age"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + INVALID_AGE_DESC + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid ActivityLevel"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + INVALID_ACTIVITYLEVEL_DESC"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 29,
      "-": 142,
      "hypertun": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_DATE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.model.CalendarEvent.EventEndDate.INVALID_END_DATE_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.model.CalendarEvent.EventEndTime.INVALID_END_TIME_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent expectedEvent \u003d new EventBuilder().withEventName(VALID_EVENT_NAME)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withStartDate(VALID_START_DATE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withStartTime(VALID_START_TIME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withEndDate(VALID_END_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withEndTime(VALID_END_TIME)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Command actual \u003d parser.parse(PREAMBLE_WHITESPACE + EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                    + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            Command expected \u003d new AddEventCommand(expectedEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            expected.equals(actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parse_invalidEndDate_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_END_DATE_MESSAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        //end date earlier than start date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + \" sd/2018-05-20\" + EVENT_START_TIME_DESC"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + \" ed/2018-05-19\" + EVENT_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parse_invalidEndTime_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_END_TIME_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        //end time earlier than start time"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC + \" st/11:30\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + EVENT_END_DATE_DESC + \" et/10:30\", expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing eventName prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_NAME + EVENT_START_DATE_DESC + EVENT_START_TIME_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing eventStartDate prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + VALID_START_DATE + EVENT_START_TIME_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing eventStartTime prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC + VALID_START_TIME"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing eventEndDate prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC + EVENT_START_TIME_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + VALID_END_DATE + EVENT_END_TIME_DESC, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // missing eventEndTime prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC + EVENT_START_TIME_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + EVENT_END_DATE_DESC + VALID_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_NAME + VALID_START_DATE + VALID_START_TIME"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + VALID_END_DATE + VALID_END_TIME, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventName"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventStartDate"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventStartDate.MESSAGE_START_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventStartTime"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventStartTime.MESSAGE_START_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventEndDate"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_START_TIME_DESC + INVALID_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventEndDate.MESSAGE_END_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventEndTime"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + INVALID_END_TIME_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventEndTime.MESSAGE_END_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC + EVENT_START_DATE_DESC"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + EVENT_START_TIME_DESC + EVENT_END_DATE_DESC + EVENT_END_TIME_DESC,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.CaloriesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void parseCommand_calendar() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_WORD) instanceof CalendarCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_WORD + \" 3\") instanceof CalendarCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parseCommand_calories() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        CaloriesCommand command \u003d (CaloriesCommand) parser.parseCommand("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                CaloriesCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(new CaloriesCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 8,
      "-": 143,
      "hypertun": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CaloriesCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.logic.commands.CaloriesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class CaloriesCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private CaloriesCommandParser parser \u003d new CaloriesCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parse_validArgs_returnsCaloriesCommand() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseSuccess(parser, \"1\", new CaloriesCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CaloriesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClassificationCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.ClassificationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.NameContainsClassificationPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class ClassificationCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private ClassificationCommandParser parser \u003d new ClassificationCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                ClassificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void parse_validArgs_returnsClassifcationCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ClassificationCommand expectedClassificationCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                new ClassificationCommand(new NameContainsClassificationPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                        Arrays.asList(\"underweight\", \"overweight\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertParseSuccess(parser, \"underweight overweight\", expectedClassificationCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertParseSuccess(parser, \" \\n underweight \\n \\t overweight  \\t\", expectedClassificationCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertParseFailure(parser, \"notAValidKeyword\", String.format(MESSAGE_INVALID_KEYWORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                ClassificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITYLEVEL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_HEIGHT_DESC, Height.MESSAGE_HEIGHT_CONSTRAINTS); // invalid height"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WEIGHT_DESC, Weight.MESSAGE_WEIGHT_CONSTRAINTS); // invalid weight"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AGE_DESC, Age.MESSAGE_AGE_CONSTRAINTS); // invalid age"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseFailure(parser, \"1\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + INVALID_ACTIVITYLEVEL_DESC, ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS); // invalid activityLevel"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // height"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withHeight(VALID_HEIGHT_AMY).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // weight"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withWeight(VALID_WEIGHT_AMY).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // age"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AGE_DESC_AMY;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAge(VALID_AGE_AMY).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // activityLevel"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withActivityLevel(VALID_ACTIVITYLEVEL_AMY).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 12,
      "-": 225,
      "hypertun": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CalendarEvent/CalendarEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.EventBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CalendarEvent(null,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                null, null, null, null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void calendarEventNameTest () {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        //Default calendar event built by event builder"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent calendarEvent1 \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        //Calendar event built by event builder with individual fields provided"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        CalendarEvent calendarEvent2 \u003d new EventBuilder().withEventName(VALID_EVENT_NAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withStartDate(VALID_START_DATE).withStartTime(VALID_START_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withEndDate(VALID_END_DATE).withEndTime(VALID_END_TIME).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(calendarEvent1.toString().equals(calendarEvent2.toString()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CalendarEvent/EventDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventStartDate(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventEndDate(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String invalidEventDate \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventStartDate(invalidEventDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventEndDate(invalidEventDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void isValidEventDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // null eventDate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventStartDate.isValidDate(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventEndDate.isValidDate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventDate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"2018-MM-20\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"2018-%%-20\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"05-20\")); // missing year field"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"2018-05\")); // missing month/day field"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"2018\")); // missing month and day field"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartDate.isValidDate(\"18-05-20\")); // invalid year format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"2018-MM-20\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"2018-%%-20\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"05-20\")); // missing year field"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"2018-05\")); // missing month/day field"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"2018\")); // missing month and day field"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndDate.isValidDate(\"18-05-20\")); // invalid year format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // valid eventName"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventStartDate.isValidDate(\"2018-05-20\")); // correct format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventStartDate.isValidDate(\"2017-04-25\")); // correct format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventEndDate.isValidDate(\"2018-05-20\")); // correct format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventEndDate.isValidDate(\"2017-04-25\")); // correct format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CalendarEvent/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String invalidEventName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidEventName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void isValidEventName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // null eventName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidEventName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid eventName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventName.isValidEventName(\"Workout*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // valid eventName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"weights training\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"2nd weight training\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"Weight Training\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventName.isValidEventName(\"Weight Training with Personal Trainer\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CalendarEvent/EventTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.CalendarEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventTimeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventStartTime(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventEndTime(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String invalidEventTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventStartTime(invalidEventTime));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventEndTime(invalidEventTime));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void isValidEventTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // null event time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventStartTime.isValidTime(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventEndTime.isValidTime(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid event time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\"17:MM\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\"17:%%\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\"17:\")); // missing minutes field"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\":30\")); // missing hours field"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventStartTime.isValidTime(\":\")); // missing both fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\"17:MM\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\"17:%%\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\"17:\")); // missing minutes field"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\":30\")); // missing hours field"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(EventEndTime.isValidTime(\":\")); // missing both fields"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // valid eventName"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventStartTime.isValidTime(\"17:30\")); // correct format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventStartTime.isValidTime(\"15:30\")); // correct format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventEndTime.isValidTime(\"17:30\")); // correct format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(EventEndTime.isValidTime(\"15:30\")); // correct format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ActivityLevelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class ActivityLevelTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ActivityLevel(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String invalidActivityLevel \u003d \"1.44\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ActivityLevel(invalidActivityLevel));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // null ActivityLevel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ActivityLevel.isValidActivityLevel(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid activityLevel"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\" \")); // space only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\"activityLevel\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\"9p.2\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\"9 3\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(ActivityLevel.isValidActivityLevel(\"1.40\")); // wrong number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // valid activityLevel numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(ActivityLevel.isValidActivityLevel(\"1.2\")); // basal"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(ActivityLevel.isValidActivityLevel(\"1.375\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(ActivityLevel.isValidActivityLevel(\"1.9\")); // active"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String invalidAge \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // null Age"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid age"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Age.isValidAge(\"Age\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Age.isValidAge(\"9p.2\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Age.isValidAge(\"9 3\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // valid age numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Age.isValidAge(\"1\")); // exactly 1 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Age.isValidAge(\"95\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Age.isValidAge(\"100\")); // heavy age"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hypertun"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hypertun"
        },
        "content": "//@@author hypertun"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String invalidGender \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\"gender\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\"9p.2\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\"9 5\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertFalse(Gender.isValidGender(\"y \")); // other alphabets"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\")); // exactly m"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\")); // exactly f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Gender.isValidGender(\"M\")); // exactly M"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\")); // exactly F"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hypertun": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/HeightTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "//@@author wenhao53"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Height(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void constructor_invalidHeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String invalidHeight \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Height(invalidHeight));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void isValidHeight() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // null height"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Height.isValidHeight(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // invalid height"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"height\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"9p.2\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"9 3\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"3.14\")); //  value less than 10.0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"510.0\")); // value more than 400.0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-1.0\")); // negative value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // valid height numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(Height.isValidHeight(\"91.1\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(Height.isValidHeight(\"95\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(Height.isValidHeight(\"205\")); // tall height"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(Height.isValidHeight(\"10.23\")); // very short height"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wenhao53": 36,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/WeightTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Weight(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void constructor_invalidWeight_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String invalidWeight \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Weight(invalidWeight));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void isValidWeight() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // null weight"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Weight.isValidWeight(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // invalid weight"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(Weight.isValidWeight(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"weight\")); // non-numeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"9p.2\")); // alphabets within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"9 3\")); // spaces within digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // valid weight numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"91.1\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"95\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"105\")); // heavy weight"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_HEIGHT \u003d \"ccc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final String INVALID_WEIGHT \u003d \"sss\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"Y\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String INVALID_AGE \u003d \"Y\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String INVALID_ACTIVITYLEVEL \u003d \"Y\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_HEIGHT \u003d BENSON.getHeight().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private static final String VALID_WEIGHT \u003d BENSON.getWeight().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getAge().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String VALID_ACTIVITYLEVEL \u003d BENSON.getActivityLevel().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_HEIGHT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                null, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        INVALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Height.MESSAGE_HEIGHT_CONSTRAINTS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullHeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, null, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Height.class.getSimpleName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void toModelType_invalidWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, INVALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String expectedMessage \u003d Weight.MESSAGE_WEIGHT_CONSTRAINTS;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void toModelType_nullWeight_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, null, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Weight.class.getSimpleName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author hypertun"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, INVALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_GENDER_CONSTRAINTS;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, null, VALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_invalidAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, INVALID_AGE, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d Age.MESSAGE_AGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_nullAge_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, null, VALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_invalidActivityLevel_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, INVALID_ACTIVITYLEVEL, VALID_TAGS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public void toModelType_nullActivityLevel_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                VALID_ADDRESS, VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ActivityLevel.class.getSimpleName());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        VALID_HEIGHT, VALID_WEIGHT, VALID_GENDER, VALID_AGE, VALID_ACTIVITYLEVEL, invalidTags);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 21,
      "-": 125,
      "hypertun": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setHeight(person.getHeight());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        descriptor.setWeight(person.getWeight());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setAge(person.getAge());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setActivityLevel(person.getActivityLevel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Height} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setHeight(new Height(height));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code Weight} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EditPersonDescriptorBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        descriptor.setWeight(new Weight(weight));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code Age} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public EditPersonDescriptorBuilder withAge(String age) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setAge(new Age(age));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code ActivityLevel} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public EditPersonDescriptorBuilder withActivityLevel(String activityLevel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        descriptor.setActivityLevel(new ActivityLevel(activityLevel));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 10,
      "-": 97,
      "hypertun": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.CalendarEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventEndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.CalendarEvent.EventStartTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " * A utility class to help with building CalendarEvent objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"Weights Training\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2018-05-20\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"15:30\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2018-05-20\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"16:30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private EventStartDate eventStartDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private EventStartTime eventStartTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private EventEndDate eventEndDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private EventEndTime eventEndTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventStartDate \u003d new EventStartDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventStartTime \u003d new EventStartTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventEndDate \u003d new EventEndDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventEndTime \u003d new EventEndTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder(CalendarEvent eventToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventStartDate \u003d eventToCopy.getEventStartDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventStartTime \u003d eventToCopy.getEventStartTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventEndDate \u003d eventToCopy.getEventEndDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        eventEndTime \u003d eventToCopy.getEventEndTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code EventName} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code EventStartDate} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder withStartDate(String eventStartDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventStartDate \u003d new EventStartDate(eventStartDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code EventStartTime} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder withStartTime(String eventStartTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventStartTime \u003d new EventStartTime(eventStartTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code EventEndDate} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder withEndDate(String eventEndDate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventEndDate \u003d new EventEndDate(eventEndDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code EventEndTime} of the {@code CalendarEvent} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public EventBuilder withEndTime(String eventEndTime) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.eventEndTime \u003d new EventEndTime(eventEndTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Builds a new CalendarEvent."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public CalendarEvent build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return new CalendarEvent(eventName, eventStartDate, eventStartTime,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                eventEndDate, eventEndTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_HEIGHT \u003d \"169.0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public static final String DEFAULT_WEIGHT \u003d \"55.5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"f\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"22\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public static final String DEFAULT_ACTIVITYLEVEL \u003d \"1.2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        height \u003d new Height(DEFAULT_HEIGHT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        weight \u003d new Weight(DEFAULT_WEIGHT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        activityLevel \u003d new ActivityLevel(DEFAULT_ACTIVITYLEVEL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        height \u003d personToCopy.getHeight();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        weight \u003d personToCopy.getWeight();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        age \u003d personToCopy.getAge();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        activityLevel \u003d personToCopy.getActivityLevel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Height} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withHeight(String height) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        this.height \u003d new Height(height);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     * Sets the {@code Weight} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public PersonBuilder withWeight(String weight) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        this.weight \u003d new Weight(weight);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code Age} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public PersonBuilder withAge(String age) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Sets the {@code ActivityLevel} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    public PersonBuilder withActivityLevel(String activityLevel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        this.activityLevel \u003d new ActivityLevel(activityLevel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        return new Person(name, phone, email, address, height, weight, gender, age, activityLevel, tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 13,
      "-": 106,
      "hypertun": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACTIVITYLEVEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_HEIGHT + person.getHeight().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        sb.append(PREFIX_WEIGHT + person.getWeight().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        sb.append(PREFIX_AGE + person.getAge().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        sb.append(PREFIX_ACTIVITYLEVEL + person.getActivityLevel().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 2,
      "-": 40,
      "hypertun": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            .withPhone(\"85355255\").withHeight(\"169.0\").withWeight(\"95.5\").withGender(\"f\").withAge(\"22\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withActivityLevel(\"1.2\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withHeight(\"169.0\").withWeight(\"95.5\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withHeight(\"169.0\").withWeight(\"55.5\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withHeight(\"169.0\").withWeight(\"55.5\").withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withHeight(\"169.0\").withWeight(\"55.5\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withHeight(\"169.0\").withWeight(\"45.5\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withHeight(\"169.0\").withWeight(\"75.5\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withHeight(\"169.0\").withWeight(\"55.5\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withHeight(\"169.0\").withWeight(\"55.5\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withGender(\"f\").withAge(\"22\").withActivityLevel(\"1.2\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withWeight(VALID_WEIGHT_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withWeight(VALID_WEIGHT_BOB).withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hypertun"
        },
        "content": "            .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 4,
      "wenhao53": 4,
      "-": 78,
      "hypertun": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.util.HtmlFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hypertun"
        },
        "content": "    private static final String HTML_REMOVAL_REGEX \u003d \"\\\\\u003c.*?\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        // associated person card of a person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        String expectedHtmlContent \u003d HtmlFormatter.getHtmlFormat(ALICE).replaceAll(HTML_REMOVAL_REGEX, EMPTY_STRING);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(expectedHtmlContent, browserPanelHandle.getLoadedHtml());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "hypertun": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CalendarWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import guitests.guihandles.CalendarWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.commons.events.ui.ShowCalendarEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "//@@author wayneong95"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "public class CalendarWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private ShowCalendarEvent showCalendarEventstub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private CalendarWindow calendarWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    private CalendarWindowHandle calendarWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        showCalendarEventstub \u003d new ShowCalendarEvent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        guiRobot.interact(() -\u003e calendarWindow \u003d new CalendarWindow());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        uiPartRule.setUiPart(calendarWindow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        calendarWindowHandle \u003d new CalendarWindowHandle(calendarWindow.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // updated default window"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertFalse(expectedDefaultPageUrl.equals(calendarWindowHandle.getLoadedUrl()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /*Does not work on Travis. Use for local testing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        // calendar window"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        postNow(showCalendarEventstub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        URL expectedCalendarWindow \u003d new URL(CalendarWindow.CALENDAR_PAGE_URL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        waitUntilCalendarLoaded(calendarWindowHandle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertEquals(expectedCalendarWindow, calendarWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(expectedCard.getGender(), actualCard.getGender());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertEquals(\"(\" + expectedPerson.getGender().value.toUpperCase() + \")\", \"(\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + actualCard.getGender().toUpperCase() + \")\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITYLEVEL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + HEIGHT_DESC_AMY + \"   \" + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \"   \" + GENDER_DESC_AMY + \"  \" + AGE_DESC_AMY + \"  \" + ACTIVITYLEVEL_DESC_AMY + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except height -\u003e added */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_BOB).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_BOB + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY  + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except weight -\u003e added */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_BOB)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_BOB + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except gender -\u003e added */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_BOB + AGE_DESC_AMY"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except age -\u003e added */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_AMY)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except activityLevel -\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        added */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withHeight(VALID_HEIGHT_AMY).withWeight(VALID_WEIGHT_AMY)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + NAME_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB  + AGE_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(Person)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid height -\u003e rejected */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_HEIGHT_DESC + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Height.MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /* Case: invalid weight -\u003e rejected */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + INVALID_WEIGHT_DESC + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(command, Weight.MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + INVALID_GENDER_DESC + AGE_DESC_AMY"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid age -\u003e rejected */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + INVALID_AGE_DESC"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(command, Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid activityLevel -\u003e rejected */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY + INVALID_ACTIVITYLEVEL_DESC;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(command, ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 26,
      "-": 275,
      "hypertun": 127
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getDataFileLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Asserts that the previously selected card is now deselected"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Asserts that the details of the person in the person list panel at"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hypertun"
        },
        "content": "     * Asserts the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 267,
      "hypertun": 3
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ACTIVITYLEVEL_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.HEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ACTIVITYLEVEL_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_HEIGHT_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEIGHT_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ACTIVITYLEVEL_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HEIGHT_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEIGHT_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEIGHT_DESC_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.ActivityLevel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hypertun"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Height;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "import seedu.address.model.person.Weight;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + HEIGHT_DESC_BOB + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + WEIGHT_DESC_BOB + \" \" + GENDER_DESC_BOB + \" \" + AGE_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + \" \" + ACTIVITYLEVEL_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withHeight(VALID_HEIGHT_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withWeight(VALID_WEIGHT_BOB).withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                .withActivityLevel(VALID_ACTIVITYLEVEL_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_AMY + HEIGHT_DESC_AMY + WEIGHT_DESC_AMY + GENDER_DESC_AMY + AGE_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid height -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                        + INVALID_HEIGHT_DESC,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                Height.MESSAGE_HEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        /* Case: invalid weight -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_WEIGHT_DESC,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                Weight.MESSAGE_WEIGHT_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + INVALID_GENDER_DESC,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid age -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + INVALID_AGE_DESC,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        /* Case: invalid activityLevel -\u003e rejected */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hypertun"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                        + INVALID_ACTIVITYLEVEL_DESC,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                ActivityLevel.MESSAGE_ACTIVITYLEVEL_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hypertun"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Wayneong95"
        },
        "content": "                        + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + ACTIVITYLEVEL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ADDRESS_DESC_BOB + HEIGHT_DESC_BOB + WEIGHT_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + ACTIVITYLEVEL_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hypertun"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wayneong95": 21,
      "-": 285,
      "hypertun": 42
    }
  },
  {
    "path": "unused/ShowWeightLogEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * An event requesting to show the weight log of a given person"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class ShowWeightLogEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public ShowWeightLogEvent(Person person) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 22
    }
  },
  {
    "path": "unused/WeightLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Represents a Person\u0027s weight history (in Kg) since the startup of the Personal Trainer Pro app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Guarantees: contains weight data that is valid as declared in {@link #isValidWeight(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class WeightLog {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private ArrayList\u003cPair\u003cDate, Double\u003e\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Constructs a new {@code WeightLog}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public WeightLog(Weight weight) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        addNewEntry(new Date(), weight);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the ArrayList that contains the information in the WeightLog."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public ArrayList\u003cPair\u003cDate, Double\u003e\u003e getList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Adds a new weight entry into the log."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @param date A date representing the moment where the Person was created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @param weight A valid weight (in Kg)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void addNewEntry(Date date, Weight weight) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        list.add(new Pair(date, getDoubleValueFromWeight(weight)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the double value of the input weight from the Weight string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private Double getDoubleValueFromWeight(Weight weight) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return Double.parseDouble(weight.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String toDisplayAsString \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        for (Pair entry:list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            toDisplayAsString +\u003d entry.getValue().toString() + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return toDisplayAsString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 56
    }
  },
  {
    "path": "unused/WeightLogCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Opens up the Weight Log of a specified person in the Personal Trainer Pro"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class WeightLogCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"log\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays weight log of a person.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static final String MESSAGE_WEIGHT_LOG_SUCCESS \u003d \"Weight log for %1$s displayed! Displaying all weight \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            + \"changes since application startup.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public WeightLogCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Person personToShowWeightLog \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            model.showWeightLog(personToShowWeightLog);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            assert false : \"The target person cannot be missing\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_WEIGHT_LOG_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                personToShowWeightLog.getName().fullName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                || (other instanceof WeightLogCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                \u0026\u0026 this.index.equals(((WeightLogCommand) other).index)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 57
    }
  },
  {
    "path": "unused/WeightLogCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.WeightLogCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * Parses input arguments and creates a new WeightLogCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class WeightLogCommandParser implements Parser\u003cWeightLogCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the WeightLogCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * and returns a WeightLogCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public WeightLogCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WeightLogCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return new WeightLogCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 35
    }
  },
  {
    "path": "unused/WeightLogCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.commons.events.ui.ShowWeightLogEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class WeightLogCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        WeightLogCommand weightLogCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertCommandFailure(weightLogCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        final WeightLogCommand standardCommand \u003d new WeightLogCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        final WeightLogCommand commandWithSameIndex \u003d new WeightLogCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        final WeightLogCommand commandWithDifferentIndex \u003d new WeightLogCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // same object -\u003e Returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // different object, same type with same values -\u003e return true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameIndex));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        // same type but different index -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithDifferentIndex));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public void checkIfEventCollected() throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        WeightLogCommand weightLogCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        weightLogCommand.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowWeightLogEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Executes a {@code WeightLogCommand} with the given {@code index}, and checks that {@code ShowWeightLogEvent}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        WeightLogCommand weightLogCommand \u003d prepareCommand(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            CommandResult commandResult \u003d weightLogCommand.execute();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            assertEquals(String.format(WeightLogCommand.MESSAGE_WEIGHT_LOG_SUCCESS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    model.getFilteredPersonList().get(index.getZeroBased()).getName().fullName,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    model.getFilteredPersonList().get(index.getZeroBased()).getAddress().value),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        ShowWeightLogEvent lastEvent \u003d (ShowWeightLogEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        assertEquals(model.getFilteredPersonList().get(index.getZeroBased()), lastEvent.person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns an {@code WeightLogCommand} with parameters {@code index}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private WeightLogCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        WeightLogCommand weightLogCommand \u003d new WeightLogCommand(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        weightLogCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return weightLogCommand;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 111
    }
  },
  {
    "path": "unused/WeightLogHtmlFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "content": "//@@author wenhao53-unused"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "// Feature is working but was unable to solve the many tests that were failing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * HTML formatter for Person class. HTML referenced from Google Charts API"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " * (https://developers.google.com/chart/interactive/docs/gallery/linechart)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wenhao53"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "public class WeightLogHtmlFormatter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    public static String getWeightLogHtmlFormat(Person person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return \"\u003c!DOCTYPE html\u003e\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003chtml\u003e\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003chead\u003e\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003cscript type\u003d\u0027text/javascript\u0027 src\u003d\u0027https://www.gstatic.com/charts/loader.js\u0027\u003e\u003c/script\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003cscript type\u003d\u0027text/javascript\u0027\u003e\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"google.charts.load(\u0027current\u0027, {\u0027packages\u0027:[\u0027corechart\u0027]});\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"google.charts.setOnLoadCallback(drawChart);\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"function drawChart() {\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"var data \u003d google.visualization.arrayToDataTable([\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"[\u0027Instance\u0027, \u0027Weight\u0027],\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + getWeightData(person)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"]);\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"var options \u003d {\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"title: \u0027Weight Log for \" + person.getName().toString() + \"\u0027,\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"curveType: \u0027function\u0027,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"legend: { position: \u0027bottom\u0027 }\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"};\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"var chart \u003d new google.visualization.LineChart(document.getElementById(\u0027curve_chart\u0027));\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"chart.draw(data, options);\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"}\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003c/script\u003e\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003c/head\u003e\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003cbody\u003e\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003cdiv id\u003d\u0027curve_chart\u0027 style\u003d\u0027width: 900px; height: 500px\u0027\u003e\u003c/div\u003e\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + getWeightDataDetails(person)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003c/body\u003e\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                + \"\u003c/html\u003e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the HTML String containing the weight data to be input as text below the chart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private static String getWeightDataDetails(Person person) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        final String twoTabSpaces \u003d \"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String result \u003d \"\u003cp\u003e\u003cu\u003e Past Weight Changes for \" + person.getName().toString() + \"\u003c/u\u003e\u003c/p\u003e\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        for (int entry \u003d 0; entry \u003c person.getWeightLog().getList().size(); entry++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            result \u003d String.format(\"%s %s %s %s %s\", result, Integer.toString(entry) + \". \","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    \"[\" + person.getWeightLog().getList().get(entry).getKey().toString() + \"]\", twoTabSpaces,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    person.getWeightLog().getList().get(entry).getValue().toString() + \"kg \u003cbr\u003e\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wenhao53"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     * Returns the HTML String containing the weight data to be plotted in the chart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    private static String getWeightData(Person person) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        for (int entry \u003d 0; entry \u003c person.getWeightLog().getList().size(); entry++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            result \u003d String.format(\"%s %s %s\", result,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    \"[\" + Integer.toString(entry) + \",\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                    person.getWeightLog().getList().get(entry).getValue().toString() + \"]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            if (entry !\u003d person.getWeightLog().getList().size() - 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wenhao53"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "wenhao53": 72
    }
  }
]
