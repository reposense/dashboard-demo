[
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027com.google.photos.library:google-photos-library-client:1.0.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027com.google.apis:google-api-services-plus:v1-rev557-1.25.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027com.google.oauth-client:google-oauth-client-java6:1.23.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027com.google.oauth-client:google-oauth-client-jetty:1.23.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027com.google.api-client:google-api-client:1.25.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    compile \u0027io.grpc:grpc-netty:1.13.2\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    archiveName \u003d \u0027piconso.jar\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chivent"
        },
        "content": "        \u0027site-name\u0027: \u0027Piconso\u0027,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chivent"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://cs2103-ay1819s1-t09-3.github.io/main/index.html\u0027,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 8,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotosLibraryClientFactory.BLOCKER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotosLibraryClientFactory.TEST_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotosLibraryClientFactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "// Travis test commit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final Path MAIN_PATH \u003d Paths.get(\"\").toAbsolutePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Piconso ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FileUtil.deleteIfAvaliable(TEST_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImageMagickUtil.copyOutside(userPrefs, System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model \u003d new ModelManager(userPrefs, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, model.getUserLoggedIn());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void initLogging(Config config) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting from default\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            initializedPrefs.updateUserPrefs(Paths.get(System.getProperty(\"user.home\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void initEventsCenter() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(\"Starting Piconso \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Piconso ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            storage.clearCache();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FileUtil.deleteIfAvaliable(TEST_FILE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (BLOCKER.exists()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": "            PhotosLibraryClientFactory.logoutUserIfPossible();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "chivent": 22,
      "ihwk1996": 3,
      "benedictcss": 1,
      "-": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String appTitle \u003d \"Piconso\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 1280;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 980;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String LOG_FILE \u003d \"piconso.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.CreateApplyCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasAutoResizeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasBgcolorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasSizeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleDlCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleLsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleUploadCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerPositionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerSelectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerSwapCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /* Error message for traversing imageList */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_INDEX_END_OF_IMAGE_LIST \u003d \"Exceeded number of images in current directory.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_INDEX_EXCEED_MAX_BATCH_SIZE \u003d \"The index provided exceeds batch size.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_TOTAL_IMAGES_IN_DIR \u003d \"Total number of images in directory: %d\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_CURRENT_BATCH_IN_IMAGE_LIST \u003d \"Currently viewing images from %d to %d\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_CURRENT_IMAGES_IN_BATCH \u003d \"Current number of images in batch: %d\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_NO_MORE_NEXT_IMAGES \u003d \"No more images in the current directory.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_NO_MORE_PREV_IMAGES \u003d \"Already at start of list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /* Error messages for Google OAuth */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_INVALID_ALBUM_REQUESTED \u003d \"The album name provided is invalid\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_GOOGLE_INVALID_FORMAT \u003d \"Please enter a valid google command format.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_CONNECTION_FAILURE \u003d \"Error connecting to Google Photos, please try again.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_INVALID_IMAGE_REQUESTED \u003d \"The image name provided is invalid.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String ENTIRE_GOOGLE_MESSAGE \u003d MESSAGE_GOOGLE_INVALID_FORMAT + \"\\n---------------------\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + GoogleLsCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + GoogleDlCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + GoogleUploadCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /* Error messages ls. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_DIR \u003d \"File or directory invalid.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_EMPTY_DIR \u003d \"No images or folders to display!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /* Error messages for layer and canvas */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_LAYER_INVALID_FORMAT \u003d \"Please enter a valid layer command.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String ENTIRE_LAYER_MESSAGE \u003d MESSAGE_LAYER_INVALID_FORMAT + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + LayerAddCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + LayerDeleteCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + LayerPositionCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + LayerSelectCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + LayerSwapCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_CANVAS_INVALID_FORMAT \u003d \"Please enter a valid canvas command.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String ENTIRE_CANVAS_MESSAGE \u003d MESSAGE_CANVAS_INVALID_FORMAT + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + CanvasAutoResizeCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + CanvasBgcolorCommand.MESSAGE_USAGE + \"\\n------------------------\\n\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + CanvasSizeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /* Error messages for create convert command */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_INVALID_OPERATION_ARGUMENTS \u003d \"Some of the arguments entered may be invalid, \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"please check the arguments of each transformation entered\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\nYou may refer to User Guide (type `help`) Section 4.8 for more details on argument values.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\n Standard Format: \" + CreateApplyCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /* Error message for save command*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_IMAGE \u003d \"Image with the same name already exists in this directory!\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + SaveCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 6,
      "chivent": 23,
      "j-lum": 25,
      "benedictcss": 8,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ChangeDirectoryEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An event that notifies StatusBarFooter on a change of directory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class ChangeDirectoryEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public final String directory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Constructor for ChangeDirectoryEvent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param directory The current directory user is in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public ChangeDirectoryEvent(String directory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.directory \u003d requireNonNull(directory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ChangeImageEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * A simple event that notifies a target ImagePanel to change its image."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class ChangeImageEvent extends BaseEvent {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final Image image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final String target;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Constructor for ChangeImageEvent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param image  Image to replace"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param target The name of the ImageView to target."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public ChangeImageEvent(Image image, String target) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.image \u003d requireNonNull(image);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.target \u003d requireNonNull(target);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "j-lum": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/FilmReelSelectionChangeEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An event that notifies Film Reel ui regarding a selection change"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReelSelectionChangeEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Constructor for LoginStatusEvent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param index index of image chosen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReelSelectionChangeEvent(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "            this.index \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/HistoryUpdateEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * A simple event that notifies the history panel to refresh."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class HistoryUpdateEvent extends BaseEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final ArrayList\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Constructor for a HistoryUpdateEvent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param toChange - List of past operations to display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public HistoryUpdateEvent(ArrayList\u003cString\u003e toChange) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.list \u003d requireNonNull(toChange);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/LayerUpdateEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * A simple event that notifies the layer list to refresh."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerUpdateEvent extends BaseEvent {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final ArrayList\u003cString\u003e list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final Index current;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Constructor for a LayerUpdateEvent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param toChange - List of new layer names"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param current - Index of the current layer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerUpdateEvent(ArrayList\u003cString\u003e toChange, Index current) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.list \u003d requireNonNull(toChange);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.current \u003d current;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/LoginStatusEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An event that notifies StatusBarFooter regarding a login status change."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LoginStatusEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public final String user;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public final boolean loggedIn;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Constructor for LoginStatusEvent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param user The email of the logged in user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public LoginStatusEvent(String user) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.user \u003d requireNonNull(user);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (this.user.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "            loggedIn \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "            loggedIn \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/LogoutStatusEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An event that notifies StatusBarFooter regarding a login status change."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LogoutStatusEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/UpdateFilmReelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An event that updates the list of images in film reel upon call events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class UpdateFilmReelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public final List\u003cPath\u003e paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Constructor for LoginStatusEvent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param paths List of paths to new images"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public UpdateFilmReelEvent(List\u003cPath\u003e paths) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.paths \u003d requireNonNull(paths);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalOperationException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Exception thrown when the user performs an invalid operation."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class IllegalOperationException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param message should contain relevant information on the failed operation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public IllegalOperationException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param message should contain relevant information on the failed operation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public IllegalOperationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Creates directories if missing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static void createDirectoriesIfMissing(File file) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "            file.mkdirs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static void createIfMissing(File file) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Deletes file if it exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static void deleteIfAvaliable(File file) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 16,
      "benedictcss": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ImageMagickUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ChangeImageEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.canvas.Canvas;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.canvas.Layer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.storage.JsonConvertArgsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * An utility class that handles most of the low-level interaction with the ImageMagick executable."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @author lancelotwillow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class ImageMagickUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //initialize the paths used in the imageMagic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final int LINUX \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final int WINDOWS \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final int MAC \u003d 3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final String osName \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String convertExecutablePath \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static String imageMagickPath \u003d ImageMagickUtil.class.getResource(\"/imageMagic\").getPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static String tmpPath \u003d imageMagickPath + \"/tmp\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static String commandSaveFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * get the path of the package location"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws NoSuchElementException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static URL getImageMagickZipUrl(String osName) throws NoSuchElementException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        switch (getPlatform(osName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case MAC:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return ImageMagickUtil.class.getResource(\"/imageMagic/package/mac/ImageMagick-7.0.8.zip\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case WINDOWS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return ImageMagickUtil.class.getResource(\"/imageMagic/package/win/ImageMagick-7.0.8-14.zip\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return ImageMagickUtil.class.getResource(\"/imageMagic/package/mac/ImageMagick-7.0.8.zip\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static String getCommandSaveFolder() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return commandSaveFolder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //these two methods are used for tesing only"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static void setTemporaryCommandForder(String folder) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        commandSaveFolder \u003d folder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static Path getTempFolderPath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return Paths.get(tmpPath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * get the platform;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static int getPlatform(String osName) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (osName.contains(\"win\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return WINDOWS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else if (osName.contains(\"mac\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return MAC;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else if (osName.contains(\"nux\") || osName.contains(\"ubuntu\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return LINUX;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * with a path and the transmission, return the bufferedimage processed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws InterruptedException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static BufferedImage processImage(Path path, Transformation transformation, boolean isRaw)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throws ParseException, IOException, InterruptedException, IllegalArgumentException,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            IllegalOperationException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String modifiedFile \u003d tmpPath + \"/output.png\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //create a processbuilder to blur the image"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e args \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        args.add(ImageMagickUtil.getConvertExecutablePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        args.add(path.toAbsolutePath().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        args.add(\"-background\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        args.add(\"rgba(0,0,0,0)\"); //HARDFIX!"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (!isRaw) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ArrayList\u003cString\u003e cmds \u003d parseOperationArguments(transformation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            args.add(\"-\" + cmds.remove(0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            args.addAll(cmds);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ArrayList\u003cString\u003e cmds \u003d transformation.toList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            cmds.remove(0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            args.addAll(cmds);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(modifiedFile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return runProcessBuilder(args, modifiedFile);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * parse the argument passing to the imageMagic to check the validation about the arguments"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static ArrayList\u003cString\u003e parseOperationArguments(Transformation transformation)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throws IOException, ParseException, IllegalArgumentException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String operation \u003d transformation.getOperation();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (!operation.startsWith(\"@\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return parseBuildInOperation(transformation);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return parseCustomisedOperation(transformation);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static ArrayList\u003cString\u003e parseBuildInOperation(Transformation transformation)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throws ParseException, IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ArrayList\u003cString\u003e trans \u003d transformation.toList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String operation \u003d transformation.getOperation();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        URL fileUrl \u003d ImageMagickUtil.class.getResource(\"/imageMagic/commandTemplates/\" + operation + \".json\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (fileUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new ParseException(\"Operation is invalid\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //in order to get the template of the argument."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e cmds \u003d JsonConvertArgsStorage.retrieveCommandTemplate(fileUrl, operation, \"arg\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        int num \u003d cmds.size();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String template \u003d cmds.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (num !\u003d trans.size() - 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid arguments, the arguments should be \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                    + operation + \" \" + template.substring(1, template.length() - 1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //get the pattern for the argument, check validation."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e patterns \u003d JsonConvertArgsStorage.retrieveCommandTemplate(fileUrl, operation, \"pattern\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!trans.get(i + 1).matches(patterns.get(i))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new IllegalArgumentException(\"Invalid arguments, the arguments should be:\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + operation + \" \" + template.substring(1, template.length() - 1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return trans;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static ArrayList\u003cString\u003e parseCustomisedOperation(Transformation transformation)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throws ParseException, IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String operation \u003d transformation.getOperation().substring(1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File file \u003d new File(commandSaveFolder + \"/\" + operation + \".json\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new ParseException(\"Operation is invalid\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new ArrayList\u003c\u003e(JsonConvertArgsStorage.retrieveCommandArguments(file));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Given a list of arguments to ImageMagick, calls the actual ImageMagick executable with the output set to the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * path provided"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args An ArrayList of arguments, the first of which needs to be a legal ImageMagick executable."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param output An URL to the output file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws InterruptedException"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static BufferedImage runProcessBuilder(ArrayList\u003cString\u003e args, String output)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throws IOException, InterruptedException, IllegalArgumentException, IllegalOperationException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ProcessBuilder pb \u003d new ProcessBuilder(args);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (getPlatform(osName) \u003d\u003d MAC) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Map\u003cString, String\u003e mp \u003d pb.environment();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            mp.put(\"DYLD_LIBRARY_PATH\", imageMagickPath + \"/ImageMagick-7.0.8/lib/\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        if (getPlatform(osName) \u003d\u003d LINUX || getPlatform(osName) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new IllegalOperationException(\"Unsupported OS!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Process process \u003d pb.start();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        process.waitFor();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (process.exitValue() !\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new IllegalArgumentException(\"Process fails\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInputStream is \u003d new FileInputStream(output);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Image modifiedImage \u003d new Image(is);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return SwingFXUtils.fromFXImage(modifiedImage, null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * copy the imageMagick outside of the jarfile in order to call it."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @author lancelotwillow"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param userPrefs"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws InterruptedException"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static void copyOutside(UserPrefs userPrefs, String osName) throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        URL zipUrl \u003d getImageMagickZipUrl(osName);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Path currentPath \u003d userPrefs.getCurrDirectory();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File zipFile \u003d new File(currentPath.toString() + \"/temp.zip\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File tempFolder \u003d new File(userPrefs.getCurrDirectory() + \"/tempFolder\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        tempFolder.mkdir();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ResourceUtil.copyResourceFileOut(zipUrl, zipFile);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        switch (getPlatform(osName)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case MAC:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            Process process \u003d new ProcessBuilder("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    \"tar\", \"zxvf\", zipFile.getPath(), \"-C\", currentPath.toString()).start();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            process.waitFor();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            //remove the __MACOSX folder in the mac"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            new ProcessBuilder(\"rm\", \"-rf\", currentPath.toString() + \"/__MACOSX\").start();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            convertExecutablePath \u003d currentPath.toString() + \"/ImageMagick-7.0.8/bin/convert\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case WINDOWS:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ResourceUtil.unzipFolder(zipFile);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            convertExecutablePath \u003d currentPath.toString() + \"/ImageMagick-7.0.8-14-portable-Q16-x64/convert.exe\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        imageMagickPath \u003d currentPath.toString();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        tmpPath \u003d tempFolder.getPath();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        commandSaveFolder \u003d currentPath.toString() + \"/PiconsoCommands\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File commandFolder \u003d new File(commandSaveFolder);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (!(commandFolder.exists() \u0026\u0026 commandFolder.isDirectory())) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            commandFolder.mkdir();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        zipFile.delete();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getConvertExecutablePath() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        if (convertExecutablePath !\u003d null) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            return convertExecutablePath;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new NoSuchElementException(\"The ImageMagick binaries cannot be found!\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //@@author j-lum"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Creates a ProcessBuilder instance to merge/flatten layers."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param c - A canvas to be processed"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @return a buffered image with a merged canvas."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static BufferedImage processCanvas(Canvas c) throws IOException, InterruptedException,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            IllegalOperationException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ArrayList\u003cString\u003e args \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String output \u003d tmpPath + \"/modified.png\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(getConvertExecutablePath());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        boolean pageSizeDefined \u003d false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        for (Layer l: c.getLayers()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (!c.isCanvasAuto() \u0026\u0026 !pageSizeDefined) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                args.add(\"-page\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                args.add(String.format(\"%dx%d+%d+%d\", c.getWidth(), c.getHeight(), l.getX(), l.getY()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                args.add(String.format(\"%s\", l.getImage().getCurrentPath()));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                pageSizeDefined \u003d true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-page\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(String.format(\"+%d+%d\", l.getX(), l.getY()));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(String.format(\"%s\", l.getImage().getCurrentPath()));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(\"-background\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(String.format(\"%s\", c.getBackgroundColor()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (c.isCanvasAuto()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-layers\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"merge\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-flatten\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(output);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        System.out.println(args);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return runProcessBuilder(args, output);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Saves the canvas to an output file"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param c - A canvas to be processed"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * *//*"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static void saveCanvas(Canvas c, Path outDirectory, String fileName)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throws IOException, InterruptedException, UnsupportedPlatformException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ArrayList\u003cString\u003e args \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String output \u003d outDirectory + \"/\" + fileName;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(getConvertExecutablePath());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(\"-size\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(String.format(\"%dx%d\", c.getWidth(), c.getHeight()));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(\"-background\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(c.getBackgroundColor());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        for (Layer l: c.getLayers()) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-page\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(String.format(\"+%d+%d\", l.getX(), l.getY()));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(String.format(\"%s\", l.getImage().getCurrentPath()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (c.isCanvasAuto()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-layers\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\" merge\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            args.add(\"-flatten\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        args.add(output);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        runProcessBuilder(args, output);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "j-lum"
        },
        "content": "*/"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Given any canvas, renders it to the target panel."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param c - Canvas to render"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param logger - an instance of the logger"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param target - the name of the ImagePanel to target"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static void render(Canvas c, Logger logger, String target) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                    new ChangeImageEvent("
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                            SwingFXUtils.toFXImage("
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                                    ImageMagickUtil.processCanvas(c), null), target));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (InterruptedException | IllegalOperationException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 198,
      "j-lum": 111,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ResourceUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.BufferedOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * an Util to handle copying or unzipping the file outside of the resource when packing into jarfile"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @author lancelotwillow"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ResourceUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * copy a file from the resource in the jar package outside"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param url"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException when the file not exists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static void copyResourceFileOut(URL url, File file) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        InputStream io \u003d url.openStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        OutputStream os \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        int read;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        byte[] bytes \u003d new byte[1024];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        while ((read \u003d io.read(bytes)) !\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            os.write(bytes, 0, read);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        io.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        os.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * unzip a folder to the directory the zip file stays"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param zfile"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException when the inputStream, outputStream, ZipStream cannot read anything"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static void unzipFolder(File zfile) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //get the parent folder"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String parentFolder \u003d zfile.getParent() + \"/\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //initialize the input streams"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(zfile);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ZipInputStream zis \u003d new ZipInputStream(fis);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ZipEntry entry;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        BufferedOutputStream bos;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        boolean check \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        while ((entry \u003d zis.getNextEntry()) !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            //check the folder to be unzipped into exist or not"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!check) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                String path \u003d entry.getName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                String folderName \u003d path.split(\"/\")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                File unzippedFolder \u003d new File(parentFolder + folderName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                if (!(unzippedFolder.exists() \u0026\u0026 unzippedFolder.isDirectory())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    unzippedFolder.mkdir();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                check \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            //make directory if the entry is a directory"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (entry.isDirectory()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                File currentFile \u003d new File(parentFolder + entry.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                if (!currentFile.exists()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    currentFile.mkdirs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                //write the file to be unzipped"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                FileOutputStream fos \u003d new FileOutputStream(parentFolder + entry.getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                bos \u003d new BufferedOutputStream(fos);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                byte[] buf \u003d new byte[2048];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                int len;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                while ((len \u003d zis.read(buf)) !\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    bos.write(buf, 0, len);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                zis.closeEntry();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                bos.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        zis.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.parser.PiconsoParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final PiconsoParser piconsoParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "        piconsoParser \u003d new PiconsoParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Command command \u003d piconsoParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ApplyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @@author lancelotwillow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * the class to execute the apply command that do the modification of the image"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ApplyCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"apply\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \": Apply a transformation to the image.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Parameters: operationName argument1 argument2 ...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" blur 1x8\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String MESSAGE_USAGE_RAW \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \": Apply a transformation to the image by passing the values directly to ImageMagick.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Parameters: argument1 argument2 ...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" raw +noise gaussian\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //the path of the json file containing the arguments of the apply command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final URL SINGLE_COMMAND_TEMPLATE_PATH \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.class.getResource(\"/imageMagic/commandTemplates\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ApplyCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private Transformation transformation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private boolean isRaw;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * the constructor take the path of the JSON file of the detail of the apply operation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation contains the operation to be processed to the image"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public ApplyCommand(Transformation transformation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        this.transformation \u003d transformation;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        this.isRaw \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public ApplyCommand(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        this.transformation \u003d new Transformation(Arrays.toString(args), args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        this.isRaw \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * build a new processbuilder and initialize witht the commands need to the apply command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            BufferedImage modifiedImage \u003d ImageMagickUtil.processImage(model.getCurrentPreviewImagePath(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    transformation, isRaw);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            model.addTransformation(isRaw ? new Transformation(transformation.getOperation()) : transformation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            model.updateCurrentPreviewImage(modifiedImage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new CommandException(isRaw ? \"Invalid operation!\" : e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new CommandResult(\"Transformation applied!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ApplyCommand command \u003d (ApplyCommand) object;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return command \u003d\u003d this || transformation.equals(command.transformation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 81,
      "j-lum": 1,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CdCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "//@@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Changes the current directory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class CdCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \": Changes the current directory.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Parameters: FILEPATH (existing directory)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Desktop/piconso\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The system cannot find the path specified.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private final Path toDirectories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CdCommand(Path directories) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.toDirectories \u003d directories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String currDirectory \u003d model.getCurrDirectory().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String newDir \u003d currDirectory + \"/\" + toDirectories.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Path newCurrDirectory \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        File dir;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            if (toDirectories.isAbsolute()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                dir \u003d toDirectories.toFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                dir \u003d new File(newDir);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            if (!dir.isDirectory()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            newCurrDirectory \u003d dir.toPath().toRealPath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            model.updateCurrDirectory(newCurrDirectory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return new CommandResult(newCurrDirectory.toString() + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, model.getTotalImagesInDir())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                Math.min(model.getDirectoryImageList().size(), OpenCommand.BATCH_SIZE)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public Path getPath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return this.toDirectories;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                || (other instanceof CdCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                \u0026\u0026 toDirectories.equals(((CdCommand) other).toDirectories)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateApplyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.storage.JsonConvertArgsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @@author lancelotwillow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * the class to create the convert command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class CreateApplyCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \": Adds a new custom command.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Parameters: name operation|argument1|argument2 ...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" blurgray blur|0x8 colorspace|GRAY\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private List\u003cTransformation\u003e cmds;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public CreateApplyCommand(String name, List\u003cTransformation\u003e cmds) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (cmds.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new IllegalArgumentException(\"Empty parameters! Please provide transformations to store.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            this.cmds \u003d cmds;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * to check whether the single argument tag is valid or not"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param transformation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private void checkSingleValidation(Transformation transformation) throws IllegalArgumentException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //just a template, not only this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String operation \u003d transformation.toList().get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        URL fileUrl \u003d CreateApplyCommand.class.getResource(\"/imageMagic/commandTemplates/\" + operation + \".json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (fileUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e patterns \u003d JsonConvertArgsStorage.retrieveCommandTemplate(fileUrl, operation, \"pattern\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e trans \u003d transformation.toList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (trans.size() !\u003d patterns.size() + 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new IllegalArgumentException(Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!trans.get(i + 1).matches(patterns.get(i))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                throw new IllegalArgumentException(Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * to check the validation of the whole argument list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private void checkValidation() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Iterator\u003cTransformation\u003e iter \u003d cmds.iterator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                checkSingleValidation(iter.next());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            } catch (IllegalArgumentException | IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            checkValidation();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonConvertArgsStorage.storeArgument(name, cmds, ImageMagickUtil.getCommandSaveFolder());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new CommandResult(\"Successfully created \" + name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        CreateApplyCommand command \u003d (CreateApplyCommand) object;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return command \u003d\u003d this || name.equals(command.name) \u0026\u0026 cmds.equals(command.cmds);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Piconso as requested ...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.getTempFolderPath().toFile().delete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (InvalidPathException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "chivent": 1,
      "benedictcss": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Logs in user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Re-directs user \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"to log into Google Photos (requires an internet connection). \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected static final String MESSAGE_LAUNCHED \u003d \"You will be re-directed to a login window shortly...\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String MESSAGE_LOGGED_IN \u003d \"Logged in as %s.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (model.getUserLoggedIn() \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                CompletableFuture.supplyAsync(() -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        EventsCenter.getInstance().post(new NewResultAvailableEvent(this.initPhotoHandler(model)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    } catch (CommandException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        EventsCenter.getInstance().post(new NewResultAvailableEvent(MESSAGE_CONNECTION_FAILURE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }).completeOnTimeout(true, 3, TimeUnit.MINUTES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return new CommandResult(MESSAGE_LAUNCHED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOGGED_IN, model.getUserLoggedIn()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(MESSAGE_CONNECTION_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Method to launch creation/checking of photoHandler"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param model model to be based upon"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return feedback to display in resultsdisplay"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String initPhotoHandler(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (model.getPhotoHandler(false) \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return String.format(MESSAGE_LOGGED_IN, model.getUserLoggedIn());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 63,
      "benedictcss": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LogoutStatusEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotosLibraryClientFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Logs in user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Log out from Google Photos\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected static final String MESSAGE_LOGGED_OUT \u003d \"Successfully logged out.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected static final String MESSAGE_NONE \u003d \"There is no account logged into.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String MESSAGE_ERROR \u003d \"Error while attempting to logout.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model.setPhotoHandler(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (PhotosLibraryClientFactory.checkUserLogin()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "                PhotosLibraryClientFactory.logoutUserIfPossible();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "                EventsCenter.getInstance().post(new LogoutStatusEvent());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return new CommandResult(MESSAGE_LOGGED_OUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return new CommandResult(MESSAGE_NONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_DIR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_DIR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javax.activation.MimetypesFileTypeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.UpdateFilmReelEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Lists all files in current directory."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ls\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Unable to list files in current directory\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StringBuffer fileNames \u003d new StringBuffer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File dir \u003d new File(model.getCurrDirectory().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "            File[] fileList \u003d dir.listFiles();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "            for (File file : fileList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if (file.isFile()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    String mimetype \u003d new MimetypesFileTypeMap().getContentType(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    // only list if is image"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    if ((mimetype.split(\"/\")[0]).equals(\"image\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        fileNames.append(file.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        fileNames.append(\"   \\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "                } else if (file.isDirectory()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    fileNames.append(file.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    fileNames.append(\"   \\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (fileNames.toString().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "                fileNames.append(MESSAGE_EMPTY_DIR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "                EventsCenter.getInstance().post(new UpdateFilmReelEvent(model.getDirectoryImageList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(fileNames.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(MESSAGE_INVALID_FILE_DIR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(ex.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 61,
      "benedictcss": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NextCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "//@@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Lists the next batch of photos in the directory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class NextCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Retrieves the next batch of photos for viewing.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (model.numOfRemainingImagesInDir() \u003c\u003d OpenCommand.BATCH_SIZE) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_MORE_NEXT_IMAGES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateImageListNextBatch();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return new CommandResult((String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, model.getTotalImagesInDir())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_BATCH_IN_IMAGE_LIST, model.getCurrBatchPointer() + 1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                model.getCurrBatchPointer() + Math.min(model.numOfRemainingImagesInDir(), OpenCommand.BATCH_SIZE))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH, model.getDirectoryImageList().size())))));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "// @@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.events.ui.ChangeImageEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.events.ui.FilmReelSelectionChangeEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Selects the image identified by the index number in the current batch."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final int BATCH_SIZE \u003d 10;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \": Opens the image identified by the index number in the current batch.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Parameters: INDEX (1 - 10)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_OPEN_IMAGE_SUCCESS \u003d \"Selected image: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public OpenCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        List\u003cPath\u003e dirImageList \u003d model.getDirectoryImageList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.numOfRemainingImagesInDir()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INDEX_END_OF_IMAGE_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } else if (targetIndex.getZeroBased() \u003e\u003d BATCH_SIZE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INDEX_EXCEED_MAX_BATCH_SIZE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Path openedImagePath \u003d dirImageList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            String openedImage \u003d openedImagePath.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(openedImage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Image img \u003d new Image(fis);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            model.updateCurrentOriginalImage(img, openedImagePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            EventsCenter.getInstance().post(new FilmReelSelectionChangeEvent(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            EventsCenter.getInstance().post(new ChangeImageEvent(img, \"preview\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            EventsCenter.getInstance().post(new ChangeImageEvent(img, \"original\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_IMAGE_SUCCESS, targetIndex.getOneBased())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + \" of \" + Math.min(OpenCommand.BATCH_SIZE, model.getDirectoryImageList().size()) + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + \"Image opened: \" + openedImagePath.getFileName().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PrevCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "//@@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Lists the next batch of photos in the directory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class PrevCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prev\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Retrieves the previous batch of photos for viewing.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (model.getCurrBatchPointer() \u003c OpenCommand.BATCH_SIZE) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_MORE_PREV_IMAGES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateImageListPrevBatch();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return new CommandResult((String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, model.getTotalImagesInDir())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_BATCH_IN_IMAGE_LIST, model.getCurrBatchPointer() + 1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                model.getCurrBatchPointer() + Math.min(model.numOfRemainingImagesInDir(), OpenCommand.BATCH_SIZE))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH, model.getDirectoryImageList().size())))));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Reverts the {@code model}\u0027s previewImageManager to its previously undone state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class RedoAllCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo-all\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All transformations successfully redone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more transformations to redo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RedoAllCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!model.canRedoPreviewImage()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.redoAllPreviewImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Reverts the {@code model}\u0027s current layer\u0027s previewImage to its previously undone state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transformation successfully redone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more transformations to redo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RedoCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!model.canRedoPreviewImage()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.redoPreviewImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 35,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * the command to save the current preview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @author lancelotwillow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \": save the current preview image with the name specified.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Parameters: fileName\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" modified.png\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Saving file as %s failed!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private String format;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private boolean originalFile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param fileName is the name of the file saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public SaveCommand(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] parts \u003d fileName.split(\"\\\\.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        format \u003d parts[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        originalFile \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public SaveCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        originalFile \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Build a new processbuilder and initialize with the commands need to the convert command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File saveFile;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!originalFile) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                saveFile \u003d new File(model.getCurrDirectory().toString() + \"/\" + fileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                if (saveFile.exists()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_DUPLICATED_IMAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                saveFile \u003d model.getCurrentOriginalImage().toFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                fileName \u003d saveFile.getName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                String[] parts \u003d saveFile.getName().split(\"\\\\.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                format \u003d parts[parts.length - 1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            BufferedImage savedImage \u003d ImageMagickUtil.processCanvas(model.getCanvas());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            fileName \u003d saveFile.getName();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageIO.write(savedImage, format, saveFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException | InterruptedException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(String.format(OUTPUT_FAILURE, fileName));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model.updateEntireImageList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new CommandResult(String.format(\"%s successfully saved!\", fileName));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        SaveCommand command \u003d (SaveCommand) object;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return command \u003d\u003d this || fileName.equals(command.fileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 75,
      "chivent": 5,
      "j-lum": 7,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Reverts the {@code model}\u0027s previewImageManager to its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class UndoAllCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo-all\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All transformations successfully undone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more transformations to undo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UndoAllCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!model.canUndoPreviewImage()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoAllPreviewImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Reverts the {@code model}\u0027s current layer\u0027s previewImage to its previous state."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transformation successfully undone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more transformations to undo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UndoCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!model.canUndoPreviewImage()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 36,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/canvas/CanvasAutoResizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the toggling of canvas auto-resize."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format : canvas auto-resize [ON/OFF] (case-insensitive)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * When turned on, the canvas will stretch to accommodate all layers regardless of canvas size."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class CanvasAutoResizeCommand extends CanvasCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" auto-resize\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of canvas auto-resize: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [ON/OFF]: \" + \"Turns auto-resize on or off.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" off, turns auto-resize off.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Auto-resize has been turned %s.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid operation %s!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CanvasAutoResizeCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CanvasAutoResizeCommand(String args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args.equalsIgnoreCase(\"on\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.setCanvasAuto(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CommandResult(String.format(OUTPUT_SUCCESS, args.toLowerCase()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args.equalsIgnoreCase(\"off\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.setCanvasAuto(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CommandResult(String.format(OUTPUT_SUCCESS, args.toLowerCase()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        throw new CommandException(String.format(OUTPUT_FAILURE, args.toLowerCase())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                + \"\\n\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                + MESSAGE_USAGE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/canvas/CanvasBgcolorCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the changing of background color."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format : canvas bgcolor [`none` | hex color code | rgba/hsla color code]."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class CanvasBgcolorCommand extends CanvasCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" bgcolor\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of canvas bgcolor: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [color]: \" + \"Changes the background color to the color specified.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" rgba(0,255,0,0.7) - Changes the background color to\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \" lime-green with 70% opacity.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Background color is now: %s.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid colour %s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String HEX_REGEX \u003d \"^#(?:[0-9a-f]{3}){1,2}$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String VERBOSE_REGEX \u003d \"(#([\\\\da-f]{3}){1,2}|\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"(rgb|hsl)a\\\\((\\\\d{1,3}%?,\\\\s?){3}(1|0?\\\\.\\\\d+)\\\\)|(rgb|hsl)\\\\(\\\\d{1,3}%?(,\\\\s?\\\\d{1,3}%?){2}\\\\))\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String NONE_REGEX \u003d \"(none)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CanvasBgcolorCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CanvasBgcolorCommand(String args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args.matches(HEX_REGEX) || args.matches(VERBOSE_REGEX) || args.matches(NONE_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.setBackgroundColor(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CommandResult(String.format(OUTPUT_SUCCESS, args));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        throw new CommandException(String.format(OUTPUT_FAILURE, args)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                + \"\\n\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 48,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/canvas/CanvasCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Parent for all Canvas commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public abstract class CanvasCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"canvas\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    protected String args;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    CanvasCommand(String args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/canvas/CanvasSizeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the changing and echoing of Canvas size."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format - canvas size (height x width)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * If the optional (height x width) is omitted, the current height and width is displayed instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class CanvasSizeCommand extends CanvasCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" size\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of canvas size: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" (SIZE): \" + \"Resizes the canvas if size is provided. Prints the current size otherwise.\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 800x600, sets the canvas size to 800px width and 600px height.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Canvas size is now %d by %d.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid size provided!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CanvasSizeCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CanvasSizeCommand(String args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CommandResult(String.format(OUTPUT_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                    model.getCanvasWidth(), model.getCanvasHeight()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String[] argumentArray \u003d args.trim().split(\"x\", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newWidth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            newWidth \u003d Integer.parseInt(argumentArray[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            newHeight \u003d Integer.parseInt((argumentArray.length \u003e 1) ? argumentArray[1] : \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (newWidth \u003c\u003d 0 | newHeight \u003c\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                    + \"\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCanvasSize(newHeight, newWidth);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(String.format(OUTPUT_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model.getCanvasWidth(), model.getCanvasHeight()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 64,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/google/GoogleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Shell for Google-type commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "public abstract class GoogleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"g\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String TYPE \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected String parameter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    GoogleCommand(String parameter) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    GoogleCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "        parameter \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/google/GoogleDlCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.gax.rpc.ApiException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Handles download and upload (to be added) of files to Google Photos"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleDlCommand extends GoogleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s downloaded into %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"%s failed to download.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \" Remember to type a valid name in the right format!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String TYPE \u003d \"dl\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FULL_CMD \u003d COMMAND_WORD + \" \" + TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of google download (requires an internet connection): \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" /i\u003cIMAGE_NAME\u003e: \" + \"Downloads specified image from Google Photos\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\tExample: \" + FULL_CMD + \" /i\u003cmountain.png\u003e, usage inclusive of \u003c\u003e \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" /a\u003cALBUM_NAME\u003e /i\u003cIMAGE_NAME\u003e: \" + \"Downloads specified image\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"from specified album in Google sPhotos\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\tExample: \" + FULL_CMD + \" /a\u003cVacation\u003e /i\u003cmountain.png\u003e, usage inclusive of \u003c\u003e\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" /a\u003cALBUM_NAME\u003e: \" + \"Downloads all images from specified album, \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"takes a longer time depending on number of images\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\tExample: \" + FULL_CMD + \" /a\u003cVacation\u003e, usage inclusive of \u003c\u003e \\n\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"!!WARNING: Any files with duplicate naming existing in the folder WILL be replaced\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Index to start from when parsing a image or album name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final int START_INDEX \u003d 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public GoogleDlCommand(String parameter) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(parameter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String org \u003d parameter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "            String currDir \u003d model.getCurrDirectory().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameter.startsWith(\"/a\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "                String[] params \u003d parameter.trim().split(\" /i\u003c\", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if (params.length \u003e 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    String albumName \u003d params[0].substring(START_INDEX, params[0].length() - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    // get image name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    parameter \u003d params[1].substring(0, params[1].length() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    model.getPhotoHandler(true).downloadAlbumImage(albumName, parameter, currDir);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    parameter \u003d parameter.substring(START_INDEX, parameter.length() - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    model.getPhotoHandler(true).downloadWholeAlbum(parameter, currDir);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else if (parameter.startsWith(\"/i\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "                parameter \u003d parameter.substring(START_INDEX, parameter.length() - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "                model.getPhotoHandler(true).downloadImage(parameter, currDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new Exception(parameter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "            model.updateEntireImageList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ApiException api) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(MESSAGE_CONNECTION_FAILURE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (CommandException coEx) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw coEx;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameter.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "                parameter \u003d org;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, parameter) + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, parameter, model.getCurrDirectory().toString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!(other instanceof GoogleDlCommand)) { //this handles null as well."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return ((GoogleDlCommand) other).parameter.equals(this.parameter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/google/GoogleLsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.gax.rpc.ApiException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Handles listing of files from Google Photos"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleLsCommand extends GoogleCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FAILURE_MESSAGE \u003d \"Failed to list\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String TYPE \u003d \"ls\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FULL_CMD \u003d COMMAND_WORD + \" \" + TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of google list (requires an internet connection): \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" Lists all photos in Google Photos, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"takes a longer amount of time depending on number of images in Google Photos.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" /a: \" + \"Lists all albums in Google Photos\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" \u003cALBUM_NAME\u003e: \" + \"Lists all photos in specified album from Google Photos\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\tExample: \" + FULL_CMD + \" \u003cVacation\u003e, usage inclusive of \u003c\u003e\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public GoogleLsCommand(String parameter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(parameter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        List\u003cString\u003e printTarget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameter.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "                printTarget \u003d model.getPhotoHandler(true).returnAllImagesList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "                //Retrieve all names and call"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else if (\"/a\".equals(parameter)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "                printTarget \u003d model.getPhotoHandler(true).returnAllAlbumsList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "                parameter \u003d parameter.substring(1, parameter.length() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "                printTarget \u003d model.getPhotoHandler(true).returnAllImagesinAlbum(parameter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "            for (String name : printTarget) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "                toPrint.append(name + \" \\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (toPrint.toString().isEmpty() \u0026\u0026 \"/a\".equals(parameter)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "                toPrint.append(\"Empty! No images to be displayed\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ApiException api) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(MESSAGE_CONNECTION_FAILURE + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (CommandException coEx) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw coEx;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(FAILURE_MESSAGE + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new CommandResult(toPrint.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!(other instanceof GoogleLsCommand)) { //this handles null as well."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return ((GoogleLsCommand) other).parameter.equals(this.parameter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/google/GoogleRefreshCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.gax.rpc.ApiException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Refreshes retrieved albums and images from google"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleRefreshCommand extends GoogleCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FAILURE_MESSAGE \u003d \"Failed to refresh\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String TYPE \u003d \"refresh\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FULL_CMD \u003d COMMAND_WORD + \" \" + TYPE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of google refresh (requires an internet connection): \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \": Refreshes image and album list gotten from google \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "            model.getPhotoHandler(true).refreshLists();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ApiException api) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(MESSAGE_CONNECTION_FAILURE + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (CommandException coEx) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw coEx;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(FAILURE_MESSAGE + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new CommandResult(\"Images and albums refreshed!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/google/GoogleUploadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.gax.rpc.ApiException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Handles download and upload (to be added) of files to Google Photos"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleUploadCommand extends GoogleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String TYPE \u003d \"ul\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String FULL_CMD \u003d COMMAND_WORD + \" \" + TYPE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of google upload (requires an internet connection): \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" \u003cIMAGE_NAME\u003e: Uploads specified image to Google Photos\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n\\tExample: \" + FULL_CMD + \" \u003cmountain.png\u003e, usage inclusive of \u003c\u003e \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"\\n- \" + FULL_CMD + \" all: Uploads all images in current directory to Google Photos, \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"takes a longer amount of time depending on number of images to upload. \\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"!!NOTE: All photos uploaded from Piconso can be found in album \u0027Piconso Uploads\u0027\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_ALL_DUPLICATE \u003d \"Failure to upload. %s already exist(s) in Google Photos.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String ADVICE \u003d \"\\n\\nYou\u0027ll need to use `g refresh` before you can see it by ls!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully uploaded to Google Photos: \\n%s\" + ADVICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"Upload success. Some of the images in the selected folder are \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"duplicates, only the following were uploaded: \\n%s\" + ADVICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"%s failed to upload.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "            + \"Remember to type a valid name in the right format!\" + \"\\n\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public GoogleUploadCommand(String parameter) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(parameter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String org \u003d parameter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameter.startsWith(\"all\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "                message \u003d model.getPhotoHandler(true).uploadAll(model.getCurrDirectory().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return returnUploadMessage(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "                parameter \u003d parameter.substring(1, parameter.length() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "                message \u003d model.getPhotoHandler(true).uploadImage(parameter, model.getCurrDirectory().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return returnUploadMessage(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ApiException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(ex.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (CommandException coEx) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw coEx;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameter.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "                parameter \u003d org;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, parameter) + \"\\n\\n\" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Parses and prepares a message to return to result display for uploading"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param uploaded duplicate list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return result to return to display"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandResult returnUploadMessage(String uploaded) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String message \u003d uploaded;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String allImages \u003d \"All images in directory\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (uploaded.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ALL_DUPLICATE, allImages));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else if (uploaded.substring(0, 4).equals(\".all\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "            message \u003d uploaded.substring(4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, message));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DUPLICATE, message));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!(other instanceof GoogleUploadCommand)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return ((GoogleUploadCommand) other).parameter.equals(this.parameter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the repositioning of Layers."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format - layer add [index]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Refer to the open command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerAddCommand extends LayerCommand {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" add\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of layer add: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [INDEX]: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"Adds the image identified by the index number in the current batch to a new layer.\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 2, adds the image with index 2 to the current canvas as the top-most layer.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Layer added!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid index provided or initial image not selected!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final int BATCH_SIZE \u003d 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LayerAddCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerAddCommand(String args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        List\u003cPath\u003e dirImageList \u003d model.getDirectoryImageList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Image img;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            i \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            index \u003d Index.fromOneBased(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d dirImageList.size() || index.getZeroBased() \u003e\u003d BATCH_SIZE) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new NumberFormatException(Messages.MESSAGE_INDEX_END_OF_IMAGE_LIST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            index \u003d Index.fromOneBased(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Path selectedImagePath \u003d dirImageList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            String selectedImage \u003d selectedImagePath.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(selectedImage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            img \u003d new Image(fis);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.addLayer(new PreviewImage(SwingFXUtils.fromFXImage(img, null)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(OUTPUT_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 79,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Parent for all Layer commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public abstract class LayerCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"layer\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    protected String args;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    LayerCommand(String args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the deleting of layers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format - layer delete [index]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Invalid indexes, locked layers are handled."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Layer operations cannot be undone!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerDeleteCommand extends LayerCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of layer delete: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [INDEX]: \" + \"Deletes the layer \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 2, deletes the 2nd layer in the canvas.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Layer deleted! Now working on layer index: %d.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid layer index provided!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LayerDeleteCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerDeleteCommand(String args) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index toRemove;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index currentLayer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            toRemove \u003d Index.fromOneBased(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            currentLayer \u003d model.removeLayer(toRemove);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(String.format(OUTPUT_SUCCESS, currentLayer.getOneBased()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 59,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerPositionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the repositioning of Layers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the form - layer position [x_positionxy_position]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Invalid arguments are handled."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * The top left of the canvas is considered to be (0, 0)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerPositionCommand extends LayerCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" position\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of layer position: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [POSITION]: \" + \"Repositions the layer to the provided co-ordinates\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 50x100, sets the layer\u0027s top right corner \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"to be 50px to the right and 100px from the top\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Layer position is now %d by %d.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid position provided!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LayerPositionCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerPositionCommand(String args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String[] argumentArray \u003d args.trim().split(\"x\", 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            newX \u003d Integer.parseInt(argumentArray[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            newY \u003d Integer.parseInt((argumentArray.length \u003e 1) ? argumentArray[1] : \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCurrentLayerPosition(newX, newY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(String.format(OUTPUT_SUCCESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model.getCanvas().getCurrentLayer().getX(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model.getCanvas().getCurrentLayer().getY()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 60,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerSelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles selection of the current working layer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the form : layer select [index]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Invalid indexes and missing canvas objects are handled."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * The current working layer is also protected from deletion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerSelectCommand extends LayerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" select\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of layer select: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [INDEX]: \" + \"Selects a layer to work on.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 2, selects the layer with index 2 to work on.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Now working on layer %d.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid layer index provided!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_MISSING_CANVAS \u003d \"You must open an image file for editing before proceeding!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerSelectCommand(String args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (args \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            i \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            index \u003d Index.fromOneBased(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.setCurrentLayer(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.refreshHistoryList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_MISSING_CANVAS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(String.format(OUTPUT_SUCCESS, index.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 50,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/layer/LayerSwapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Handles the changing of layer order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Commands are in the format - layer swap [index index]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Invalid indexes and invalid operations are handled."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * The index is also used for the z-index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * The lower the z-index, the further behind it will be during image composition."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerSwapCommand extends LayerCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String TYPE \u003d COMMAND_WORD + \" swap\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Usage of layer swap: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n- \" + TYPE + \" [TO] [FROM]: \" + \"Swaps the order of two distinct layers\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            + \"\\n\\tExample: \" + TYPE + \" 1 3, swaps the order of the 1st and 3rd layer in the canvas.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_SUCCESS \u003d \"Layers %d and %d are now swapped.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_FAILURE \u003d \"Invalid index(es) provided!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_ILLEGAL \u003d \"Unable to swap layers!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LayerSwapCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerSwapCommand(String args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String[] argumentArray \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int to;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int from;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index toIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index fromIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            to \u003d Integer.parseInt(argumentArray[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            from \u003d Integer.parseInt((argumentArray.length \u003e 1) ? argumentArray[1] : \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            toIndex \u003d Index.fromOneBased(to);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            fromIndex \u003d Index.fromOneBased(from);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.swapLayer(toIndex, fromIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new CommandException(OUTPUT_ILLEGAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ImageMagickUtil.render(model.getCanvas(), logger, \"preview\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new CommandResult(String.format(OUTPUT_SUCCESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                toIndex.getOneBased(), fromIndex.getOneBased()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 65,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ApplyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author lancelotwilow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * Parses input arguments and creates a new ExampleCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ApplyCommandParser implements Parser\u003cApplyCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExampleCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * and returns an ExampleCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public ApplyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] all \u003d Stream.of(args.split(\" \"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                .filter(x -\u003e !\"\".equals(x))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                .toArray(String[]::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (all.length \u003c 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (all[0].equals(\"raw\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (all.length \u003c 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE_RAW));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return new ApplyCommand(Arrays.copyOfRange(all, 1, all.length));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String operation \u003d all[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] cmds \u003d Arrays.copyOfRange(all, 1, all.length);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new ApplyCommand(new Transformation(operation, cmds));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 41,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        protected int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        protected Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CanvasCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.ENTIRE_CANVAS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasAutoResizeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasBgcolorCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasSizeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Parses input arguments and creates the corresponding Google type command object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class CanvasCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Parses the sub-command and arguments for the Canvas command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @throws ParseException if the user input does not conform an expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public CanvasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String[] argumentArray \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String subcommand \u003d argumentArray[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String argument \u003d (argumentArray.length \u003e 1) ? argumentArray[1] : null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        switch (subcommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"auto-resize\": {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(CanvasAutoResizeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CanvasAutoResizeCommand(argument);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"bgcolor\": {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(CanvasBgcolorCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CanvasBgcolorCommand(argument);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"size\": {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new CanvasSizeCommand(argument);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new ParseException(ENTIRE_CANVAS_MESSAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 39,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CdCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "//@@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Parses input arguments and creates a new CdCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class CdCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CdCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * and returns an CdCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CdCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path dir \u003d ParserUtil.parseFilePath(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return new CdCommand(dir);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CdCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateApplyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.CreateApplyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class CreateApplyCommandParser implements Parser\u003cCreateApplyCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExampleCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * and returns an ExampleCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public CreateApplyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] all \u003d args.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cTransformation\u003e transformations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (all.length \u003c 3 || all[1].contains(\"|\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateApplyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 2; i \u003c all.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            String command \u003d all[i];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            String[] cmds \u003d command.split(\"\\\\|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            String name \u003d cmds[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            cmds \u003d Arrays.copyOfRange(cmds, 1, cmds.length);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            transformations.add(new Transformation(name, cmds));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new CreateApplyCommand(all[1], transformations);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoogleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.ENTIRE_GOOGLE_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GOOGLE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleDlCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleLsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleRefreshCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleUploadCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Parses input arguments and creates the corresponding Google type command object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String type \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoogleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * and returns an GoogleCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws ParseException if the user input does not conform an expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public GoogleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String commandParam \u003d parseArgumentString(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case \"ls\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new GoogleLsCommand(commandParam);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case \"dl\": {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (commandParam.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new ParseException(MESSAGE_GOOGLE_INVALID_FORMAT + \"\\n\\n\" + GoogleDlCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new GoogleDlCommand(commandParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case \"ul\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (commandParam.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new ParseException(MESSAGE_GOOGLE_INVALID_FORMAT + \"\\n\\n\" + GoogleUploadCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new GoogleUploadCommand(commandParam);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case \"refresh\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new GoogleRefreshCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new ParseException(ENTIRE_GOOGLE_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Parse argument string to extract type of command and arguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param args command string entered by user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return parameter to be used in Google-type Command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws ParseException if command format is wrong"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String parseArgumentString(String args) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String[] parameters \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // checking if argument string is a valid format"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (parameters.length \u003e 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "            type \u003d parameters[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "            // if command has extra arguments"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (parameters.length \u003e 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return parameters[1].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new ParseException(ENTIRE_GOOGLE_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LayerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.ENTIRE_LAYER_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerPositionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerSelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerSwapCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Parses input arguments and creates the corresponding Google type command object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Parses the sub-command and arguments for the Canvas command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @throws ParseException if the user input does not conform an expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String[] argumentArray \u003d args.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String subcommand \u003d argumentArray[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String argument \u003d (argumentArray.length \u003e 1) ? argumentArray[1] : null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        switch (subcommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"add\": {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(LayerAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new LayerAddCommand(argument);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(LayerDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new LayerDeleteCommand(argument);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"select\": {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(LayerSelectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new LayerSelectCommand(argument);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"position\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new LayerPositionCommand(argument);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        case \"swap\": {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                throw new ParseException(LayerSwapCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return new LayerSwapCommand(argument);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new ParseException(ENTIRE_LAYER_MESSAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 51,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return new OpenCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 8,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //TODO: Left as an example, to be deleted/replaced."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //        requireNonNull(tag);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Parses a {@code String filepath} into a {@code Path}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * @throws ParseException if the given {@code filepath} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static Path parseFilePath(String filepath) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        requireNonNull(filepath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String trimmedFilePath \u003d filepath.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Path dir;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            dir \u003d Paths.get(trimmedFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (InvalidPathException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new ParseException(\"parsing fail\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (dir.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new ParseException(\"Empty\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return dir;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 17,
      "benedictcss": 14,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PiconsoParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.CreateApplyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.LsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.PrevCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.RedoAllCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.UndoAllCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.google.GoogleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.layer.LayerCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class PiconsoParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        case CdCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return new CdCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case NextCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new NextCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        case PrevCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return new PrevCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case LsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new LsCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case ApplyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return new ApplyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case CreateApplyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return new CreateApplyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        case UndoAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            return new UndoAllCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        case RedoAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            return new RedoAllCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new LoginCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case GoogleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new GoogleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case LayerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new LayerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case CanvasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CanvasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 12,
      "chivent": 23,
      "ihwk1996": 8,
      "benedictcss": 14,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SaveCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * ."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private ArrayList\u003cString\u003e formats \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            Arrays.asList(\"jpg\", \"JPG\", \"jpeg\", \"JPEG\", \"tiff\", \"TIFF\", \"gif\", \"GIF\", \"png\", \"PNG\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExampleCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * and returns an ExampleCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] all \u003d args.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (all.length \u003d\u003d 1 \u0026\u0026 args.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (all.length !\u003d 2 || isFormatValid(all[1])) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return new SaveCommand(all[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private boolean isFormatValid(String fileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String[] parts \u003d fileName.split(\"\\\\.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return parts.length !\u003d 2 || !formats.contains(parts[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.canvas.Canvas;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotoHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Get PhotoHandler, directs user to login if yet to be logged in."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param subCommand returns true if from an instance such as g ls, dl, ul or refresh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    PhotoHandler getPhotoHandler(boolean subCommand) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Set PhotoHandler."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    void setPhotoHandler(PhotoHandler instance);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Gets currently logged in user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    String getUserLoggedIn() throws CommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Performs necessary set up for current model (test or actual)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    void setUpForGoogle(boolean isTest);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns true if the current layer\u0027s PreviewImage has undone states to restore."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    boolean canUndoPreviewImage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns true if the current layer\u0027s PreviewImage states to restore."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    boolean canRedoPreviewImage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Undoes one state in the current layer\u0027s previewImage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void undoPreviewImage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Redoes one state in the current layer\u0027s previewImage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void redoPreviewImage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Undoes all states in the current layer\u0027s previewImage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void undoAllPreviewImage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Redoes all states in the current layer\u0027s previewImage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void redoAllPreviewImage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Updates the userPrefs current directory."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    void updateCurrDirectory(Path newCurrDirectory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Retrieves the userPrefs current directory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    Path getCurrDirectory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Retrieves the list of images in current directory."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    List\u003cPath\u003e getDirectoryImageList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the total number of images in current directory"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    int getTotalImagesInDir();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the current batch pointer"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    int numOfRemainingImagesInDir();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the current batch pointer in {@code UserPrefs}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    int getCurrBatchPointer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Updates entire image list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "    void updateEntireImageList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Updates the batch pointer to the next 10 images."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    void updateImageListNextBatch();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Updates the batch pointer to the previous 10 images."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    void updateImageListPrevBatch();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Retrieves the current displayed original image."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    Path getCurrentOriginalImage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * Set the current displayed original image."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    void setCurrentOriginalImage(Path path);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Retrieves the current displayed preview image."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    PreviewImage getCurrentPreviewImage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Retrieves the current displayed preview image."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    Path getCurrentPreviewImagePath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * update the preview image stored in the model"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param image"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void updateCurrentPreviewImage(BufferedImage image);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Update the current displayed original image."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @param img"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @param imgPath"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    void updateCurrentOriginalImage(Image img, Path imgPath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Update the current displayed original image for test."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @param previewImage"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void updateCurrentOriginalImageForTest(PreviewImage previewImage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * update the transformationSet of the current image"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param transformation - transfomation to be added"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void addTransformation(Transformation transformation);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void addLayer(PreviewImage i, String name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void addLayer(PreviewImage i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    Index removeLayer(Index i) throws IllegalOperationException;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void setCurrentLayer(Index i);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void swapLayer(Index to, Index from) throws IllegalOperationException;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void setCanvasSize(int height, int width);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void setBackgroundColor(String color);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void setCanvasAuto(boolean auto);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    int getCanvasHeight();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    int getCanvasWidth();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    Canvas getCanvas();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //void saveCanvas(String fileName) throws IOException, InterruptedException, UnsupportedPlatformException;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void refreshHistoryList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    void setCurrentLayerPosition(int newX, int newY);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 11,
      "chivent": 26,
      "ihwk1996": 30,
      "benedictcss": 34,
      "j-lum": 22,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CONNECTION_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotosLibraryClientFactory.BLOCKER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotosLibraryClientFactory.DATA_STORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotosLibraryClientFactory.TEST_FILE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javafx.embed.swing.SwingFXUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.events.ui.ChangeDirectoryEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.HistoryUpdateEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.LayerUpdateEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.events.ui.UpdateFilmReelEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.canvas.Canvas;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotoHandler;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotosLibraryClientFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private List\u003cPath\u003e dirImageList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Path currentOriginalImage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private PhotoHandler photoLibrary;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Canvas canvas;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Strictly for test mode. Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public ModelManager(UserPrefs userPrefs, boolean isTest) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        requireAllNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.fine(\"Initializing with user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.userPrefs.initImageList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        dirImageList \u003d this.userPrefs.getCurrImageListBatch();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        setUpForGoogle(isTest);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this(new UserPrefs(), true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Directory Image List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    // @@author benedictcss"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns an array list of the images from the current directory {@code dirImageList}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * backed by the list of {@code userPrefs}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public List\u003cPath\u003e getDirectoryImageList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.dirImageList \u003d userPrefs.getCurrImageListBatch();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return this.dirImageList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the total number of images in current directory"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int getTotalImagesInDir() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return userPrefs.getTotalImagesInDir();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the current number of remaining pictures in {@code UserPrefs}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int numOfRemainingImagesInDir() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return userPrefs.numOfRemainingImagesInDir();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the current batch pointer in {@code UserPrefs}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int getCurrBatchPointer() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return userPrefs.getCurrBatchPointer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update entire image list in {@code UserPrefs}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateEntireImageList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        userPrefs.initImageList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateFilmReelEvent(getDirectoryImageList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Updates the batch pointer in {@code UserPrefs}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateImageListNextBatch() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        userPrefs.updateImageListNextBatch();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateFilmReelEvent(getDirectoryImageList()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Updates the batch pointer in {@code UserPrefs}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateImageListPrevBatch() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        userPrefs.updateImageListPrevBatch();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateFilmReelEvent(getDirectoryImageList()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public Path getCurrentOriginalImage() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return this.currentOriginalImage;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void setCurrentOriginalImage(Path path) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.currentOriginalImage \u003d path;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the current displayed original image and"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * reinitialize the previewImageManager with the new image"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateCurrentOriginalImage(Image img, Path imgPath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        currentOriginalImage \u003d imgPath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        PreviewImage selectedImage \u003d new PreviewImage(SwingFXUtils.fromFXImage(img, null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        canvas \u003d new Canvas(selectedImage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the current displayed original image and"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * reinitialize the previewImageManager with the new image, without imgPath"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateCurrentOriginalImageForTest(PreviewImage previewImage) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        canvas \u003d new Canvas(previewImage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GoogleClient Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "    // @@author chivent"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setPhotoHandler(PhotoHandler instance) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "        photoLibrary \u003d instance;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public PhotoHandler getPhotoHandler(boolean subCommand) throws CommandException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (photoLibrary \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (subCommand) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new CommandException(\"You are not logged in! Please login with `login` to proceed.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "                photoLibrary \u003d PhotosLibraryClientFactory.createClient();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if (photoLibrary \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    throw new CommandException(MESSAGE_CONNECTION_FAILURE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new CommandException(MESSAGE_CONNECTION_FAILURE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return photoLibrary;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getUserLoggedIn () throws CommandException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (photoLibrary \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getPhotoHandler(false).identifyUser();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setUpForGoogle(boolean isTest) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (isTest) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FileUtil.createDirectoriesIfMissing(DATA_STORE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chivent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chivent"
        },
        "content": "                FileUtil.createIfMissing(TEST_FILE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chivent"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FileUtil.deleteIfAvaliable(TEST_FILE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (!BLOCKER.exists()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chivent"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    photoLibrary \u003d PhotosLibraryClientFactory.loginUserIfPossible();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chivent"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    logger.warning(\"Unable to log into user account\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    // @@author ihwk1996"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public boolean canUndoPreviewImage() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return getCurrentPreviewImage().canUndo();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public boolean canRedoPreviewImage() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return getCurrentPreviewImage().canRedo();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoPreviewImage() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        getCurrentPreviewImage().undo();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoPreviewImage() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        getCurrentPreviewImage().redo();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoAllPreviewImage() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        getCurrentPreviewImage().undoAll();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoAllPreviewImage() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        getCurrentPreviewImage().redoAll();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d get/updating preview image \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Adds a transformation to current layer"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @param transformation transformation to add"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void addTransformation(Transformation transformation) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        canvas.getCurrentLayer().addTransformation(transformation);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        refreshHistoryList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public PreviewImage getCurrentPreviewImage() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return canvas.getCurrentLayer().getImage();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public Path getCurrentPreviewImagePath() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return getCurrentPreviewImage().getCurrentPath();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //@@author lancelotwillow"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void updateCurrentPreviewImage(BufferedImage image) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            canvas.getCurrentLayer().getImage().commit(image);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            refreshHistoryList();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            logger.severe(e.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Update UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    // @@author benedictcss"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateCurrDirectory(Path newCurrDirectory) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.userPrefs.updateUserPrefs(newCurrDirectory);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeDirectoryEvent(getCurrDirectory().toString()));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateFilmReelEvent(getDirectoryImageList()));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public Path getCurrDirectory() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return this.userPrefs.getCurrDirectory();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Canvas and layers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //@@author j-lum"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Sets the background color of the canvas to the provided color."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param color - valid color string in either hex, rgb/hsl(a) or none."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setBackgroundColor(String color) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setBackgroundColor(color);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Sets the canvas size to the new size provided."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param height - a integer larger than 0."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param width - a integer larger than 0."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCanvasSize(int height, int width) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setHeight(height);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setWidth(width);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Turns auto-resizing of the canvas on/off."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param auto - if true, the canvas auto-resizes."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCanvasAuto(boolean auto) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCanvasAuto(auto);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @return the height of the canvas."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getCanvasHeight() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return canvas.getHeight();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @return the width of the canvas."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getCanvasWidth() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return canvas.getWidth();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Adds a layer to the canvas, a name is generated automatically."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - PreviewImage to add."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addLayer(PreviewImage i) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.addLayer(i);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Overloads the addLayer function to handle an optional name."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - PreviewImage to add"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param name - Name of the new layer."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addLayer(PreviewImage i, String name) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.addLayer(i, name);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Removes the layer at the given index."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - Index of the layer to remove."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @return the new index of the current layer."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @throws IllegalOperationException - thrown if the current layer is being removed"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * or the only layer is being removed."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Index removeLayer(Index i) throws IllegalOperationException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index tmp \u003d canvas.removeLayer(i);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return tmp;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Canvas getCanvas() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return canvas;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCurrentLayer(Index i) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCurrentLayer(i);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCurrentLayerPosition(int x, int y) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCurrentLayerPosition(x, y);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Swaps two layers."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param to - Layer 1"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param from - Layer 2."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @throws IllegalOperationException - thrown when the two layers are the same."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void swapLayer(Index to, Index from) throws IllegalOperationException {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.swapLayer(to, from);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        refreshLayerList();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Simple utility function that updates the HistoryListPanel and logs the event."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void refreshHistoryList() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new HistoryUpdateEvent("
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        canvas.getCurrentLayer().getImage().getTransformationsAsString()));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Simple utility function that updates the LayerListPanel and logs the event."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void refreshLayerList() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        EventsCenter.getInstance().post("
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerUpdateEvent("
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        canvas.getLayerNames(), canvas.getCurrentLayerIndex()));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 13,
      "chivent": 72,
      "ihwk1996": 59,
      "benedictcss": 122,
      "j-lum": 138,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PreviewImage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.TransformationSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Wraps the image and transformation set for preview."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class PreviewImage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final String CACHE_PATH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private final TransformationSet transformationSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private int currentSize; // Number of saved images"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private long layerId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File cache \u003d new File(\"cache\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        cache.mkdir();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        CACHE_PATH \u003d cache.getPath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public PreviewImage(BufferedImage image) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.layerId \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.currentSize \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.currentIndex \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.height \u003d image.getHeight();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.width \u003d image.getWidth();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        commit(image);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.transformationSet \u003d new TransformationSet();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public PreviewImage(BufferedImage image, TransformationSet transformationSet) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.layerId \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.currentSize \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.currentIndex \u003d -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.height \u003d image.getHeight();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.width \u003d image.getWidth();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        commit(image);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        this.transformationSet \u003d transformationSet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public int getWidth() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return currentIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public int getCurrentSize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return currentSize;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Check if have previous states to undo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return currentIndex \u003e 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Check if have previous undone states to redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return currentIndex \u003c currentSize - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Decrement current index if able to undo."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        currentIndex--;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Increment current index if able to redo."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        currentIndex++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Decrement current index if able to undo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoAll() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        currentIndex \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Increment current index if able to redo."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoAll() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        currentIndex \u003d currentSize - 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Determine if history needs to be purged before committing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void commit(BufferedImage image) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (currentIndex \u003d\u003d currentSize - 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            normalCommit(image);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            purgeAndCommit(image);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Increment size and current index, then cache the image."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private void normalCommit(BufferedImage image) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            currentSize++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            currentIndex++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            File out \u003d new File(CACHE_PATH + \"/Layer\" + layerId + \"-\" + currentIndex + \".png\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            ImageIO.write(image, \"png\", out);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Exception while caching :\" + e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        logger.info(\"Caching successful\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Purge redundant images, then do a normal commit."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private void purgeAndCommit(BufferedImage image) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        int numDeleted \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        for (int i \u003d currentIndex + 1; i \u003c currentSize; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            File toDelete \u003d new File(CACHE_PATH + \"/Layer\" + layerId + \"-\" + i + \".png\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            toDelete.delete();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            numDeleted++;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        // Reduce the current size depending on the number of images deleted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        currentSize \u003d currentSize - numDeleted;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        normalCommit(image);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Get the current image state from cache."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public BufferedImage getImage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage imageFromCache \u003d null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            File in \u003d new File(CACHE_PATH + \"/Layer\" + layerId + \"-\" + currentIndex + \".png\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            imageFromCache \u003d ImageIO.read(in);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Error reading from cache.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        logger.info(\"Reading from cache successful.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return imageFromCache;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Get the current image path from cache."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public Path getCurrentPath() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File f \u003d new File(CACHE_PATH + \"/Layer\" + layerId + \"-\" + currentIndex + \".png\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return f.toPath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public TransformationSet getTransformationSet() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return transformationSet;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Adds a transformation to the image"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void addTransformation(Transformation t) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (currentIndex !\u003d transformationSet.getTransformations().size()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            LinkedList linkedList \u003d new LinkedList\u003c\u003e("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "                    transformationSet.getTransformations().subList(0, currentIndex));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            transformationSet.setTransformations(linkedList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        transformationSet.addTransformations(t);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            super(\"Current state pointer at start of previewImageState list, unable to undo.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            super(\"Current state pointer at end of previewImageState list, unable to redo.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public ArrayList\u003cString\u003e getTransformationsAsString() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        LinkedList\u003cTransformation\u003e sub \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "                new LinkedList\u003c\u003e (transformationSet.getTransformations().subList(0, currentIndex));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        for (Transformation t : sub) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            output.add(t.toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "ihwk1996": 235,
      "j-lum": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import javax.activation.MimetypesFileTypeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private static int currBatchPointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Path currDirectory \u003d Paths.get(System.getProperty(\"user.home\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private ArrayList\u003cPath\u003e imageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    // @@author benedictcss"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public Path getCurrDirectory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return currDirectory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the current directory {@code currDirectory} with the new directory"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * {@code newCurrDirectory}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateUserPrefs(Path newCurrDirectory) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.currDirectory \u003d newCurrDirectory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        initImageList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the list of images {@code imageList} with the images found in current directory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * {@code currDirectory}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void initImageList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        File currFileDir \u003d new File(currDirectory.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        File[] currFiles \u003d currFileDir.listFiles();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        ArrayList\u003cPath\u003e dirImageList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            for (File file : currFiles) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                if (file.isFile()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    String mimetype \u003d new MimetypesFileTypeMap().getContentType(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    // only list if is image"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    if (\"image\".equals(mimetype.split(\"/\")[0]) \u0026\u0026 !\"image/gif\".equals(mimetype)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                        dirImageList.add(file.toPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Collections.sort(dirImageList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        imageList \u003d dirImageList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        currBatchPointer \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the total number of images in {@code imageList}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int getTotalImagesInDir() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return imageList.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the {@code currBatchPointer}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int numOfRemainingImagesInDir() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return getTotalImagesInDir() - getCurrBatchPointer();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns the current batch pointer in {@code UserPrefs}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public int getCurrBatchPointer() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return currBatchPointer;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the {@code currBatchPointer} to the next 10 images"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateImageListNextBatch() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        currBatchPointer +\u003d 10;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Update the {@code currBatchPointer} to the prev 10 images"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void updateImageListPrevBatch() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        currBatchPointer -\u003d 10;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public List\u003cPath\u003e getCurrImageListBatch() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return imageList.subList(currBatchPointer, Math.min(currBatchPointer + 10, getTotalImagesInDir()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return Objects.hash(guiSettings);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 3,
      "benedictcss": 88,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/canvas/Canvas.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Represents a working canvas."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Guarantees that there is at least one layer remaining on the canvas"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * and that the canvas area must be larger than zero."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class Canvas {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_ERROR_CURRENT_LAYER \u003d \"You cannot remove the layer you\u0027re currently working on!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String OUTPUT_ERROR_ONLY_LAYER \u003d \"You cannot remove the only layer in a canvas!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String LAYER_NAME \u003d \"Layer %d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private String backgroundColor \u003d \"none\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private ArrayList\u003cLayer\u003e layers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Layer currentLayer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Index currentLayerIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Boolean isCanvasAuto;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int layerNameCounts;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Constructor for a canvas that has the size of the initial image."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Auto-resizing of the canvas defaults to false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param initial - The image which the first layer will be created with. The canvas will take the height and width"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     *                of this image."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Canvas(PreviewImage initial) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        height \u003d initial.getImage().getHeight();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        width \u003d initial.getImage().getWidth();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        addLayer(initial);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerNameCounts \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        currentLayerIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        currentLayer \u003d layers.get(currentLayerIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        isCanvasAuto \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //Layer operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public ArrayList\u003cLayer\u003e getLayers() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return layers;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Returns the list of layer names as an {@code ArrayList\u003cString\u003e} for the LayerPanel."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * * @return a {@code ArrayList\u003cString\u003e} of all the layers in the canvas in order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public ArrayList\u003cString\u003e getLayerNames() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        ArrayList\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        for (Layer l : layers) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            names.add(i + \": \" + l.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addLayer(PreviewImage i, String name) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layers.add(new Layer(i, name));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Adds a layer without a specified name. A non-unique name will be generated."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - PreviewImage of the new Layer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addLayer(PreviewImage i) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerNameCounts++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layers.add(new Layer(i, String.format(LAYER_NAME, layerNameCounts)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Removes a layer from the canvas. If the only layer left is being removed,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * throws an {@code IllegalOperationException}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - Index of the layer to remove."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCurrentLayer(Index i) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        currentLayerIndex \u003d i;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        currentLayer \u003d layers.get(currentLayerIndex.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Removes a layer from the canvas. If the only layer left is being remove, throws an IllegalOperationException."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param i - Index of the layer to remove"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Index removeLayer(Index i) throws IllegalOperationException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (layers.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new IllegalOperationException(OUTPUT_ERROR_ONLY_LAYER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (i.getZeroBased() \u003d\u003d currentLayerIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new IllegalOperationException(OUTPUT_ERROR_CURRENT_LAYER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layers.remove(i.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (i.getZeroBased() \u003c currentLayerIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            currentLayerIndex \u003d Index.fromZeroBased(currentLayerIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return currentLayerIndex;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Function to swap two layers if neither of them are locked."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Throws an {@code IndexOutOfBounds}  if indexes provided are not valid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Throws an {@code IllegalOperationException} if any of the layers are locked."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param to A zero-based index within bounds"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param from A zero-based index within bounds"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void swapLayer(Index to, Index from) throws IllegalOperationException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (!to.equals(from)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (currentLayerIndex.getZeroBased() \u003d\u003d to.getZeroBased()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                currentLayerIndex \u003d Index.fromZeroBased(from.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            } else if (currentLayerIndex.getZeroBased() \u003d\u003d from.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                currentLayerIndex \u003d Index.fromZeroBased(to.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            Collections.swap(layers, to.getZeroBased(), from.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            throw new IllegalOperationException(\"Invalid indexes provided!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    // Misc accessors"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Layer getCurrentLayer() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return currentLayer;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCurrentLayerPosition(int x, int y) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        currentLayer.setPosition(x, y);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Index getCurrentLayerIndex() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return currentLayerIndex;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getWidth() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setWidth(int width) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.width \u003d width;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Boolean isCanvasAuto() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return isCanvasAuto;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCanvasAuto(Boolean isCanvasAuto) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.isCanvasAuto \u003d isCanvasAuto;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public String getBackgroundColor() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return backgroundColor;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setBackgroundColor(String color) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        backgroundColor \u003d color;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 176,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/canvas/Layer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Represents a layer in a canvas."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Guarantees that the image in the layer is not null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class Layer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private final PreviewImage image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int x;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int y;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //Constructs a new Layer that has a default position (0, 0)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Layer(PreviewImage image, String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.image \u003d requireNonNull(image);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.x \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.y \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.height \u003d image.getHeight();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.width \u003d image.getWidth();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Adds a transformation to the layer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param  t - the transformation to add."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addTransformation(Transformation t) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        image.addTransformation(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Sets the position of the layer to the provided co-ordinates"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param x - the new X position of the layer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param y - the new Y position of the layer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setPosition(int x, int y) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        setX(x);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        setY(y);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //Misc accessors."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getX() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setX(int x) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.x \u003d x;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getY() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setY(int y) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.y \u003d y;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public int getWidth() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setWidth(int width) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.width \u003d width;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public PreviewImage getImage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/google/PhotoHandler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.model.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ALBUM_REQUESTED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_IMAGE_REQUESTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.RandomAccessFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.PhotosLibraryClient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.internal.InternalPhotosLibraryClient.ListAlbumsPagedResponse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.internal.InternalPhotosLibraryClient.ListMediaItemsPagedResponse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.internal.InternalPhotosLibraryClient.SearchMediaItemsPagedResponse;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.Album;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.BatchCreateMediaItemsRequest;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.BatchCreateMediaItemsResponse;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.MediaItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.NewMediaItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.NewMediaItemResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.upload.UploadMediaItemRequest;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.upload.UploadMediaItemResponse;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.util.NewMediaItemFactory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.rpc.Code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.rpc.Status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": " * A middle-man giving access to Google Photos, translates commands to call appropriate methods."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class PhotoHandler {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String PICONSO_ALBUM \u003d \"Piconso Uploads\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String WRONG_PATH \u003d \"%s does not exist in folder!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String UPLOAD_FORMAT \u003d \"\\n%s  \u003e\u003e saved as \u003e\u003e  %s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private PhotosLibraryClient photosLibraryClient;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String user;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, Album\u003e albumMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, MediaItem\u003e imageMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, MediaItem\u003e albumSpecificMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public PhotoHandler(PhotosLibraryClient client, String email) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "        photosLibraryClient \u003d client;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        user \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public PhotoHandler(String email, Map\u003cString, Album\u003e albumMap, Map\u003cString, MediaItem\u003e imageMap) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        photosLibraryClient \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        user \u003d email;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.albumMap \u003d albumMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.imageMap \u003d imageMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Listing Images (ls command) \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a list of image names and saves a copy in albumSpecificMap for later reference"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return list of image names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public List\u003cString\u003e returnAllImagesList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (imageMap.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "            retrieveAllImagesFromGoogle();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new ArrayList\u003c\u003e(imageMap.keySet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a list of album names and saves a copy in albumSpecificMap for later reference"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return list of album names"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public List\u003cString\u003e returnAllAlbumsList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (albumMap.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "            retrieveAllAlbumsFromGoogle();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new ArrayList\u003c\u003e(albumMap.keySet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns list of images in a specified album and saves a copy in albumSpecificMap for later reference"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param albumName name of album to look in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return list of image names"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public List\u003cString\u003e returnAllImagesinAlbum(String albumName) throws CommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "        retrieveSpecificAlbumGoogle(albumName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return new ArrayList\u003c\u003e(albumSpecificMap.keySet());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Refreshes stored lists of album and image names."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void refreshLists() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "        retrieveAllAlbumsFromGoogle();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "        retrieveAllImagesFromGoogle();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Retrieving Images from Google \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Retrieves all albums in Google Photos"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void retrieveAllAlbumsFromGoogle() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ListAlbumsPagedResponse albums \u003d photosLibraryClient.listAlbums();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (Album album : albums.iterateAll()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "            albumMap.put(getUniqueName(albumMap, album.getTitle(), null), album);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Retrieves all images in Google Photos"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void retrieveAllImagesFromGoogle() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageMap.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ListMediaItemsPagedResponse listMediaItems \u003d photosLibraryClient.listMediaItems();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (MediaItem item : listMediaItems.iterateAll()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //only store the item if it is an image"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (item.getMimeType().contains(\"image\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "                String mimeType \u003d \".\" + item.getMimeType().replace(\"image/\", \"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "                imageMap.put(getUniqueName(imageMap, item.getFilename(), mimeType), item);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Retrieves all images in specified album"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param albumName name of album to retrieve"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void retrieveSpecificAlbumGoogle(String albumName) throws CommandException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Album album;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // if album name not found, re-retrieve all albums (in case un-updated)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if ((album \u003d albumMap.get(albumName)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "            retrieveAllAlbumsFromGoogle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if ((album \u003d albumMap.get(albumName)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_ALBUM_REQUESTED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumSpecificMap.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "        SearchMediaItemsPagedResponse listMediaItems \u003d photosLibraryClient.searchMediaItems(album.getId());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (MediaItem item : listMediaItems.iterateAll()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //only store the item if it is an image"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (item.getMimeType().contains(\"image\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "                String mimeType \u003d \".\" + item.getMimeType().replace(\"image/\", \"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "                albumSpecificMap.put(getUniqueName(albumSpecificMap, item.getFilename(), mimeType), item);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Downloading Images from Google \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Downloads an image from Google Photos"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param imageName name of image to look for"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param currDir   directory to save image in."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws IOException thrown if input/output is invalid"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void downloadImage(String imageName, String currDir) throws CommandException, IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": "        MediaItem image;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // if image name not found, re-retrieve album (in case un-updated)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if ((image \u003d imageMap.get(imageName)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chivent"
        },
        "content": "            retrieveAllImagesFromGoogle();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if ((image \u003d imageMap.get(imageName)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_IMAGE_REQUESTED);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chivent"
        },
        "content": "        saveImageInDir(image, currDir + \"/\" + imageName);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Downloads an image from last opened album from Google Photos"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param albumName album to look in"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param imageName image to look for"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param currDir   directory to save image in."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws IOException thrown if input/output is invalid"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void downloadAlbumImage(String albumName, String imageName, String currDir)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throws CommandException, IOException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chivent"
        },
        "content": "        MediaItem image;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chivent"
        },
        "content": "        retrieveSpecificAlbumGoogle(albumName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // if image name not found, re-retrieve album (in case un-updated)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if ((image \u003d albumSpecificMap.get(imageName)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_IMAGE_REQUESTED);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chivent"
        },
        "content": "        saveImageInDir(image, currDir + \"/\" + imageName);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Downloads all images from an album in Google Photos"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param albumName album to download"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param currDir   directory to save image in."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws IOException thrown if input/output is invalid"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void downloadWholeAlbum(String albumName, String currDir) throws IOException, CommandException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chivent"
        },
        "content": "        retrieveSpecificAlbumGoogle(albumName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (Map.Entry\u003cString, MediaItem\u003e entry : albumSpecificMap.entrySet()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //only store the item if it is an image"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (entry.getValue().getMimeType().contains(\"image\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chivent"
        },
        "content": "                saveImageInDir(entry.getValue(), currDir + \"/\" + entry.getKey());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Saves the specified image into the current opened directory"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param image    MediaItem retrieved from Google Photos"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param pathName directory to save image in."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws IOException thrown if input/output is invalid"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void saveImageInDir(MediaItem image, String pathName) throws IOException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String extensionType \u003d image.getMimeType().split(\"/\")[1];"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chivent"
        },
        "content": "        BufferedImage newImage \u003d ImageIO.read(new URL(image.getBaseUrl() + \"\u003dd\"));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ImageIO.write(newImage, extensionType, new File(pathName));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Uploading Images from Google \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Uploads image to Google Photos"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param imageName name of image to be retrieved"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param pathName  directory to upload from"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return name of image if it is a duplicate."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String uploadImage(String imageName, String pathName) throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!Files.exists(Paths.get(pathName + \"/\" + imageName))) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new Exception(String.format(WRONG_PATH, imageName));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Map\u003cInteger, String\u003e uploads \u003d uploadMediaItemsToGoogle("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chivent"
        },
        "content": "                Collections.singletonList(generateNewMediaImage(imageName, pathName)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return formatUploadFeedback(uploads, Collections.singletonList(imageName));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Uploads all images in specified directory to Google Photos"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param path directory to upload from"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return names of non-duplicate images"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String uploadAll(String path) throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chivent"
        },
        "content": "        List\u003cNewMediaItem\u003e newItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chivent"
        },
        "content": "        List\u003cString\u003e imageNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File dir \u003d new File(path);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (File file : Objects.requireNonNull(dir.listFiles())) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (file.isFile() \u0026\u0026 ImageIO.read(file) !\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chivent"
        },
        "content": "                imageNames.add(file.getName());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chivent"
        },
        "content": "                newItems.add(generateNewMediaImage(file.getName(), path));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Map\u003cInteger, String\u003e uploads \u003d uploadMediaItemsToGoogle(newItems);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return formatUploadFeedback(uploads, imageNames);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Generates an upload token from an image name and file path"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param imageName name of image to be retrieved"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param pathName  directory to upload from"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return NewMediaItem generated from upload token"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private NewMediaItem generateNewMediaImage(String imageName, String pathName) throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String uploadToken;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Get upload token"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chivent"
        },
        "content": "        UploadMediaItemRequest uploadRequest \u003d UploadMediaItemRequest.newBuilder().setFileName(imageName)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setDataFile(new RandomAccessFile(pathName + \"/\" + imageName, \"r\")).build();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Upload and capture the response"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chivent"
        },
        "content": "        UploadMediaItemResponse uploadResponse \u003d photosLibraryClient.uploadMediaItem(uploadRequest);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (uploadResponse.getError().isPresent()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chivent"
        },
        "content": "            UploadMediaItemResponse.Error error \u003d uploadResponse.getError().get();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chivent"
        },
        "content": "            throw new Exception(error.getCause());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chivent"
        },
        "content": "            uploadToken \u003d uploadResponse.getUploadToken().get();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (!uploadToken.isEmpty()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "chivent"
        },
        "content": "                return NewMediaItemFactory.createNewMediaItem(uploadToken);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chivent"
        },
        "content": "                throw new Exception(\"Unable to upload images.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Uploads created NewMediaItems to Google Photos"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param newItems list of NewMediaItems to pass to Google Photos"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return array of nonDuplicate names"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws Exception when uploading error occurs"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cInteger, String\u003e uploadMediaItemsToGoogle(List\u003cNewMediaItem\u003e newItems) throws Exception {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Map\u003cInteger, String\u003e nonDuplicates \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chivent"
        },
        "content": "        BatchCreateMediaItemsResponse response;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String albumId \u003d retrievePiconsoAlbum();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // if album could not be retrieved, just upload photo"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (albumId.isEmpty()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chivent"
        },
        "content": "            response \u003d photosLibraryClient.batchCreateMediaItemsCallable().call("
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    BatchCreateMediaItemsRequest.newBuilder().addAllNewMediaItems(newItems).build());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chivent"
        },
        "content": "            response \u003d photosLibraryClient.batchCreateMediaItems(albumId, newItems);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chivent"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (NewMediaItemResult itemsResponse : response.getNewMediaItemResultsList()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Status status \u003d itemsResponse.getStatus();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (status.getCode() !\u003d Code.OK_VALUE) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if (status.getCode() !\u003d 6) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    throw new Exception(\"An error occurred when uploading to Google Photos, please try again\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chivent"
        },
        "content": "                nonDuplicates.put(i, itemsResponse.getMediaItem().getFilename());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chivent"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return nonDuplicates;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Misc \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a string for user email"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return logged in user\u0027s email"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String identifyUser() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * As Album/Image names can be duplicates in Google Photos, new names to display in CLI are appended with a"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * suitable number to differentiate albums/images"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param map      Map to be comparing to"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param title    Key to search for"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param mimeType Extension of image"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return new title to act as key in map"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getUniqueName(Map map, String title, String mimeType) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String newTitle \u003d title;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String titleWithoutExtension;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String extension;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (mimeType !\u003d null) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chivent"
        },
        "content": "            titleWithoutExtension \u003d newTitle.replace(mimeType, \"\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chivent"
        },
        "content": "            extension \u003d mimeType;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chivent"
        },
        "content": "            titleWithoutExtension \u003d title;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chivent"
        },
        "content": "            extension \u003d \"\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chivent"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chivent"
        },
        "content": "        while (map.get(newTitle) !\u003d null) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chivent"
        },
        "content": "            newTitle \u003d titleWithoutExtension + \" (\" + i + \")\" + extension;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chivent"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return newTitle;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Format upload feedback message"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param uploads    map of non-duplicate uploads"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param imageNames list of images that were to be uploaded"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return formatted feedback"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String formatUploadFeedback(Map\u003cInteger, String\u003e uploads, List\u003cString\u003e imageNames) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (uploads.isEmpty()) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (uploads.size() \u003d\u003d imageNames.size()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chivent"
        },
        "content": "                sb.append(\".all\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chivent"
        },
        "content": "            for (Integer entry : uploads.keySet()) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chivent"
        },
        "content": "                sb.append(String.format(UPLOAD_FORMAT, imageNames.get(entry), uploads.get(entry)));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Creates/Retrieves an album in user\u0027s library to store Piconso edited photos."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return Id of Piconso Album"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String retrievePiconsoAlbum() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String id;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Album album;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chivent"
        },
        "content": "            // if album name not found, re-retrieve all albums (in case un-updated)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if ((album \u003d albumMap.get(PICONSO_ALBUM)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chivent"
        },
        "content": "                retrieveAllAlbumsFromGoogle();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if ((album \u003d albumMap.get(PICONSO_ALBUM)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    album \u003d photosLibraryClient.createAlbum(Album.newBuilder().setTitle(PICONSO_ALBUM).build());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    retrieveAllAlbumsFromGoogle();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chivent"
        },
        "content": "            id \u003d album.getId();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chivent"
        },
        "content": "            id \u003d \"\";"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 445
    }
  },
  {
    "path": "src/main/java/seedu/address/model/google/PhotosLibraryClientFactory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.model.google;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.security.GeneralSecurityException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.auth.oauth2.Credential;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.auth.oauth2.StoredCredential;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.json.JsonFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.json.jackson2.JacksonFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.util.store.DataStoreFactory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.client.util.store.FileDataStoreFactory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.gax.core.FixedCredentialsProvider;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.services.plus.Plus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.api.services.plus.model.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.auth.Credentials;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.auth.oauth2.UserCredentials;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.common.collect.ImmutableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.PhotosLibraryClient;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.PhotosLibrarySettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LoginStatusEvent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Factory to create instance of PhotosLibraryClient"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class PhotosLibraryClientFactory {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final File DATA_STORE \u003d Paths.get(\"./src/main/resources/user_credentials\").toFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //to be created on testing. prevents tests from launching login process"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final File TEST_FILE \u003d Paths.get(\"./src/main/resources/user_credentials/TEST_FILE.txt\").toFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //to be created on login process start and deleted only on login process end. prevents unnecessary redirects"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final File BLOCKER \u003d Paths.get(\"./src/main/resources/user_credentials/BLOCKER.txt\").toFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final List\u003cString\u003e SCOPE_LIST \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ImmutableList.of("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    \"https://www.googleapis.com/auth/photoslibrary\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    \"https://www.googleapis.com/auth/photoslibrary.sharing\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    \"email\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String CREDENTIAL_FILE \u003d \"client_credentials.json\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private PhotosLibraryClientFactory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Creates and returns a new PhotoHandler"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return PhotoHandler"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws IOException              when files cannot be read"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @throws GeneralSecurityException when there is an error with authentication"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static PhotoHandler createClient() throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FileUtil.createDirectoriesIfMissing(DATA_STORE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //@@author chivent-reused"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Reused from https://github.com/google/java-photoslibrary/blob/master/sample/src/main/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //java/com/google/photos/library/sample/demos/AlbumDemo.java with minor modifications"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "        DataStoreFactory dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "        InputStream credentialFile \u003d PhotosLibraryClientFactory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .class.getClassLoader().getResourceAsStream(CREDENTIAL_FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // load designated client secret/id"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleClientSecrets clientSecrets \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "                GoogleClientSecrets.load("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "                        JSON_FACTORY, new InputStreamReader(credentialFile));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String clientSecret \u003d clientSecrets.getDetails().getClientSecret();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String clientId \u003d clientSecrets.getDetails().getClientId();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // TODO: v2.0 develop a more intuitive way of avoiding this issue"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Currently BLOCKER.TXT is created because Google automatically creates a blank credential file when login,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // is launched even if user does not actually login. This causes our app to always redirect to google login"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // whenever a blank credential file is found on start up."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FileUtil.createIfMissing(BLOCKER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!TEST_FILE.exists()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //google standard authorization flow"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "            GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    GoogleNetHttpTransport.newTrustedTransport(), JSON_FACTORY,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    clientSecrets, SCOPE_LIST).setDataStoreFactory(dataStoreFactory).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "            // Credential is a google construct that wraps the access token and helps you to refresh periodically"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "            // AuthorizationCodeInstalledApp is another google standard that helps persist user end credentials"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Credential credential \u003d new AuthorizationCodeInstalledApp(flow,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    new LocalServerReceiver()).authorize(\"user\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //UserCredentials is a specific credential type that stores user specific credentials"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "            UserCredentials userCredentials \u003d UserCredentials.newBuilder().setClientId(clientId)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    .setClientSecret(clientSecret).setRefreshToken(credential.getRefreshToken()).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "            credentialFile.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FileUtil.deleteIfAvaliable(BLOCKER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return new PhotoHandler(createPhotosLibraryClient(userCredentials), getUserEmail(credential));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FileUtil.deleteIfAvaliable(BLOCKER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Creates a PhotosLibraryClient instance from credentials"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param credentials"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return PhotosLibraryClient new PhotosLibraryClient instance"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static PhotosLibraryClient createPhotosLibraryClient(Credentials credentials) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": "        PhotosLibrarySettings libSettings \u003d PhotosLibrarySettings.newBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setCredentialsProvider(FixedCredentialsProvider.create(credentials)).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return PhotosLibraryClient.initialize(libSettings);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Gets user\u0027s email from a Google+ instance"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param credential credentials to create google+ instance with"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return a String of user email"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static String getUserEmail(Credential credential) throws GeneralSecurityException, IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Plus plus \u003d new Plus.Builder(GoogleNetHttpTransport.newTrustedTransport(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "                JacksonFactory.getDefaultInstance(), credential).setApplicationName(\"Piconso\").build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "        List\u003cPerson.Emails\u003e emails \u003d plus.people().get(\"me\").execute().getEmails();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "        EventsCenter.getInstance().post(new LoginStatusEvent(emails.get(0).getValue()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return emails.get(0).getValue();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Checks if a user has storedCredentials (did not logout previously), and auto log ins user if true."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return a PhotoHandler instance if user has storedCredentials, else null"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static PhotoHandler loginUserIfPossible() throws IOException, GeneralSecurityException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return checkUserLogin() ? createClient() : null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Logs user out of currently logged in account"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static boolean logoutUserIfPossible() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "        boolean userLoggedOut;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (userLoggedOut \u003d checkUserLogin()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "            File[] listFiles \u003d DATA_STORE.listFiles();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "            for (File file : listFiles) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return userLoggedOut;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Checks if a user has storedCredentials (did not logout previously)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @return true if user has storedCredentials, else null"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static boolean checkUserLogin() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new File(DATA_STORE, StoredCredential.DEFAULT_DATA_STORE_ID).exists();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chivent": 183,
      "j-lum": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transformation/Transformation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.transformation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "//@@uthor j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Represents a single transformation to a single layer in a canvas."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class Transformation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private String operation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private String[] args;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public Transformation(String operation, String... args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //@@author lancelotwillow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String result \u003d operation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 0; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            result +\u003d \" \" + args[i];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return result; //whoever is in charge do this"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //@@author lancelotwillow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * return a list of String that contains all the arguments and the operation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public ArrayList\u003cString\u003e toList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(operation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.addAll(Arrays.asList(args));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return operation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d (Transformation) object;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (transformation \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return operation.equals(transformation.operation)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                    \u0026\u0026 Arrays.equals(args, transformation.args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 42,
      "j-lum": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/transformation/TransformationSet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.transformation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Represents a set of transformations that can be applied to any layer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class TransformationSet {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private LinkedList\u003cTransformation\u003e transformations;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    //private Index cursor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public TransformationSet() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        transformations \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //cursor \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Adds transformations to transformation set"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addTransformations(Transformation t) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        transformations.addLast(t);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //cursor \u003d Index.fromOneBased(transformations.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LinkedList\u003cTransformation\u003e getTransformations() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return transformations;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setTransformations(LinkedList\u003cTransformation\u003e list) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        transformations \u003d list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "j-lum": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonConvertArgsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.BufferedOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import com.fasterxml.jackson.databind.node.ObjectNode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ResourceUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * @@author lancelotwillow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " * this class is to convert the joson file that store the convert arguments to list[String], and store the convert"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class JsonConvertArgsStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param cmds"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static void storeArgument(String name, List\u003cTransformation\u003e cmds, String saveFolder) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ObjectNode objectNode1 \u003d mapper.createObjectNode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //create node for the json file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        objectNode1.put(\"name\", name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        objectNode1.put(\"num\", cmds.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ObjectNode operation \u003d mapper.createObjectNode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d cmds.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ObjectNode currentOperation \u003d mapper.createObjectNode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            currentOperation.put(\"name\", cmds.get(i - 1).toList().get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            int argNum \u003d cmds.get(i - 1).toList().size() - 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            currentOperation.put(\"num\", argNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ObjectNode argument \u003d mapper.createObjectNode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d argNum; j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                argument.put(\"arg\" + j, cmds.get(i - 1).toList().get(j));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            currentOperation.putPOJO(\"args\", argument);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            operation.putPOJO(\"op\" + i, currentOperation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        objectNode1.putPOJO(\"operations\", operation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        byte[] content \u003d mapper.writer().writeValueAsString(objectNode1).getBytes();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File command \u003d new File(saveFolder + \"/\" + name + \".json\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //write the json content to the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        BufferedOutputStream bio \u003d new BufferedOutputStream(new FileOutputStream(command));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        bio.write(content);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        bio.write(\"\\n\".getBytes());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        bio.flush();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * get the template of the arguments need for the operation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param fileUrl"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param operation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static List\u003cString\u003e retrieveCommandTemplate(URL fileUrl, String operation, String content)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (fileUrl \u003d\u003d null || operation \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new IOException(\"the url is invalid\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File file \u003d new File(\"commandTemplate.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ResourceUtil.copyResourceFileOut(fileUrl, file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        JsonNode jsonNode \u003d new ObjectMapper().readTree(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e patterns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        int num \u003d jsonNode.get(\"num\").asInt();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            String pattern \u003d jsonNode.get(content + \"s\").get(content + i).textValue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            patterns.add(pattern);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return patterns;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @param file"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static List\u003cString\u003e retrieveCommandArguments(File file) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        JsonNode jsonNode \u003d new ObjectMapper().readTree(file);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e args \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        int num \u003d jsonNode.get(\"num\").asInt();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d num; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonNode currentOp \u003d jsonNode.get(\"operations\").get(\"op\" + i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            args.add((i \u003d\u003d 1 ? \"\" : \"-\") + currentOp.get(\"name\").textValue());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d currentOp.get(\"num\").asInt(); j++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                args.add(currentOp.get(\"args\").get(\"arg\" + j).textValue());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    void clearCache();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "ihwk1996": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Manages storage of Piconso data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void clearCache() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File cache \u003d new File(\"cache\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File[] list \u003d cache.listFiles();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (list !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            for (File file: list) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        logger.info(\"Cache cleared.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 2,
      "ihwk1996": 9,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private final UserPrefs prefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private String startDir;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Queue\u003cString\u003e dirListWithSearchPrefix \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public CommandBox(Logic logic, UserPrefs prefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            completeDirName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            commandTextField.requestFocus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getLength());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author benedictcss"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Auto complete {@code CommandBox}\u0027s text field with the directory name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * if it exists and resets {@code startDir} with the {@code UserPrefs}\u0027s"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * current directory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void completeDirName() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        startDir \u003d prefs.getCurrDirectory().toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String commandText \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (commandText.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String commandWord \u003d getCommandWord(commandText.trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (commandWord.equals(CdCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            String arguments \u003d getArguments(commandText.trim());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            if (\"\".equals(arguments)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            searchDirectory(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns command word from given {@code commandText}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private String getCommandWord(String commandText) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String[] commandLineArgs \u003d commandText.split(\" \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return commandLineArgs[0];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Returns arguments from given {@code commandText}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private String getArguments(String commandText) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String[] commandLineArgs \u003d commandText.split(\" \", 2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (commandLineArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        return commandLineArgs[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Searches if directories exists in the given {@code arguments}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void searchDirectory(String arguments) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        StringBuilder copyArgs \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String[] directories \u003d arguments.split(\"/\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        int numDir \u003d directories.length;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        for (int i \u003d 0; i \u003c numDir; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            String dir \u003d directories[i];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            if (i \u003d\u003d 0 \u0026\u0026 Paths.get(dir, \"/\").isAbsolute()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                startDir \u003d dir;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                copyArgs.append(dir + \"/\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            } else if (i \u003d\u003d (numDir - 1)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                // Enters if directory is the last argument."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                File checkDir \u003d new File(startDir);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                File[] fileList \u003d checkDir.listFiles();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                if (!dirListWithSearchPrefix.isEmpty()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                        \u0026\u0026 dirListWithSearchPrefix.peek().equalsIgnoreCase(dir)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    dirListWithSearchPrefix.add(dirListWithSearchPrefix.poll());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    copyArgs.append(dirListWithSearchPrefix.peek());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    String newCommandText \u003d \"cd \" + copyArgs + \"/\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    replaceText(newCommandText);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                dirListWithSearchPrefix.clear();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                for (File file : fileList) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    if (file.isDirectory() \u0026\u0026 file.getName().toUpperCase().startsWith(dir.toUpperCase())) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                        dirListWithSearchPrefix.add(file.getName());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                if (!dirListWithSearchPrefix.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    copyArgs.append(dirListWithSearchPrefix.peek());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    String newCommandText \u003d \"cd \" + copyArgs + \"/\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    replaceText(newCommandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                // checks if directory exists"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                String newDir \u003d startDir + \"/\" + dir;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                File checkDir \u003d new File(newDir);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                if (checkDir.isDirectory()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    startDir \u003d newDir;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    copyArgs.append(checkDir.getName() + \"/\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "benedictcss": 120,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FilmReel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.FilmReelSelectionChangeEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.UpdateFilmReelEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Panel containing the list of images."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FXML \u003d \"FilmReelPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(HistoryListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private ObservableList\u003cPath\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private ListView\u003cPath\u003e imageListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageListView.setItems(items);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageListView.setCellFactory(listView -\u003e new FilmReelCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Event that triggers when new images are previewed with next"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void handleUpdateFilmReelEvent(UpdateFilmReelEvent event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        items.removeAll();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        items.setAll(event.paths);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageListView.scrollTo(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Event that triggers an image is selected with select"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void handleFilmReelSelectionChangeEvent(FilmReelSelectionChangeEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "            imageListView.scrollTo(event.index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            imageListView.getSelectionModel().clearAndSelect(event.index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Path} using a {@code FilmReelCard}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    class FilmReelCell extends ListCell\u003cPath\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "        protected void updateItem(Path image, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            super.updateItem(image, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (empty || image \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    setGraphic(new FilmReelCard(image, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FilmReelCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " * An UI component that displays information of a selected image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReelCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FXML \u003d \"FilmCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * An image panel for showing the previews"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final ObjectProperty\u003cImage\u003e image \u003d new SimpleObjectProperty\u003cImage\u003e("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "            new Image(\"https://via.placeholder.com/500x500\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private ImageView imagePreview;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Label pathName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReelCard(Path path, int displayedIndex) throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(path.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imagePreview.imageProperty().bind(image);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        image.setValue(new Image(fis));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        name.setText(displayedIndex + \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        pathName.setText(path.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!(other instanceof FilmReelCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FilmReelCard card \u003d (FilmReelCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return name.getText().equals(card.name.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "                \u0026\u0026 pathName.getText().equals(card.pathName.getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chivent": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HistoryListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.HistoryUpdateEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Panel containing the list of past transformations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class HistoryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String SELECTED_STYLE \u003d \"-fx-background-color: #a3a3a3;  -fx-text-fill: #1f1f1f;\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FXML \u003d \"HistoryListPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String DEFAULT_STYLE \u003d \"-fx-background-color: transparent;  -fx-text-fill: #6e6e6e;\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private ObservableList\u003cString\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Stores transformations that have been undone."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private ListView\u003cString\u003e historyListView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Text historyTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public HistoryListPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyTitle.setText(\"History of current layer\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListView.setItems(items);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListView.setCellFactory(listView -\u003e new HistoryListPanel.HistoryListViewCell());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void handleHistoryUpdateEvent(HistoryUpdateEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (int size \u003d items.size(); 0 \u003c size; size--) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "            items.remove(items.size() - 1, items.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListView.setItems(items);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "        items.addAll(event.list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListView.setItems(items);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Custom {@code ListCell} that displays transformations."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    class HistoryListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        protected void updateItem(String transformation, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            super.updateItem(transformation, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setStyle(DEFAULT_STYLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setText(empty ? null : transformation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (!empty \u0026\u0026 getIndex() \u003d\u003d (getListView().getItems().size() - 1)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "                setStyle(SELECTED_STYLE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chivent": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ImagePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.ChangeImageEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * An UI component that displays an Image."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class ImagePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String FXML \u003d \"ImagePanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * An image panel for showing the previews"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private final ObjectProperty\u003cImage\u003e image \u003d new SimpleObjectProperty\u003cImage\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            new Image(\"https://via.placeholder.com/500x500\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public ImagePanel(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        imageView.imageProperty().bind(image);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void handlePreviewImageEvent(ChangeImageEvent event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        if (this.name.equals(event.target)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            Platform.runLater(() -\u003e image.setValue(event.image));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 4,
      "j-lum": 43,
      "benedictcss": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LayerListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.LayerUpdateEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Panel containing the list of past transformations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String SELECTED_STYLE \u003d \"-fx-background-color: #a3a3a3;  -fx-text-fill: #1f1f1f;\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String FXML \u003d \"LayerListPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final String DEFAULT_STYLE \u003d \"-fx-background-color: transparent;  -fx-text-fill: #6e6e6e;\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private ObservableList\u003cString\u003e items \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private ListView\u003cString\u003e layerListView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Text layerTitle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Index current \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerListPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerTitle.setText(\"Layers\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListView.setItems(items);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListView.setCellFactory(listView -\u003e new LayerListPanel.LayerListViewCell());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void handleLayerUpdateEvent(LayerUpdateEvent event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        this.current \u003d event.current;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        for (int size \u003d items.size(); 0 \u003c size; size--) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            items.remove(items.size() - 1, items.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListView.setItems(items);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        items.addAll(event.list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListView.setItems(items);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Custom {@code ListCell} that displays transformations."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    class LayerListViewCell extends ListCell\u003cString\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        protected void updateItem(String layerName, boolean empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            super.updateItem(layerName, empty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            setStyle(DEFAULT_STYLE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            setText(empty ? null : layerName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (!empty \u0026\u0026 getIndex() \u003d\u003d current.getZeroBased()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                setStyle(SELECTED_STYLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "j-lum": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Identifies logged in google account"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String user;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    //private Config config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private StackPane originalImagePlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private StackPane previewImagePlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private StackPane historyListPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private StackPane filmReelPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private StackPane layerListPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic, String user) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //this.config \u003d config;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImagePanel originalImagePanel \u003d new ImagePanel(\"original\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        originalImagePlaceholder.getChildren().add(originalImagePanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImagePanel previewImagePanel \u003d new ImagePanel(\"preview\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        previewImagePlaceholder.getChildren().add(previewImagePanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(user, prefs.getCurrDirectory().toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic, prefs);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "        HistoryListPanel historyList \u003d new HistoryListPanel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListPlaceholder.getChildren().add(historyList.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FilmReel filmList \u003d new FilmReel();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "        filmReelPlaceholder.getChildren().add(filmList.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        LayerListPanel layerList \u003d new LayerListPanel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListPlaceholder.getChildren().add(layerList.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected void hide() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 8,
      "chivent": 21,
      "j-lum": 17,
      "benedictcss": 1,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.ChangeDirectoryEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LoginStatusEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LogoutStatusEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String LOGIN_STATUS_INITIAL \u003d \"Not connected to Google Photos\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String LOGIN_STATUS_UPDATED \u003d \"Connected to Google Photos as: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String LOGOUT_MESSAGE \u003d \"User logged out\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String DIRECTORY_ERROR \u003d \"Unable to detect directory location\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private StatusBar loginStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private StatusBar directoryDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public StatusBarFooter(String user, String currentDirectory) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (user !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setLoginStatus(String.format(LOGIN_STATUS_UPDATED, user));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setLoginStatus(LOGIN_STATUS_INITIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        setDirectoryDisplay(Objects.requireNonNullElse(currentDirectory, DIRECTORY_ERROR));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void setLoginStatus(String status) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Platform.runLater(() -\u003e loginStatus.setText(status));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void setDirectoryDisplay(String status) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Platform.runLater(() -\u003e directoryDisplay.setText(status));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleLoginStatusEvent(LoginStatusEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (event.loggedIn) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setLoginStatus(String.format(LOGIN_STATUS_UPDATED, event.user));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "            logger.info(LogsCenter.getEventHandlingLogMessage(event, \"User logged in as \" + event.user));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setLoginStatus(LOGIN_STATUS_INITIAL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "            logger.info(LogsCenter.getEventHandlingLogMessage(event, \"User is not logged in to google photos\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleDirectoryChangeEvent(ChangeDirectoryEvent event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (event.directory.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setDirectoryDisplay(DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "            logger.info(LogsCenter.getEventHandlingLogMessage(event,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    \"User\u0027s current directory location could not be determined\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "            setDirectoryDisplay(event.directory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            logger.info(LogsCenter.getEventHandlingLogMessage(event, \"User\u0027s current directory: \" + event.directory));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleLogoutStatusEvent(LogoutStatusEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        setLoginStatus(LOGIN_STATUS_INITIAL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, LOGOUT_MESSAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 77,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/piconso_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String user;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs, String loggedInUser) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        this.user \u003d loggedInUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic, user);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    protected void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 4,
      "benedictcss": 1,
      "j-lum": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Sets the text in the command box for testing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(text));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 9,
      "-": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FilmCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Handle to {@code FilmReelCard}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String PATH_ID \u003d \"#pathName\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String LABEL_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Label pathName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Label name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmCardHandle(Node filmReelCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(filmReelCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "        pathName \u003d getChildNode(PATH_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        name \u003d getChildNode(LABEL_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return name.getText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return pathName.getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns true if this handle contains {@code Path}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean equals(Path path, int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getTitle().equals(Integer.toString(index + 1))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                \u0026\u0026 getPath().equals(path.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return pathName.getText() + \"\" + name.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FilmReelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Provides a handle to {@code FilmReel}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String IMAGE_LIST_ID \u003d \"#imageListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final ListView\u003cPath\u003e imageListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReelHandle(Node filmReel) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(filmReel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageListView \u003d getChildNode(IMAGE_LIST_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Path getPath(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return imageListView.getItems().get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a handle to the selected {@code FilmCardHandle}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public Optional\u003cFilmCardHandle\u003e getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        int index \u003d imageListView.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "        System.out.println(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return index \u003e\u003d 0 ? getFilmCardHandle(index) : Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a handle to a {@code FilmCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public Optional\u003cFilmCardHandle\u003e getFilmCardHandle(int i) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .map(FilmCardHandle::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPath(i), i))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return imageListView.getItems().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 60
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HistoryListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Provides a handle to {@code HistoryListPanel}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class HistoryListPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String HISTORY_LIST_VIEW_ID \u003d \"#historyListView\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final ListView\u003cString\u003e historyListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public HistoryListPanelHandle(Node historyListPanel) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(historyListPanel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListView \u003d getChildNode(HISTORY_LIST_VIEW_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns the items in {@code HistoryListView}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public ObservableList\u003cString\u003e getItems() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return historyListView.getItems();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 26
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LayerListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Provides a handle to {@code LayerListPanel}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerListPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static final String HISTORY_LIST_VIEW_ID \u003d \"#layerListView\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private final ListView\u003cString\u003e layerListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public LayerListPanelHandle(Node historyListPanel) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        super(historyListPanel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layerListView \u003d getChildNode(HISTORY_LIST_VIEW_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Returns the items in {@code LayerListView}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public ObservableList\u003cString\u003e getItems() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return layerListView.getItems();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 26
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final FilmReelHandle filmReel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final HistoryListPanelHandle historyPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        filmReel \u003d new FilmReelHandle(getChildNode(FilmReelHandle.IMAGE_LIST_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyPanel \u003d new HistoryListPanelHandle(getChildNode(HistoryListPanelHandle.HISTORY_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReelHandle getFilmReel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return filmReel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public HistoryListPanelHandle getHistoryPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return historyPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 10,
      "-": 41
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String LOGIN_STATUS_ID \u003d \"#loginStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String DIRECTORY_DISPLAY_ID \u003d \"#directoryDisplay\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final StatusBar loginStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final StatusBar directoryNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String lastRememberedLoginStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String lastRememberedDirectoryDisplay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "        loginStatusNode \u003d getChildNode(LOGIN_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "        directoryNode \u003d getChildNode(DIRECTORY_DISPLAY_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns the text of the login status portion of the status bar."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getLoginStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return loginStatusNode.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns the text of the directory display portion of the status bar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public String getDirectoryDisplay() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return directoryNode.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Remembers the content of the login status portion of the status bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void rememberLoginStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        lastRememberedLoginStatus \u003d getLoginStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Remembers the content of the directory display portion of the status bar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void rememberDirectoryDisplay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        lastRememberedDirectoryDisplay \u003d getDirectoryDisplay();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns true if the current content of the login status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * {@code rememberLoginStatus()} call."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean isLoginStatusChanged() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return !lastRememberedLoginStatus.equals(getLoginStatus());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns true if the current content of the directory display is different from the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * value remembered by the most recent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * {@code rememberDirectoryStatus()} call."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public boolean isDirectoryChanged() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return !lastRememberedDirectoryDisplay.equals(getLoginStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 72,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseValidConfigPathSuccess() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseNullConfigPathSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseInvalidConfigPathSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public TestApp(Path saveFileLocation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Piconso ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImageMagickUtil.copyOutside(userPrefs, System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super.initLogging(config);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model \u003d new ModelManager(userPrefs, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, model.getUserLoggedIn());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        super.initEventsCenter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Model copy \u003d new ModelManager(new UserPrefs(), true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 31,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void toStringDefaultObjectStringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Piconso\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionParsingAcceptableVersionStringParsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionParsingWrongVersionStringThrowIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionConstructorCorrectParameterValueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionToStringValidVersionCorrectStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionComparableValidVersionCompareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionComparableValidVersionHashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void versionComparableValidVersionEqualIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 7,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertFalse(fifthPersonIndex \u003d\u003d null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/exceptions/IllegalOperationExceptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class IllegalOperationExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void testExpectedMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String message \u003d \"Expected\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        IllegalOperationException e \u003d new IllegalOperationException(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(e.getMessage(), message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void testExpectedThrowable() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Throwable t \u003d new Throwable();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String message \u003d \"Expected\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        IllegalOperationException e \u003d new IllegalOperationException(message, t);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(e.getCause(), t);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "j-lum": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void getImageExitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/piconso_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void getImageNullGivenThrowsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void checkArgumentTrueNothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void checkArgumentFalseWithoutErrorMessageThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void checkArgumentFalseWithErrorMessageThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 5,
      "benedictcss": 1,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readNullThrowsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readMissingFileEmptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readNotJsonFormatExceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readFileInOrderSuccessfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readValuesMissingFromFileDefaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readExtraValuesInFileExtraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveNullConfigThrowsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveNullFileThrowsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveConfigAllInOrderSuccess() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 9,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ImageMagickUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.CreateApplyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ImageMagickUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path testCommandFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonConvertArgsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertParsePlatformSuccessfully() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertEquals(3, ImageMagickUtil.getPlatform(\"mac OS X\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertEquals(2, ImageMagickUtil.getPlatform(\"windows 10\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertGetZipUrlSuccessfully() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertFalse(ImageMagickUtil.getImageMagickZipUrl(\"mac OS X\").getFile().equals(\"\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertGetCommandFolderSuccessfully() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String tmpLocation \u003d \"testing/folder\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImageMagickUtil.setTemporaryCommandForder(tmpLocation);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertEquals(ImageMagickUtil.getCommandSaveFolder(), tmpLocation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertCopyZipFileOutsideSuccessfully() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.copyOutside(userPrefs, \"windows 10\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File file1 \u003d new File(userPrefs.getCurrDirectory() + \"/ImageMagick-7.0.8-14-portable-Q16-x64\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (file1.exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                file1.delete();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.copyOutside(userPrefs, \"mac OS X\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File file2 \u003d new File(userPrefs.getCurrDirectory() + \"/ImageMagick-7.0.8\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (file2.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                file2.delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void assertParseBuildInOperationSuccessfully() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Logger logger \u003d LogsCenter.getLogger(ImageMagickUtilTest.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        logger.warning(System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            Path path \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"test.jpg\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageMagickUtil.copyOutside(userPrefs, System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageMagickUtil.processImage(path, new Transformation(\"blur\", \"0x8\"), false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void assertParseCustomisedOperationSuccessfully() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Path path \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"test.jpg\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageMagickUtil.copyOutside(userPrefs, System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ArrayList\u003cTransformation\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            list.add(new Transformation(\"blur\", \"0x8\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            list.add(new Transformation(\"rotate\", \"90\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            new CreateApplyCommand(\"blurR\", list);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.setTemporaryCommandForder(testCommandFolder.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageMagickUtil.processImage(path, new Transformation(\"@blurR\"), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 77,
      "j-lum": 3,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void serializeObjectToJsonFileNoExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void deserializeObjectFromJsonFileNoExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ResourceUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ResourceUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private final Path testFolder \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void unzipFolderTest() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File zippedFile \u003d testFolder.resolve(\"testFolder.zip\").toFile();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ResourceUtil.unzipFolder(zippedFile);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File unzippedFile \u003d testFolder.resolve(\"testFolder\").toFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertTrue(unzippedFile.exists() \u0026\u0026 unzippedFile.isDirectory());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertTrue(unzippedFile.listFiles() !\u003d null \u0026\u0026 unzippedFile.listFiles()[0].isDirectory()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                \u0026\u0026 unzippedFile.listFiles()[0].getName().equals(\"test\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        unzippedFile.delete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void containsWordIgnoreCaseNullWordThrowsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void containsWordIgnoreCaseEmptyWordThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void containsWordIgnoreCaseMultipleWordsThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void containsWordIgnoreCaseNullSentenceThrowsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void getDetailsExceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void getDetailsNullGivenThrowsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 6,
      "-": 153
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorWithCommandHistoryCopiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertFalse(commandHistoryWithA \u003d\u003d null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorDefensiveCopyBackingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertFalse(firstPointer \u003d\u003d null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "-": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new UserPrefs(), true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ApplyCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ApplyCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private Model model \u003d ModelGenerator.getModelWithTestImg();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertExecuteSuccessfully() throws InterruptedException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ImageMagickUtil.copyOutside(new UserPrefs(), System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        ApplyCommand command \u003d new ApplyCommand(transformation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!(e.getMessage() \u003d\u003d null || e.getMessage().equals(\"\"))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                //fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void assertExecuteRawSuccessfully() throws InterruptedException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ImageMagickUtil.copyOutside(new UserPrefs(), System.getProperty(\"os.name\").toLowerCase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] args \u003d List.of(\"-blur\", \"0x8\").toArray(new String[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ApplyCommand command \u003d new ApplyCommand(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(e.getMessage() \u003d\u003d null || e.getMessage().equals(\"\"))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                //fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 28,
      "j-lum": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CdCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "//@@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithTestImgDirectory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CdCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class CdCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model model \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model expectedModel \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Path currPath \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Path nextPath \u003d Paths.get(\"testimgs10\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Path backPath \u003d Paths.get(\"..\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CdCommand currDirectory \u003d new CdCommand(currPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CdCommand nextDirectory \u003d new CdCommand(nextPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CdCommand prevDirectory \u003d new CdCommand(backPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String homeDirectory \u003d MainApp.MAIN_PATH + \"/src/test/resources/testimgs\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String currDir \u003d homeDirectory + \"/\" + currDirectory.getPath().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String nextDir \u003d homeDirectory + \"/\" + nextDirectory.getPath().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String prevDir \u003d homeDirectory + \"/\" + prevDirectory.getPath().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // same directory -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(Paths.get(currDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCdToDirectorySuccess(currDirectory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // change to testimgs10"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        expectedModel.updateCurrDirectory(expectedModel.getCurrDirectory().resolve(\"testimgs10\").normalize());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCdToDirectorySuccess(nextDirectory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(Paths.get(nextDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // change to previous directory"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        expectedModel.updateCurrDirectory(expectedModel.getCurrDirectory().resolve(\"..\").normalize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCdToDirectorySuccess(prevDirectory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(Paths.get(currDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // change to previous directory"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        expectedModel.updateCurrDirectory(expectedModel.getCurrDirectory().resolve(\"..\").normalize());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCdToDirectorySuccess(prevDirectory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(Paths.get(prevDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // different paths -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertFalse(Paths.get(currDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertFalse(Paths.get(nextDir).normalize().equals(model.getCurrDirectory()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertFalse(currDirectory.equals(nextDirectory));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeCdToDirectoryFailure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // access a non existent directory in current directory"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedMessage \u003d CdCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Path directory \u003d Paths.get(\"testFolder\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CdCommand command \u003d new CdCommand(directory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(Paths.get(System.getProperty(\"user.home\")), model.getCurrDirectory());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // access a non existent directory from drive"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change to non existent directory in drive on windows"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absWinPath \u003d Paths.get(\"C://12345\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand winCommand \u003d new CdCommand(absWinPath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCommandSuccess(winCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertEquals(Paths.get(System.getProperty(\"user.home\")), model.getCurrDirectory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change to non existent directory in drive on mac"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absMacPath \u003d Paths.get(\"/Volume/12345\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand macCommand \u003d new CdCommand(absMacPath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCommandSuccess(macCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertEquals(Paths.get(System.getProperty(\"user.home\")), model.getCurrDirectory());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"nux\") || os.contains(\"ubuntu\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change to non existent directory in drive on mac"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absUbuPath \u003d Paths.get(\"/home/12345\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand ubuCommand \u003d new CdCommand(absUbuPath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCommandSuccess(ubuCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertEquals(Paths.get(System.getProperty(\"user.home\")), model.getCurrDirectory());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeCdToDirectorySuccess() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change drive on windows"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absWinPath \u003d Paths.get(\"C://Users\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            expectedModel.updateCurrDirectory(absWinPath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand command \u003d new CdCommand(absWinPath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCdToDirectorySuccess(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change drive on mac"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absMacPath \u003d Paths.get(\"/Volumes\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            expectedModel.updateCurrDirectory(absMacPath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand command \u003d new CdCommand(absMacPath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCdToDirectorySuccess(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"nux\") || os.contains(\"ubuntu\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change drive on mac"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            Path absUbuPath \u003d Paths.get(\"/home\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            expectedModel.updateCurrDirectory(absUbuPath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            CdCommand command \u003d new CdCommand(absUbuPath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCdToDirectorySuccess(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Asserts cd command success with the given {@code command}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void assertCdToDirectorySuccess(CdCommand command) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // directory exists"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedMessage \u003d expectedModel.getCurrDirectory().toString() + \"\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, expectedModel.getTotalImagesInDir())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                Math.min(expectedModel.getDirectoryImageList().size(), OpenCommand.BATCH_SIZE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateApplyCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.storage.JsonConvertArgsStorageTest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class CreateApplyCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void createOperationsSuccessfully() throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (ImageMagickUtil.getCommandSaveFolder() \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.setTemporaryCommandForder(JsonConvertArgsStorageTest.TEST_DATA_FOLDER.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cTransformation\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        CreateApplyCommand command \u003d new CreateApplyCommand(\"newOperation\", list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        command.execute(ModelGenerator.getDefaultModel(), null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //test the case with multiple transformations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        command \u003d new CreateApplyCommand(\"newOperation\", list);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        command.execute(ModelGenerator.getDefaultModel(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (!new File(JsonConvertArgsStorageTest.TEST_DATA_FOLDER.toString()).exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void createOperationsUnsuccessfully() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (ImageMagickUtil.getCommandSaveFolder() \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            ImageMagickUtil.setTemporaryCommandForder(JsonConvertArgsStorageTest.TEST_DATA_FOLDER.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation2 \u003d new Transformation(\"contrast\", \"0x8\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cTransformation\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        CreateApplyCommand command \u003d new CreateApplyCommand(\"newOperation\", list);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertCommandFailure(command, null, new CommandHistory(), Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //test with different failure cases"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.remove(transformation2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation3 \u003d new Transformation(\"resize\", \"fake\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        command \u003d new CreateApplyCommand(\"newOperation\", list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertCommandFailure(command, null, new CommandHistory(), Messages.MESSAGE_INVALID_OPERATION_ARGUMENTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            new CreateApplyCommand(\"newOperation\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!e.getMessage().contains(\"Empty\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 60,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeExitSuccess() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GoogleCommandTests.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.google.GoogleUploadCommand.MESSAGE_ALL_DUPLICATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.google.GoogleUploadCommand.MESSAGE_DUPLICATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.google.GoogleUploadCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleDlCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleLsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleRefreshCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleUploadCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Suite of tests to test failure messages for GoogleCommands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Unable to test success as it requires a Google Account and a connectivity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleCommandTests {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String mockMessage \u003d \"mock\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testGoogleLsFailure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleLsCommand command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String msg \u003d \"You are not logged in! Please login with `login` to proceed.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test empty parameter"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleLsCommand(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, msg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test /a albums"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleLsCommand(\"/a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, msg);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test list from album"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleLsCommand(\"\u003calbumName\u003e\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, msg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test invalid type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleLsCommand(\"invalid\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, msg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testGoogleUploadFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleUploadCommand command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String msg \u003d GoogleUploadCommand.MESSAGE_FAILURE + \"\\n\\n\" + GoogleUploadCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test empty parameter"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        msg \u003d \"You are not logged in! Please login with `login` to proceed.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test all from directory"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"all\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"all\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test image"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"\u003cimageName\u003e\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"imageName\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"invalid\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"nvali\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testUploadMessageParsing() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleUploadCommand command;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String expectedMessage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //All duplicates"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"all\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "        message \u003d command.returnUploadMessage(\"\").feedbackToUser;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_ALL_DUPLICATE, \"All images in directory\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedMessage, message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Some duplicates"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"all\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        message \u003d command.returnUploadMessage(mockMessage).feedbackToUser;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_DUPLICATE, mockMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedMessage, message);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //No duplicates"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleUploadCommand(\"all\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "        message \u003d command.returnUploadMessage(\".all\" + mockMessage).feedbackToUser;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_SUCCESS, mockMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedMessage, message);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testGoogleDownloadParsing() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleDlCommand command;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String msg \u003d GoogleDlCommand.MESSAGE_FAILURE + \"\\n\\n\" + GoogleDlCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test invalid"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"\u003c\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"\u003c\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test from invalid image, invalid album"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "        msg \u003d \"You are not logged in! Please login with `login` to proceed.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cAl /i\u003cIm\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"I\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test from valid image, invalid album"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cAlbu /i\u003cImage\u003e\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"Image\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test from invalid image, valid album"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cAlbum\u003e /i\u003cI\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"/a\u003cAlbum\u003e /i\u003cI\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test from image of album"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cAlbum\u003e /i\u003cImage\u003e\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"Image\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test image"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/i\u003cimageName\u003e\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"imageName\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test invalid image"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/i\u003cInvalid\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"Invali\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test album"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cAlbum\u003e\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"Album\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //test invalid album"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleDlCommand(\"/a\u003cInvalid\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(msg, \"Invali\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testGoogleRefreshFailure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleRefreshCommand command;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String msg \u003d \"You are not logged in! Please login with `login` to proceed.\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "        command \u003d new GoogleRefreshCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, msg);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void testGoogleEquals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleCommand testCommand \u003d new GoogleLsCommand(\"test\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(testCommand, testCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(testCommand, new GoogleLsCommand(\"test\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleLsCommand(\"fail\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleUploadCommand(\"fail\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "        testCommand \u003d new GoogleDlCommand(\"test\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(testCommand, testCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleDlCommand(\"fail\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleLsCommand(\"fail\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "        testCommand \u003d new GoogleUploadCommand(\"test\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(testCommand, testCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleUploadCommand(\"fail\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotEquals(testCommand, new GoogleDlCommand(\"fail\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeHelpSuccess() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 3,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_LAUNCHED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotoHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeCommandFailure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // unable to write test for success due to connectivity issues"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // success test would require a permanent set of stored google credentials, thus is insecure."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandSuccess(loginCommand, model, commandHistory, MESSAGE_LAUNCHED, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeCommandSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model.setPhotoHandler(new PhotoHandler(null, \"user\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LoginCommand loginCommand \u003d new LoginCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandSuccess(loginCommand, model, commandHistory, \"Logged in as user.\", expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LogoutCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.LogoutCommand.MESSAGE_LOGGED_OUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.LogoutCommand.MESSAGE_NONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getDefaultModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LogoutCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model expectedModel \u003d getDefaultModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String credentialPath \u003d \"./src/main/resources/user_credentials/StoredCredential\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeSuccessCommand() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FileUtil.createIfMissing(Paths.get(\"./src/main/resources/user_credentials/StoredCredential\").toFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LogoutCommand logoutCommand \u003d new LogoutCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File file \u003d new File(credentialPath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandSuccess(logoutCommand, model, commandHistory, MESSAGE_LOGGED_OUT, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeFailCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LogoutCommand logoutCommand \u003d new LogoutCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File file \u003d new File(credentialPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandSuccess(logoutCommand, model, commandHistory, MESSAGE_NONE, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(file.exists());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_DIR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_DIR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithTestImgDirectory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javax.activation.MimetypesFileTypeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model model \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Model expectedModel \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String expectedMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void generateExpectedMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File dir \u003d new File(expectedModel.getCurrDirectory().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StringBuffer expectedMessage \u003d new StringBuffer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File[] fileList \u003d dir.listFiles();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (File file : fileList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (file.isFile()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "                String mimetype \u003d new MimetypesFileTypeMap().getContentType(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "                // only list if is image"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                if ((mimetype.split(\"/\")[0]).equals(\"image\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    expectedMessage.append(file.getName()).append(\"   \\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } else if (file.isDirectory()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "                expectedMessage.append(file.getName()).append(\"   \\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (expectedMessage.toString().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "            this.expectedMessage \u003d MESSAGE_EMPTY_DIR;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "            this.expectedMessage \u003d expectedMessage.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeCommandSuccess() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertExecutionSuccess(expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeDirectoryEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"emptydir\").normalize());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        File emptydir \u003d model.getCurrDirectory().toFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!emptydir.exists()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "            emptydir.mkdirs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertExecutionSuccess(MESSAGE_EMPTY_DIR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void executeInvalidDirectory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"invalid\").normalize());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertExecutionSuccess(MESSAGE_INVALID_FILE_DIR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Executes a {@code LsCommand} and checks that {@code CommandResult}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * is raised with the {@code expectedMessage}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param expected expected message shown"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertExecutionSuccess(String expected) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LsCommand lsCommand \u003d new LsCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCommandSuccess(lsCommand, model, commandHistory, expected, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NextCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "// @@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithTestImgDirectory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code PrevCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class NextCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model model \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model expectedModel \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeNextBatchFailure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // Directory image list does not change if next fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(Messages.MESSAGE_NO_MORE_NEXT_IMAGES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeNextBatchSuccess() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"testimgs10\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getTotalImagesInDir(), 14);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionSuccess();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // Directory image list does not change if next fails"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(Messages.MESSAGE_NO_MORE_NEXT_IMAGES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code NextCommand} and checks that {@code CommandResult}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is raised with the {@code expectedMessage}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionSuccess() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        NextCommand nextCommand \u003d new NextCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, 14)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_BATCH_IN_IMAGE_LIST, 11, 14)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH, 4)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandSuccess(nextCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code NextCommand} and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionFailure(String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        NextCommand nextCommand \u003d new NextCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandFailure(nextCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "// @@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithTestImgDirectory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHT_IMAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVEN_IMAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IMAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IMAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code OpenCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class OpenCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model model \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model expectedModel \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeValidIndexImageListSuccess() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_IMAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_IMAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeIndexExceedsTotalImageListFailure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 7);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(INDEX_EIGHT_IMAGE, Messages.MESSAGE_INDEX_END_OF_IMAGE_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executeIndexExceedsBatchSizeFailure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"testimgs10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getTotalImagesInDir(), 14);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(INDEX_ELEVEN_IMAGE, Messages.MESSAGE_INDEX_EXCEED_MAX_BATCH_SIZE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand openFirstCommand \u003d new OpenCommand(INDEX_FIRST_IMAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand openSecondCommand \u003d new OpenCommand(INDEX_SECOND_IMAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(openFirstCommand, openFirstCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand selectFirstCommandCopy \u003d new OpenCommand(INDEX_FIRST_IMAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(openFirstCommand, selectFirstCommandCopy);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertNotEquals(1, openFirstCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertNotEquals(null, openFirstCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertNotEquals(openFirstCommand, openSecondCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code OpenCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        Path expectedImagePath \u003d expectedModel.getDirectoryImageList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedMessage \u003d String.format(OpenCommand.MESSAGE_OPEN_IMAGE_SUCCESS, index.getOneBased())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + \" of \" + Math.min(OpenCommand.BATCH_SIZE, model.getDirectoryImageList().size()) + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + \"Image opened: \" + expectedImagePath.getFileName().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandSuccess(openCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code OpenCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PrevCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "// @@author benedictcss"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithTestImgDirectory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code PrevCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class PrevCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model model \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private Model expectedModel \u003d getModelWithTestImgDirectory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executePrevBatchFailure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getTotalImagesInDir(), 7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // Directory image list does not change if prev fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(Messages.MESSAGE_NO_MORE_PREV_IMAGES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 7);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.numOfRemainingImagesInDir(), 7);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void executePrevBatchSuccess() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"testimgs10\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getTotalImagesInDir(), 14);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // Directory image list does not change if prev fails"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionFailure(Messages.MESSAGE_NO_MORE_PREV_IMAGES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.numOfRemainingImagesInDir(), 14);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        model.updateImageListNextBatch();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.numOfRemainingImagesInDir(), 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertExecutionSuccess();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 10);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(model.numOfRemainingImagesInDir(), 14);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code PrevCommand} and checks that {@code CommandResult}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is raised with the {@code expectedMessage}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionSuccess() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        PrevCommand prevCommand \u003d new PrevCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_TOTAL_IMAGES_IN_DIR, 14)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_BATCH_IN_IMAGE_LIST, 1, 10)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                + (String.format(Messages.MESSAGE_CURRENT_IMAGES_IN_BATCH, 10)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandSuccess(prevCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Executes a {@code PrevCommand} and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertExecutionFailure(String expectedMessage) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        PrevCommand prevCommand \u003d new PrevCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCommandFailure(prevCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.clearCache;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class RedoAllCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private RedoAllCommand redoAllCommand \u003d new RedoAllCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageSuccess \u003d RedoAllCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageFailure \u003d RedoAllCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeDefaultStateRedoAllCommandFailure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeRedoAllPointingAtStartCommandSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoAllCommand, model, commandHistory, messageSuccess, 3, 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeRedoAllPointingAtMidCommandSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoAllCommand, model, commandHistory, messageSuccess, 3, 4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeRedoAllPointingAtEndCommandFailure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithTwoTransformations();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveRedoAllPointingAtStartCommandFailure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoAllCommand, model, commandHistory, messageSuccess, 3, 4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveRedoAllPointingAtMidCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoAllCommand, model, commandHistory, messageSuccess, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeRedoAllAfterPurgeCommandFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model purgedModel \u003d ModelGenerator.executeATransformation(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoAllCommand, purgedModel, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        clearCache();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.clearCache;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageSuccess \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageFailure \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeDefaultStateSingleRedoCommandFailure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleRedoPointingAtStartCommandSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoCommand, model, commandHistory, messageSuccess, 1, 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleRedoPointingAtMidCommandSuccess() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoCommand, model, commandHistory, messageSuccess, 2, 4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleRedoPointingAtEndCommandFailure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithTwoTransformations();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveRedoPointingAtStartCommandSuccess() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoCommand, model, commandHistory, messageSuccess, 1, 4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(redoCommand, model, commandHistory, messageSuccess, 2, 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleRedoAfterPurgeCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model purgedModel \u003d ModelGenerator.executeATransformation(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(redoCommand, purgedModel, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        clearCache();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 55,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static junit.framework.TestCase.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private Model model \u003d ModelGenerator.getModelWithTestImg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveImageSuccessfully() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String fileName \u003d \"test.jpg\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        SaveCommand command \u003d new SaveCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            command \u003d new SaveCommand(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File file \u003d new File(model.getCurrDirectory().toString() + \"/\" + fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (e.getMessage() !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                //throw e;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveImageUnsuccessfully() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String fileName \u003d \"test.jpg\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        SaveCommand command \u003d new SaveCommand(fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        File file \u003d new File(model.getCurrDirectory().toString() + \"/\" + fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            command.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            assertCommandFailure(command, model, new CommandHistory(), Messages.MESSAGE_DUPLICATED_IMAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            if (e.getMessage().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 51,
      "j-lum": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.clearCache;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class UndoAllCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private UndoAllCommand undoAllCommand \u003d new UndoAllCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageSuccess \u003d UndoAllCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageFailure \u003d UndoAllCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeDefaultStateUndoAllCommandFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeUndoAllPointingAtStartCommandFailure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeUndoAllPointingAtMidCommandSuccess() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoAllCommand, model, commandHistory, messageSuccess, 0, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeUndoAllWithPointerAtEndCommandSuccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithThreeTransformations();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoAllCommand, model, commandHistory, messageSuccess, 0, 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveUndoAllPointingAtMidCommandFailure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoAllCommand, model, commandHistory, messageSuccess, 0, 4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveUndoAllPointingAtEndCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithThreeTransformations();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoAllCommand, model, commandHistory, messageSuccess, 0, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoAllCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeUndoAllAfterPurgeCommandSuccess() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model purgedModel \u003d ModelGenerator.executeATransformation(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoAllCommand, purgedModel, commandHistory, messageSuccess, 0, 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        clearCache();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.clearCache;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageSuccess \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private String messageFailure \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeDefaultStateSingleUndoCommandFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleUndoPointingAtStartCommandFailure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandFailure(undoCommand, model, commandHistory, messageFailure);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleUndoPointingAtMidCommandSuccess() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtMid();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoCommand, model, commandHistory, messageSuccess, 0, 4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleUndoPointingAtEndCommandSuccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithOneTransformation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoCommand, model, commandHistory, messageSuccess, 0, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSuccessiveUndoPointingAtEndCommandSuccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithTwoTransformations();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoCommand, model, commandHistory, messageSuccess, 1, 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoCommand, model, commandHistory, messageSuccess, 0, 3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void executeSingleUndoAfterPurgeCommandSuccess() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithUndoneStatesPointingAtStart();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model purgedModel \u003d ModelGenerator.executeATransformation(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertCommandSuccess(undoCommand, purgedModel, commandHistory, messageSuccess, 0, 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        clearCache();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "ihwk1996": 56,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/canvas/CanvasAutoResizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class CanvasAutoResizeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeTurnOnSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"on\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setCanvasAuto(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasAutoResizeCommand(args),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasAutoResizeCommand.OUTPUT_SUCCESS, args),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeTurnOffSuccess() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"off\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setCanvasAuto(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasAutoResizeCommand(args),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasAutoResizeCommand.OUTPUT_SUCCESS, args),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeInvalidCommandFailure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"invalid\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasAutoResizeCommand(args),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasAutoResizeCommand.OUTPUT_FAILURE, args)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + \"\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + CanvasAutoResizeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "j-lum": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/canvas/CanvasBgcolorCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class CanvasBgcolorCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeNoneSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"none\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setBackgroundColor(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasBgcolorCommand(args),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasBgcolorCommand.OUTPUT_SUCCESS, args),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeRgbaSuccess() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"rgba(0,0,0,0.0)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setBackgroundColor(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasBgcolorCommand(args),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasBgcolorCommand.OUTPUT_SUCCESS, args),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeHexSuccess() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"#00ff00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setBackgroundColor(args);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasBgcolorCommand(args),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasBgcolorCommand.OUTPUT_SUCCESS, args),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeInvalidFailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"invalid\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasBgcolorCommand(args),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasBgcolorCommand.OUTPUT_FAILURE, args.toLowerCase())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + \"\\n\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + CanvasBgcolorCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 4,
      "j-lum": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/canvas/CanvasSizeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class CanvasSizeCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeSizeSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d 123;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newWidth \u003d 456;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%dx%d\", newWidth, newHeight);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setHeight(newHeight);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setWidth(newWidth);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasSizeCommand(args),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasSizeCommand.OUTPUT_SUCCESS, newWidth, newHeight),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeListSizeSuccess() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setBackgroundColor(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasSizeCommand(args),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(CanvasSizeCommand.OUTPUT_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        model.getCanvas().getWidth(), model.getCanvas().getHeight()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeInvalidSizeFailure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"-100x100\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasSizeCommand(args),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                CanvasSizeCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + \"\\n\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + CanvasSizeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeChangeInvalidFailure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d -123;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newWidth \u003d 456;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%dx%d\", newWidth, newHeight);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new CanvasSizeCommand(args),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                CanvasSizeCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + \"\\n\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                        + CanvasSizeCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 4,
      "j-lum": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/layer/LayerAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "// @@author j-lum"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.ModelGenerator.getModelWithPopulatedCanvasAndImgDirectory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_EIGHT_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_ELEVEN_IMAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IMAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IMAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.ui.GuiUnitTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code LayerAddCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class LayerAddCommandTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Model model \u003d getModelWithPopulatedCanvasAndImgDirectory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private Model expectedModel \u003d getModelWithPopulatedCanvasAndImgDirectory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void executeInvalidIndexFailure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String invalidIndex \u003d \"invalid\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionFailure(invalidIndex, LayerAddCommand.OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void executeValidIndexImageListSuccess() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_IMAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_IMAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void executeIndexExceedsTotalImageListFailure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getDirectoryImageList().size(), 7);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionFailure(INDEX_EIGHT_IMAGE, LayerAddCommand.OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String outOfBoundsIndex \u003d Integer.toString(INDEX_EIGHT_IMAGE.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, LayerAddCommand.OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void executeIndexExceedsBatchSizeFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.updateCurrDirectory(model.getCurrDirectory().resolve(\"testimgs10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getTotalImagesInDir(), 14);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String outOfBoundsIndex \u003d Integer.toString(INDEX_ELEVEN_IMAGE.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, LayerAddCommand.OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertExecutionFailure(INDEX_ELEVEN_IMAGE, LayerAddCommand.OUTPUT_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Executes a {@code LayerAddCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        LayerAddCommand openCommand \u003d new LayerAddCommand((Integer.toString(index.getOneBased())));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String expectedMessage \u003d LayerAddCommand.OUTPUT_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess(openCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Executes a {@code OpenCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        LayerAddCommand openCommand \u003d new LayerAddCommand((Integer.toString(index.getOneBased())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * Executes a {@code LayerAddCommand} with the given {@code index},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * and checks that the correct error message is thrown."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     * @param index - A string with a valid index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private void assertExecutionFailure(String index, String expectedMessage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        LayerAddCommand openCommand \u003d new LayerAddCommand(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/layer/LayerDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.canvas.Canvas;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class LayerDeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeDeleteValidSuccess() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"2\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index indexToDelete \u003d Index.fromOneBased(Integer.parseInt(args));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index workingOn \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index expected \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.getCanvas().setCurrentLayer(workingOn);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            expectedModel.getCanvas().removeLayer(indexToDelete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerDeleteCommand(args),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(LayerDeleteCommand.OUTPUT_SUCCESS, expected.getOneBased()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeDeleteCurrentFailure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index workingOn \u003d Index.fromOneBased(Integer.parseInt(args));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.getCanvas().setCurrentLayer(workingOn);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerDeleteCommand(args),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                Canvas.OUTPUT_ERROR_CURRENT_LAYER"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeDeleteOnlyFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"1\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerDeleteCommand(args),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                Canvas.OUTPUT_ERROR_ONLY_LAYER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeDeleteNullFailure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerDeleteCommand(args),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerDeleteCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeDeleteInvalidIndexFailure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"9\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerDeleteCommand(args),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerDeleteCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 5,
      "j-lum": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/layer/LayerPositionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class LayerPositionCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeValidPositionSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newX \u003d 123;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newY \u003d 456;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%dx%d\", newX, newY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerPositionCommand(args),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(LayerPositionCommand.OUTPUT_SUCCESS, newX, newY),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeNullBothPositionFailure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerPositionCommand(args),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerPositionCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeNullSinglePositionFailure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"3 \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerPositionCommand(args),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerPositionCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "j-lum": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/layer/LayerSelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class LayerSelectCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeNullArgumentFailure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSelectCommand(null),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerSelectCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeLayerValidSelectSuccess() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index index \u003d Index.fromOneBased(Integer.parseInt(args));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        expectedModel.getCanvas().setCurrentLayer(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSelectCommand(args),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(LayerSelectCommand.OUTPUT_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeLayerInvalidSelectFailure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"invalid\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSelectCommand(args),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerSelectCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeLayerSelectWithoutCanvasFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d \"2\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //Index index \u003d Index.fromOneBased(Integer.parseInt(args));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithoutCanvas();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSelectCommand(args),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerSelectCommand.OUTPUT_MISSING_CANVAS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 5,
      "j-lum": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/layer/LayerSwapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.logic.commands.layer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class LayerSwapCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeValidSwapSuccess() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index to \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index from \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%d %d\", to.getOneBased(), from.getOneBased());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model expectedModel \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            expectedModel.getCanvas().swapLayer(to, from);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSwapCommand(args),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                String.format(LayerSwapCommand.OUTPUT_SUCCESS, to.getOneBased(), from.getOneBased()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeInvalidSwapFailure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index to \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index from \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%d %d\", to.getOneBased(), from.getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSwapCommand(args),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerSwapCommand.OUTPUT_FAILURE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void executeInvalidSameIndexFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String args \u003d String.format(\"%d %d\", index.getOneBased(), index.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        CommandHistory ch \u003d new CommandHistory();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                new LayerSwapCommand(args),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                ch,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "                LayerSwapCommand.OUTPUT_ILLEGAL"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "j-lum": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ApplyCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class ApplyCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private ApplyCommandParser parser \u003d new ApplyCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseConvertArgument() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformationBlur \u003d new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, transformationBlur.toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformationBlur));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformationRotate \u003d new Transformation(\"rotate\", \"90\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, transformationRotate.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformationRotate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformationResize \u003d new Transformation(\"resize\", \"50%\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, transformationResize.toString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformationResize));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformationContrast \u003d new Transformation(\"contrast\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, transformationContrast.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformationContrast));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformationSigmoidalContrast \u003d new Transformation("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                \"sigmoidal-contrast\", \"10x10%\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, transformationSigmoidalContrast.toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformationSigmoidalContrast));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new PiconsoParser().parseCommand(\"apply blur 0x8\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(new ApplyCommand(transformationBlur)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseRawConvertArgument() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d new Transformation(\"+noise gaussian\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, \"raw \" + transformation.toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                new ApplyCommand(transformation.getOperation().split(\" \")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseConvertArgumentFail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, \"raw\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ApplyCommand.MESSAGE_USAGE_RAW));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 46,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeEmptyArgsStringNoValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeNoPrefixesAllTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeOneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeMultipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeMultipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void tokenizeMultipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 6,
      "-": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateApplyCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.CreateApplyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class CreateApplyCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private CreateApplyCommandParser parser \u003d new CreateApplyCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateApplyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommandSuccessfully() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input \u003d \"create blurSample blur|0x8\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cTransformation\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation \u003d new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, input, new CreateApplyCommand(\"blurSample\", list));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //test case with multiple operations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input2 \u003d \"create blurR blur|0x8 rotate|90\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        Transformation transformation2 \u003d new Transformation(\"rotate\", \"90\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        list.add(transformation2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, input2, new CreateApplyCommand(\"blurR\", list));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new PiconsoParser().parseCommand(input2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(new CreateApplyCommand(\"blurR\", list)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandUnsuccessfully() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input \u003d \"create blurSample\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input, errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input2 \u003d \"create blur(0x8)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input2, errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input3 \u003d \"create blur|0x8 rotate|90\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input3, errorMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 42,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GoogleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.ENTIRE_GOOGLE_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_GOOGLE_INVALID_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleDlCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleLsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleRefreshCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleUploadCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class GoogleCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final GoogleCommandParser parser \u003d new GoogleCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void parseCommandLsVariants() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleLs(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // List all albums"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleLs(\"/a\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // List all images in an album"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleLs(\"\u003cAlbums\u003e\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Invalid list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleLs(\"\u003cA\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void parseCommandDownload() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Download album"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleDl(\"/a\u003cAlbum\u003e\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Download image"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleDl(\"/i\u003cimage.png\u003e\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Download images from album"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleDl(\"/a\u003cAlbum\u003e /i\u003cimage.png\u003e\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Assert invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEqualsGoogleDl(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(ex.getMessage(), MESSAGE_GOOGLE_INVALID_FORMAT + \"\\n\\n\" + GoogleDlCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void parseCommandUpload() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Upload directory"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleUl(\"all\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Download image"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEqualsGoogleUl(\"\u003cimage.png\u003e\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Assert invalid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEqualsGoogleUl(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(ex.getMessage(), MESSAGE_GOOGLE_INVALID_FORMAT + \"\\n\\n\" + GoogleUploadCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void parseCommandRefresh() throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parse(GoogleRefreshCommand.TYPE) instanceof GoogleRefreshCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void parseCommandInvalid() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "            parser.parse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(ex.getMessage(), ENTIRE_GOOGLE_MESSAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "            parser.parse(\"qe\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(ex.getMessage(), ENTIRE_GOOGLE_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "            parser.parse(\"g\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(ex.getMessage(), ENTIRE_GOOGLE_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertEqualsGoogleLs(String commandParameter) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String commandFormat \u003d GoogleLsCommand.TYPE + \" \" + commandParameter;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleLsCommand expected \u003d new GoogleLsCommand(commandParameter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected, parser.parse(commandFormat));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertEqualsGoogleDl(String commandParameter) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String commandFormat \u003d GoogleDlCommand.TYPE + \" \" + commandParameter;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleDlCommand expected \u003d new GoogleDlCommand(commandParameter);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected, parser.parse(commandFormat));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertEqualsGoogleUl(String commandParameter) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String commandFormat \u003d GoogleUploadCommand.TYPE + \" \" + commandParameter;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "        GoogleUploadCommand expected \u003d new GoogleUploadCommand(commandParameter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected, parser.parse(commandFormat));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseValidArgsReturnsOpenCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertParseSuccess(parser, \"1\", new OpenCommand(INDEX_FIRST_IMAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseInvalidArgsThrowsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 2,
      "benedictcss": 6,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseIndexInvalidInputThrowsParseException() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseIndexOutOfRangeInputThrowsParseException() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseIndexValidInputSuccess() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(INDEX_FIRST_IMAGE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(INDEX_FIRST_IMAGE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "benedictcss": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PiconsoParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.PrevCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.canvas.CanvasCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleDlCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleLsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleRefreshCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.google.GoogleUploadCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.logic.commands.layer.LayerCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class PiconsoParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final PiconsoParser parser \u003d new PiconsoParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandExit() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandHelp() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandSelect() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        OpenCommand command \u003d (OpenCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                OpenCommand.COMMAND_WORD + \" \" + INDEX_FIRST_IMAGE.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(new OpenCommand(INDEX_FIRST_IMAGE), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author benedictcss"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void parseCommandCd() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CdCommand command \u003d (CdCommand) parser.parseCommand(CdCommand.COMMAND_WORD + \" Desktop\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(new CdCommand(Paths.get(\"Desktop\")), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // Throws parse exception when field is Empty"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003eparser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                CdCommand.COMMAND_WORD + \" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void parseCommandNextCommandWordReturnsNextCommand() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(parser.parseCommand(NextCommand.COMMAND_WORD) instanceof NextCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(parser.parseCommand(NextCommand.COMMAND_WORD + \" 4\") instanceof NextCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void parseCommandPrevCommandWordReturnsPrevCommand() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(parser.parseCommand(PrevCommand.COMMAND_WORD) instanceof PrevCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertTrue(parser.parseCommand(PrevCommand.COMMAND_WORD + \" 4\") instanceof PrevCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandLsCommandWordReturnsLsCommand() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LsCommand.COMMAND_WORD) instanceof LsCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LsCommand.COMMAND_WORD + \" 23\") instanceof LsCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandRedoCommandWordReturnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandUndoCommandWordReturnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandCanvasCommandWordsReturnCanvasCommands() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"canvas size 3x3\") instanceof CanvasCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"canvas auto-resize off\") instanceof CanvasCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003eparser.parseCommand(\"canvas auto-resize\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"canvas bgcolor rgba(0,0,0,0.2)\") instanceof CanvasCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003eparser.parseCommand(\"canvas bgcolor\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003eparser.parseCommand(\"canvas invalid\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandLayerCommandWordsReturnLayerCommands() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer add 1\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parseCommand(\"layer add\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer delete 1\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parseCommand(\"layer delete\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer position 1x1\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer position\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer swap 1 2\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parseCommand(\"layer swap\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(parser.parseCommand(\"layer select 1\") instanceof LayerCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parseCommand(\"layer select\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(ParseException.class, ()-\u003e parser.parseCommand(\"layer invalid\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandGoogleCommandWordReturnsGoogleCommand() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(GoogleLsCommand.FULL_CMD) instanceof GoogleLsCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(GoogleDlCommand.FULL_CMD + \" /a\u003calbum\u003e\") instanceof GoogleDlCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(GoogleUploadCommand.FULL_CMD + \" all\") instanceof GoogleUploadCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(GoogleRefreshCommand.FULL_CMD) instanceof GoogleRefreshCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandLogoutCommandWordReturnsLogoutCommand() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_WORD) instanceof LogoutCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LogoutCommand.COMMAND_WORD + \" s\") instanceof LogoutCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandLoginCommandWordReturnsLoginCommand() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LoginCommand.COMMAND_WORD) instanceof LoginCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(parser.parseCommand(LoginCommand.COMMAND_WORD + \" s\") instanceof LoginCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandUnrecognisedInputThrowsParseException() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void parseCommandUnknownCommandThrowsParseException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 13,
      "chivent": 88,
      "j-lum": 33,
      "benedictcss": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SaveCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class SaveCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private SaveCommandParser parser \u003d new SaveCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private final String errorMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandParseSuccessfully() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String fileName \u003d \"test.jpg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, \"save \" + fileName, new SaveCommand(fileName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String fileName2 \u003d \"test.TIFF\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseSuccess(parser, \"save \" + fileName2, new SaveCommand(fileName2));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d new PiconsoParser().parseCommand(\"save \" + fileName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(command.equals(new SaveCommand(fileName)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void commandParseUnsuccessfully() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input \u003d \"save\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input, errorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input2 \u003d \"save test test\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input2, errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input3 \u003d \"save test.jPg\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input3, errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        String input4 \u003d \"save test.kk\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertParseFailure(parser, input4, errorMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 35,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.HistoryUpdateEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.events.ui.LayerUpdateEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.PreviewImageGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.TypicalImages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "//TODO: Update tests"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertFalse(modelManager \u003d\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void canvasAccessors() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(model.getCanvasHeight());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(model.getCanvasWidth());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(model.getCanvas());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d 1234;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newWidth \u003d 4567;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String color \u003d \"#00ff00\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        boolean auto \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCanvasSize(newHeight, newWidth);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCanvasAuto(auto);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setBackgroundColor(color);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvasHeight(), newHeight);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvasWidth(), newWidth);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getBackgroundColor(), color);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().isCanvasAuto(), auto);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void layerAccessors() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Model model \u003d ModelGenerator.getDefaultModel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        PreviewImage second \u003d PreviewImageGenerator.getPreviewImage(TypicalImages.IMAGE_LIST[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Transformation transformation \u003d PreviewImageGenerator.getATransformation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index one \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index two \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newX \u003d 123;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newY \u003d 456;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing addLayer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getLayers().size(), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.addLayer(second);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getLayers().size(), 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing removeLayer"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.removeLayer(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing overloaded addLayer"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getLayers().size(), 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.addLayer(second, \"name\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getLayers().size(), 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing swapLayer"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            model.swapLayer(one, two);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing setCurrentLayer"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCurrentLayer(one);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getCurrentLayer().getName(), \"name\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing setCurrentLayerPosition"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.setCurrentLayerPosition(newX, newY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getCurrentLayer().getX(), newX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(model.getCanvas().getCurrentLayer().getY(), newY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        //Testing misc functions"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.addTransformation(transformation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getMostRecent().getClass(), HistoryUpdateEvent.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        model.addLayer(second);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(eventsCollectorRule.eventsCollector.getMostRecent().getClass(), LayerUpdateEvent.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "chivent": 1,
      "j-lum": 82,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PhotoHandlerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotoHandler.PICONSO_ALBUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.model.google.PhotoHandler.UPLOAD_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.Album;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "import com.google.photos.library.v1.proto.MediaItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.google.PhotoHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Test for {@code PhotoHandler}, most functions cannot be tested for success due to a lack of a google account."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class PhotoHandlerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String user \u003d \"user\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String extension \u003d \".png\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private String dummyName \u003d \"fake.png\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private PhotoHandler photoHandler;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, String\u003e dummyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, Album\u003e albumMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private Map\u003cString, MediaItem\u003e imageMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 1.png\", \"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 2 (1).png\", \"2a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 2.png\", \"2\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 3 (1).png\", \"3a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 3 (2).png\", \"3b\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"item 3.png\", \"3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        dummyMap.put(\"Album 1\", \"3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumSetup();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageSetup();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "        photoHandler \u003d new PhotoHandler(user, albumMap, imageMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void returnAllImagesListWithRetrieval() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test images cannot be retrieved without photoHandler"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception ex \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        PhotoHandler emptyPhotoHandler \u003d new PhotoHandler(null, \"user\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "            emptyPhotoHandler.returnAllImagesList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (NullPointerException nullPtr) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ex \u003d nullPtr;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(ex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void returnAllImagesList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ArrayList\u003cString\u003e imageNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageNames.addAll(imageMap.keySet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(imageNames, photoHandler.returnAllImagesList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void returnAllAlbumsWithRetrieval() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test images cannot be retrieved without photoHandler"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception ex \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        PhotoHandler emptyPhotoHandler \u003d new PhotoHandler(null, \"user\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "            emptyPhotoHandler.returnAllAlbumsList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (NullPointerException nullPtr) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ex \u003d nullPtr;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(ex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void returnAllAlbumsList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        ArrayList\u003cString\u003e albumNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumNames.addAll(albumMap.keySet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(albumNames, photoHandler.returnAllAlbumsList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void returnAllImagesInAlbum() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test images cannot be retrieved without map"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception ex \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "        PhotoHandler emptyPhotoHandler \u003d new PhotoHandler(null, \"user\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "            emptyPhotoHandler.returnAllImagesinAlbum(\"album\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception nullPtr) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ex \u003d nullPtr;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(ex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test images cannot be retrieved without photoHandler"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.returnAllImagesinAlbum(\"Album 1\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception nullPtr) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ex \u003d nullPtr;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(ex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void refreshImageExceptions() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test images cannot be retrieved without photoHandler"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception ex \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.refreshLists();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception nullPtr) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "            ex \u003d nullPtr;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(ex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void uploadImageExceptions() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception compare;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //InvalidPath"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.uploadImage(dummyName, \"/sda/\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(\"fake.png does not exist in folder!\", ex.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "        compare \u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // no PhotoLibraryClientInstance"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Path path \u003d Paths.get(\"src\", \"test\", \"resources\", \"testimgs\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.uploadImage(\"test2.png\", path.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "        compare \u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Upload all images no PhotoLibraryClientInstance"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Path path \u003d Paths.get(\"src\", \"test\", \"resources\", \"testimgs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.uploadAll(path.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void downloadImageExceptions() throws IOException, CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception compare \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //-------------Dl one image -----------------"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Fails to download"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadImage(\"item.png\", \"/sda/\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof MalformedURLException);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // Invalid download"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadImage(dummyName, \"/sda/\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //------------ Dl Album ----------------------"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Album - Invalid download"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadWholeAlbum(dummyName, \"/sda/\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // ---------- Dl Image from Album -------------"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Image from Album - Invalid image"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadAlbumImage(\"Album 1\", dummyName, \"/sda/\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Image from Album - Invalid album"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadAlbumImage(dummyName, \"item.png\", \"/sda/\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Image from Album - Invalid album and image"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chivent"
        },
        "content": "            photoHandler.downloadAlbumImage(dummyName, dummyName, \"/sda/\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chivent"
        },
        "content": "            compare \u003d ex;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(compare instanceof NullPointerException);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void getUserName() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(user, photoHandler.identifyUser());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void retrievePiconsoAlbum() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(albumMap.get(PICONSO_ALBUM).getId(), photoHandler.retrievePiconsoAlbum());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.remove(PICONSO_ALBUM);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"\", photoHandler.retrievePiconsoAlbum());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void uploadMessageFormatting() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String[] images \u003d {\"img1\", \"img2\"};"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Map\u003cInteger, String\u003e uploads \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Test all duplicates"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"\", photoHandler.formatUploadFeedback(uploads, Arrays.asList(images)));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Test some duplicates"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chivent"
        },
        "content": "        uploads.put(0, images[0]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String expected \u003d String.format(UPLOAD_FORMAT, images[0], uploads.get(0));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected, photoHandler.formatUploadFeedback(uploads, Arrays.asList(images)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //Test no duplicates"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "chivent"
        },
        "content": "        uploads.put(1, images[1]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "chivent"
        },
        "content": "        expected \u003d \".all\" + String.format(UPLOAD_FORMAT, images[0], uploads.get(0))"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chivent"
        },
        "content": "                + String.format(UPLOAD_FORMAT, images[1], uploads.get(1));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected, photoHandler.formatUploadFeedback(uploads, Arrays.asList(images)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void getUniqueName() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // try non existing item"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"item.png\", photoHandler.getUniqueName(dummyMap, \"item.png\", extension));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // try existing item"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"item 1 (1).png\", photoHandler.getUniqueName(dummyMap, \"item 1.png\", extension));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // try existing 2 items"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"item 2 (2).png\", photoHandler.getUniqueName(dummyMap, \"item 2.png\", extension));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // try existing 3 items"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"item 3 (3).png\", photoHandler.getUniqueName(dummyMap, \"item 3.png\", extension));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // try existing item () name"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"item 3 (1) (1).png\", photoHandler.getUniqueName(dummyMap, \"item 3 (1).png\", extension));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // test without extension"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"Album\", photoHandler.getUniqueName(dummyMap, \"Album\", null));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"Album 1 (1)\", photoHandler.getUniqueName(dummyMap, \"Album 1\", null));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Setup of albumMap"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void albumSetup() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Album album \u003d Album.newBuilder().setTitle(\"Album 1\").build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.put(album.getTitle(), album);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chivent"
        },
        "content": "        album \u003d Album.newBuilder().setTitle(\"Album 2\").build();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.put(album.getTitle(), album);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chivent"
        },
        "content": "        album \u003d Album.newBuilder().setTitle(\"Album 3\").build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.put(album.getTitle(), album);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chivent"
        },
        "content": "        album \u003d Album.newBuilder().setTitle(PICONSO_ALBUM).setId(\"1\").build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chivent"
        },
        "content": "        albumMap.put(album.getTitle(), album);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Setup of imageMap"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void imageSetup() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String mimeType \u003d \"image/png\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chivent"
        },
        "content": "        MediaItem mediaItem \u003d MediaItem.newBuilder().setFilename(\"item.png\")"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setMimeType(mimeType)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageMap.put(mediaItem.getFilename(), mediaItem);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chivent"
        },
        "content": "        mediaItem \u003d MediaItem.newBuilder().setFilename(\"item 2.png\")"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setMimeType(mimeType)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageMap.put(mediaItem.getFilename(), mediaItem);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chivent"
        },
        "content": "        mediaItem \u003d MediaItem.newBuilder().setFilename(\"item 3 (1).png\")"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setMimeType(mimeType)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageMap.put(mediaItem.getFilename(), mediaItem);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "chivent"
        },
        "content": "        mediaItem \u003d MediaItem.newBuilder().setFilename(\"item 3.png\")"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .setMimeType(mimeType)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "chivent"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chivent"
        },
        "content": "        imageMap.put(mediaItem.getFilename(), mediaItem);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 313
    }
  },
  {
    "path": "src/test/java/seedu/address/model/PreviewImageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static seedu.address.testutil.UndoRedoCommandTestUtil.clearCache;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.PreviewImageGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class PreviewImageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final int ORIGINAL_IMAGE_HEIGHT \u003d 354;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final int ORIGINAL_IMAGE_WIDTH \u003d 458;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void getHeightAndWidth() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(previewImage.getHeight(), ORIGINAL_IMAGE_HEIGHT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(previewImage.getWidth(), ORIGINAL_IMAGE_WIDTH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void getImageTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d previewImage.getImage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertNotNull(image);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void getPathTest() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Path path \u003d previewImage.getCurrentPath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertNotNull(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void addTransformationTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Transformation t \u003d PreviewImageGenerator.getATransformation();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.addTransformation(t);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        String blurTransformationString \u003d \"blur 0x8\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Transformation blurTransformation \u003d previewImage.getTransformationSet().getTransformations().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(blurTransformationString, blurTransformation.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void commitDefaultPreviewImageState() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 0, 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void commitDefaultPreviewImageStateWithSecondaryConstructor() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImageWithSecondaryConstructor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 0, 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void commitMultipleImagesPointerAtEndOfStateListNoStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(PreviewImageGenerator.getABufferedImage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(PreviewImageGenerator.getABufferedImage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(PreviewImageGenerator.getABufferedImage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 3, 4);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void commitImagePointerNotAtEndOfStateListStatesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithUndoneStates();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(PreviewImageGenerator.getABufferedImage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 1, 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canUndoDefaultPreviewImageReturnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertFalse(previewImage.canUndo());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canUndoMultipleImagesPointerAtStartOfStateListReturnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertFalse(previewImage.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canUndoMultipleImagesPointerAtMidOfStateListReturnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertTrue(previewImage.canUndo());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canUndoMultipleImagesPointerAtEndOfStateListReturnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertTrue(previewImage.canUndo());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoDefaultPreviewImageThrowsNoUndoableStateException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertThrows(PreviewImage.NoUndoableStateException.class, previewImage::undo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoMultipleImagesPointerAtStartOfStateListThrowsNoUndoableStateException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 3);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertThrows(PreviewImage.NoUndoableStateException.class, previewImage::undo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoMultipleImagesPointerAtMidOfStateListSuccess() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.undo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 1, 4);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void undoMultipleImagesPointerAtEndOfStateListSuccess() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.undo();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 2, 4);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canRedoDefaultPreviewImageReturnsFalse() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertFalse(previewImage.canRedo());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canRedoMultipleImagesPointerAtStartOfStateListReturnsTrue() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithUndoneStates();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertTrue(previewImage.canRedo());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canRedoMultipleImagesPointerAtMidOfStateListReturnsTrue() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertTrue(previewImage.canRedo());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void canRedoMultipleImagePointerAtEndOfStateListReturnsFalse() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertFalse(previewImage.canRedo());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoDefaultPreviewImageThrowsNoRedoableStateException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertThrows(PreviewImage.NoRedoableStateException.class, previewImage::redo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoMultipleImagesPointerAtStartOfStateListSuccess() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 3);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 1, 4);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoMultipleAddressBookPointerAtMidOfStateListSuccess() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        shiftCurrentStatePointerLeftwards(previewImage, 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertPreviewImageState(previewImage, 3, 4);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void redoMultipleImagesPointerAtEndOfStateListThrowsNoRedoableStateException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d PreviewImageGenerator.getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertThrows(PreviewImage.NoRedoableStateException.class, previewImage::redo);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Asserts that {@code previewImage} has the correct state by checking"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * that {@code previewImage#currentIndex} is equal to {@code expectedIndex},"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * and {@code previewImage#currentSize} is equal to {@code expectedSize}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private void assertPreviewImageState(PreviewImage previewImage, int expectedIndex, int expectedSize) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        // Check for correct size and correct pointer index"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(previewImage.getCurrentIndex(), expectedIndex);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(previewImage.getCurrentSize(), expectedSize);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Shifts the {@code previewImage#currentIndex} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(PreviewImage previewImage, int count) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            previewImage.undo();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        clearCache();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 225
    }
  },
  {
    "path": "src/test/java/seedu/address/model/canvas/CanvasTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.commons.exceptions.IllegalOperationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.CanvasGenerator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.PreviewImageGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.TypicalImages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@author j-lum"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class CanvasTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getLayers() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(canvas.getLayers());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getLayers().size(), 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addLayer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.addLayer(PreviewImageGenerator.getPreviewImage(TypicalImages.IMAGE_LIST[1]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getLayers().size(), 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getCurrentLayer() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(canvas.getCurrentLayer());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCurrentLayer() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getCanvasWithTwoLayers();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCurrentLayer(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getCurrentLayer().getName(), \"Layer 2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void removeLayer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getCanvasWithTwoLayers();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            canvas.removeLayer(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            logger.severe(\"This should not happen!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getLayers().size(), 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void swapLayer() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getCanvasWithTwoLayers();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index to \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Index from \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            canvas.swapLayer(to, from);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        } catch (IllegalOperationException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "            assertNull(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCurrentLayer(to);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getCurrentLayer().getName(), \"Layer 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertThrows(IllegalOperationException.class, ()-\u003ecanvas.swapLayer(to, to));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getHeight() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getCurrentLayer().getHeight(), canvas.getHeight());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setHeight() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d 100;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setHeight(newHeight);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getHeight(), newHeight);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getWidth() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getCurrentLayer().getWidth(), canvas.getWidth());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setWidth() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d 100;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setHeight(newHeight);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getHeight(), newHeight);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void isCanvasAuto() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertFalse(canvas.isCanvasAuto());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setCanvasAuto() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setCanvasAuto(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertTrue(canvas.isCanvasAuto());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getBackgroundColor() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getBackgroundColor(), \"none\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setBackgroundColor() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas canvas \u003d CanvasGenerator.getInitialCanvas();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String newColor \u003d \"rgba(0,0,0,0.0)\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        canvas.setBackgroundColor(newColor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(canvas.getBackgroundColor(), newColor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/model/canvas/LayerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.model.canvas;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.testutil.PreviewImageGenerator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@author j-lum"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "class LayerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void addTransformation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Transformation t \u003d PreviewImageGenerator.getATransformation();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.addTransformation(t);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getImage().getTransformationSet().getTransformations().get(0), t);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getX() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getX(), 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setX() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newX \u003d 100;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.setX(newX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getX(), newX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getY() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getY(), 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setY() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newY \u003d 100;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.setY(newY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getY(), newY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getHeight() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getHeight(), layer.getImage().getHeight());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setHeight() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newHeight \u003d 100;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.setHeight(newHeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getHeight(), newHeight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getWidth() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getWidth(), layer.getImage().getWidth());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setWidth() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        int newWidth \u003d 100;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.setWidth(newWidth);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getWidth(), newWidth);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void getImage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertNotNull(layer.getImage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public void setName() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        String newName \u003d \"New name\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Layer layer \u003d new Layer(PreviewImageGenerator.getDefaultPreviewImage(), \"Layer 1\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        layer.setName(newName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        assertEquals(layer.getName(), newName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonConvertArgsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.commons.util.ImageMagickUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "public class JsonConvertArgsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonConvertArgsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertStorageSuccessfully() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File sampleFile \u003d new File(TEST_DATA_FOLDER.toString() + \"/blurR.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (sampleFile.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                sampleFile.delete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            List\u003cTransformation\u003e cmds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            cmds.add(new Transformation(\"blur\", \"0x8\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            cmds.add(new Transformation(\"rotate\", \"90\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonConvertArgsStorage.storeArgument(\"blurR\", cmds, TEST_DATA_FOLDER.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!sampleFile.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            throw new AssertionError(\"There should not be an error storing the operation\", e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertStorageUnsuccessfully() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            List\u003cTransformation\u003e cmds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            cmds.add(new Transformation(\"blur\", \"0x8, rotate, 90\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonConvertArgsStorage.storeArgument(\"blurR\", cmds, TEST_DATA_FOLDER.toString() + \"/something\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (e.getMessage().equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertRetrieveArgumentSuccessfully() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File file \u003d TEST_DATA_FOLDER.resolve(\"blurR.json\").toFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            List\u003cString\u003e sampleArgs \u003d new ArrayList\u003c\u003e(Arrays.asList(\"blur\", \"0x8\", \"-rotate\", \"90\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            List\u003cString\u003e args \u003d JsonConvertArgsStorage.retrieveCommandArguments(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            assertEquals(args, sampleArgs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "            if (e.getMessage().length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertRetrieveArgumentUnSuccessfully() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            File file \u003d TEST_DATA_FOLDER.resolve(\"fake.json\").toFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonConvertArgsStorage.retrieveCommandArguments(file);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            //"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertRetrieveOperationTemplateSuccessfully() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        URL fileUrl \u003d ImageMagickUtil.class.getResource(\"/imageMagic/commandTemplates/blur.json\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e sampleTemplate \u003d Arrays.asList(\"radius(0-99)xsigma(0-99)\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        List\u003cString\u003e template \u003d JsonConvertArgsStorage.retrieveCommandTemplate(fileUrl, \"blur\", \"arg\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        assertEquals(template, sampleTemplate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void assertRetrieveOperationTemplateUnSuccessfully() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            URL fileUrl \u003d ImageMagickUtil.class.getResource(\"/imageMagic/commandTemplates/fake.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            JsonConvertArgsStorage.retrieveCommandTemplate(fileUrl, \"blur\", \"arg\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            if (!e.getMessage().contains(\"the url is invalid\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 102,
      "chivent": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsNullFilePathThrowsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsMissingFileEmptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsNotJsonFormatExceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsFileInOrderSuccessfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsValuesMissingFromFileDefaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void readUserPrefsExtraValuesInFileExtraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void savePrefsNullPrefsThrowsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveUserPrefsNullFilePathThrowsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void saveUserPrefsAllInOrderSuccess() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 9,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.testutil.PreviewImageGenerator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void clearCacheTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File cache \u003d new File(\"cache\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        cache.mkdir();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        String cachePath \u003d cache.getPath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d PreviewImageGenerator.getABufferedImage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            File out \u003d new File(cachePath + \"/test.png\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            ImageIO.write(image, \"png\", out);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Error in clear cache test :\" + e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        storageManager.clearCache();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertEquals(0, cache.list().length);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public void getUserPrefsFilePathTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Path path \u003d storageManager.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        assertNotNull(path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "ihwk1996": 28,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CanvasGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "j-lum"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import seedu.address.model.canvas.Canvas;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "//@@author j-lum"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "j-lum"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "j-lum"
        },
        "content": " * A utility class to generate Canvases for testing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "j-lum"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "j-lum"
        },
        "content": "public class CanvasGenerator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    private CanvasGenerator() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        // prevents instantiation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static Canvas getInitialCanvas() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        PreviewImage initialImage \u003d PreviewImageGenerator.getDefaultPreviewImage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return new Canvas(initialImage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    public static Canvas getCanvasWithTwoLayers() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        PreviewImage secondImage \u003d PreviewImageGenerator.getPreviewImage(TypicalImages.IMAGE_LIST[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        Canvas twoLayers \u003d getInitialCanvas();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        twoLayers.addLayer(secondImage, \"Layer 2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "j-lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "j-lum"
        },
        "content": "        return twoLayers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "j-lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "j-lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "j-lum": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "j-lum"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.TransformationSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * A utility class to generate models for testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class ModelGenerator {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private ModelGenerator() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a dummy image read from resources (original.png)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static BufferedImage getABufferedImage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage originalImage \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            ClassLoader classLoader \u003d ModelGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            originalImage \u003d ImageIO.read(Objects.requireNonNull(classLoader.getResource(\"testimgs/original.png\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Error getting default model\" + e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return originalImage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a dummy transformation (blur)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static Transformation getATransformation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Executes a transformation on a model\u0027s previewImage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model executeATransformation(Model model) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrentPreviewImage(getABufferedImage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a default initialised Model."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getDefaultModel() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d getABufferedImage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d new ModelManager(new UserPrefs(), true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d new PreviewImage(image, new TransformationSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrentOriginalImageForTest(previewImage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with 1 transformation done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithOneTransformation() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.addTransformation(getATransformation());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrentPreviewImage(getABufferedImage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with 2 transformations done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithTwoTransformations() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getModelWithOneTransformation();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.addTransformation(getATransformation());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrentPreviewImage(getABufferedImage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with 3 transformations done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithThreeTransformations() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getModelWithTwoTransformations();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.addTransformation(getATransformation());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrentPreviewImage(getABufferedImage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model at index 0, size 4 (3 undone states)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithUndoneStatesPointingAtStart() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getModelWithThreeTransformations();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage(); // Now at original state"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model at index 1, size 4 (2 undone states)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithUndoneStatesPointingAtMid() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getModelWithThreeTransformations();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.undoPreviewImage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with current directory testimgs."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithTestImgDirectory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d new ModelManager(new UserPrefs(), true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrDirectory(Paths.get(MainApp.MAIN_PATH + \"/src/test/resources/testimgs\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with 3 layers."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithPopulatedCanvas() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.getCanvas().addLayer(PreviewImageGenerator.getPreviewImage(TypicalImages.FULL_LIST[2]), \"Layer 2\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.getCanvas().addLayer(PreviewImageGenerator.getPreviewImage(TypicalImages.FULL_LIST[3]), \"Layer 3\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a Model with a test img."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithTestImg() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getDefaultModel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.setCurrentOriginalImage(Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"test.jpg\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @return Returns a model with 3 layers and a directory of test images."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithPopulatedCanvasAndImgDirectory() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        Model model \u003d getModelWithPopulatedCanvas();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        model.updateCurrDirectory(Paths.get(MainApp.MAIN_PATH + \"/src/test/resources/testimgs\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * @return Returns a model without a canvas."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Model getModelWithoutCanvas() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new ModelManager(new UserPrefs(), true);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 161,
      "benedictcss": 2,
      "j-lum": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PreviewImageGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.Transformation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.transformation.TransformationSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * A utility class to generate PreviewImages for testing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class PreviewImageGenerator {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private PreviewImageGenerator() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a dummy image read from resources (original.png)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static BufferedImage getABufferedImage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage originalImage \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            ClassLoader classLoader \u003d PreviewImageGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            originalImage \u003d ImageIO.read(classLoader.getResource(\"testimgs/original.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Error getting default model\" + e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return originalImage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a dummy image read from resources (original.png)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getPreviewImage(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            ClassLoader classLoader \u003d PreviewImageGenerator.class.getClassLoader();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            image \u003d ImageIO.read(classLoader.getResource(\"testimgs/\" + fileName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            logger.warning(\"Error getting default model\" + e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new PreviewImage(image);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a dummy transformation (blur)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static Transformation getATransformation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new Transformation(\"blur\", \"0x8\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Executes a transformation on a previewImage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage executeATransformation(PreviewImage previewImage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(getABufferedImage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return previewImage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a default initialised PreviewImage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getDefaultPreviewImage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d getABufferedImage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new PreviewImage(image, new TransformationSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a default initialised PreviewImage with its secondary constructor."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getDefaultPreviewImageWithSecondaryConstructor() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        BufferedImage image \u003d getABufferedImage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return new PreviewImage(image);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a PreviewImage with 1 transformation done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getPreviewImageWithOneTransformation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d getDefaultPreviewImage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(getABufferedImage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return previewImage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a PreviewImage with 2 transformations done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getPreviewImageWithTwoTransformations() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d getPreviewImageWithOneTransformation();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(getABufferedImage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return previewImage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a PreviewImage with 3 transformations done."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getPreviewImageWithThreeTransformations() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d getPreviewImageWithTwoTransformations();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.commit(getABufferedImage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return previewImage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Returns a PreviewImage at index 0, size 4 (3 undone states)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static PreviewImage getPreviewImageWithUndoneStates() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        PreviewImage previewImage \u003d getPreviewImageWithThreeTransformations();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.undo();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.undo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        previewImage.undo();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return previewImage;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalImages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Contains typical strings that lead to image paths that other tests can reference"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class TypicalImages {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FIRST_IMAGE \u003d \"test1.png\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String SECOND_IMAGE \u003d \"test2.png\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String THIRD_IMAGE \u003d \"test3.png\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FOURTH_IMAGE \u003d \"test4.png\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String FIFTH_IMAGE \u003d \"test5.png\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String[] IMAGE_LIST \u003d {FIRST_IMAGE, SECOND_IMAGE};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String[] SECOND_IMAGE_LIST \u003d {THIRD_IMAGE, FOURTH_IMAGE};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static final String[] FULL_LIST \u003d {FIRST_IMAGE, SECOND_IMAGE, THIRD_IMAGE, FOURTH_IMAGE, FIFTH_IMAGE};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final Index INDEX_FIRST_IMAGE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final Index INDEX_SECOND_IMAGE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final Index INDEX_THIRD_IMAGE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final Index INDEX_EIGHT_IMAGE \u003d Index.fromOneBased(8);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public static final Index INDEX_ELEVEN_IMAGE \u003d Index.fromOneBased(11);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "benedictcss": 5,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UndoRedoCommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "import seedu.address.model.PreviewImage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "//@@author ihwk1996"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " * Contains helper methods for testing undo and redo commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "public class UndoRedoCommandTestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - model\u0027s previewImage\u0027s new index and size equal to the expected index and size."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "                                            String expectedMessage, int expectedIndex, int expectedSize) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertTrue(previewImageHasCorrectState(actualModel.getCurrentPreviewImage(), expectedIndex, expectedSize));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - the previewImage in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * - model\u0027s previewImage\u0027s index and size does not change."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        int originalIndex \u003d actualModel.getCurrentPreviewImage().getCurrentIndex();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        int originalSize \u003d actualModel.getCurrentPreviewImage().getCurrentSize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertTrue(previewImageHasCorrectState(actualModel.getCurrentPreviewImage(), originalIndex, originalSize));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Check if a previewImage is at the expected index and size"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    private static boolean previewImageHasCorrectState(PreviewImage previewImage, int expectedIndex, int expectedSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        int actualIndex \u003d previewImage.getCurrentIndex();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        int actualSize \u003d previewImage.getCurrentSize();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (actualIndex !\u003d expectedIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        return actualSize \u003d\u003d expectedSize;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     * Clears cache in storage folder."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    public static void clearCache() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File cache \u003d new File(\"cache\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        File[] list \u003d cache.listFiles();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        if (list !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            for (File file: list) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "                file.delete();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ihwk1996"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ihwk1996": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "import seedu.address.logic.commands.ApplyCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.CdCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.logic.commands.LsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d LsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private static final String CD_COMMAND_THAT_SUCCEEDS \u003d CdCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private static final String UNDO_COMMAND_THAT_FAILS \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    private static final String APPLY_COMMAND_THAT_FAILS \u003d ApplyCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        UserPrefs prefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        prefs.updateUserPrefs(Paths.get(MainApp.MAIN_PATH + \"/src/test/resources/testimgs\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic, prefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void commandBoxStartingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void commandBoxStartingWithFailedCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void commandBoxHandleKeyPress() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void handleKeyPressStartingWithUp() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "                KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        //assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void handleKeyPressStartingWithDown() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    // @@author benedictcss"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void handleKeyPressWrongCommandWordWithTab() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // empty commandBox"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // ls command"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(COMMAND_THAT_SUCCEEDS + \" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, COMMAND_THAT_SUCCEEDS + \" \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_SUCCEEDS + \" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS + \" \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // undo command"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(UNDO_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, UNDO_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, UNDO_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, UNDO_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // convert command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(APPLY_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.TAB, APPLY_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, APPLY_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, APPLY_COMMAND_THAT_FAILS + \" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void handleKeyPressCdCommandWordWithTab() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // cd commands to get current directory with one input"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(CD_COMMAND_THAT_SUCCEEDS + \" test\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" testimgs10/\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, CD_COMMAND_THAT_SUCCEEDS + \" testimgs10/\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, CD_COMMAND_THAT_SUCCEEDS + \" testimgs10/\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            // cd commands to change drive on windows"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            commandBoxHandle.setText(CD_COMMAND_THAT_SUCCEEDS + \" C://Us\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertCompleteDirName(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" C://Users/\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertInputHistory(KeyCode.DOWN, CD_COMMAND_THAT_SUCCEEDS + \" C://Users/\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "            assertInputHistory(KeyCode.UP, CD_COMMAND_THAT_SUCCEEDS + \" C://Users/\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String testPath \u003d MainApp.MAIN_PATH.toString() + \"/sr\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        String expectedPath \u003d MainApp.MAIN_PATH.toString() + \"/src/\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(CD_COMMAND_THAT_SUCCEEDS + \" \" + testPath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" \" + expectedPath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, CD_COMMAND_THAT_SUCCEEDS + \" \" + expectedPath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertInputHistory(KeyCode.UP, CD_COMMAND_THAT_SUCCEEDS + \" \" + expectedPath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    public void handleKeyPressWithMultipleTabs() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        // pressing tab multiple times loops through the list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        commandBoxHandle.setText(CD_COMMAND_THAT_SUCCEEDS + \" test\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" testimgs10/\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        //assertInputHistory(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" testimgs20/\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        //assertInputHistory(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" testimgs30/\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertCompleteDirName(KeyCode.TAB, CD_COMMAND_THAT_SUCCEEDS + \" testimgs10/\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "benedictcss"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    private void assertCompleteDirName(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "benedictcss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 7,
      "chivent": 2,
      "benedictcss": 87,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FilmReelCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.TypicalImages.IMAGE_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Tests for {@code FilmReelCard}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Display is tested in {@code FilmReelTest}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReelCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private List\u003cPath\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setUpResources() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (String s : IMAGE_LIST) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "                Path path \u003d Paths.get(\"src\", \"test\", \"resources\", \"testimgs\", s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "                assertNotNull(s + \"exists.\", path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                paths.add(path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } catch (InvalidPathException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "                logger.info(String.format(\"%s could not be found, skipping\", s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void equals() throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FilmReelCard imageCard \u003d new FilmReelCard(paths.get(0), 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // same image, same index -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FilmReelCard copy \u003d new FilmReelCard(paths.get(0), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(imageCard.equals(copy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(imageCard.equals(imageCard));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(imageCard \u003d\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(imageCard.equals(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // different image, same index -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "        copy \u003d new FilmReelCard(paths.get(0), 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(imageCard.equals(copy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        copy \u003d new FilmReelCard(paths.get(1), 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(imageCard.equals(copy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FilmReelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.TypicalImages.FULL_LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.TypicalImages.IMAGE_LIST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.TypicalImages.SECOND_IMAGE_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.FilmCardHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.FilmReelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.FilmReelSelectionChangeEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.UpdateFilmReelEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class FilmReelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final int FIRST_SELECTION \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final int SECOND_SELECTION \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private FilmReelHandle filmReelHandle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private List\u003cPath\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private List\u003cPath\u003e secondPaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private List\u003cPath\u003e fullPaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setUpResources() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "        paths \u003d setUpPaths(IMAGE_LIST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        secondPaths \u003d setUpPaths(SECOND_IMAGE_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        fullPaths \u003d setUpPaths(FULL_LIST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "        initUi();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertCardListDisplay(paths);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleUpdateFilmReelEvent() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "        initUi();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!paths.isEmpty() \u0026\u0026 !secondPaths.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new UpdateFilmReelEvent(secondPaths));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertCardListDisplay(secondPaths);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new UpdateFilmReelEvent(paths));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertCardListDisplay(paths);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleFilmReelSelectionChangeEvent() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "        initUi();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!paths.isEmpty() \u0026\u0026 !secondPaths.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //Check none selected by default"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertFalse(filmReelHandle.getHandleToSelectedCard().isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //Check index 1 is selected"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new FilmReelSelectionChangeEvent(SECOND_SELECTION));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEqualCardHandles(filmReelHandle.getFilmCardHandle(SECOND_SELECTION),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    filmReelHandle.getHandleToSelectedCard());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //Check none selected after refresh"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new UpdateFilmReelEvent(secondPaths));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertFalse(filmReelHandle.getHandleToSelectedCard().isPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "            //Check index 0 is selected"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new FilmReelSelectionChangeEvent(FIRST_SELECTION));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEqualCardHandles(filmReelHandle.getFilmCardHandle(FIRST_SELECTION),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    filmReelHandle.getHandleToSelectedCard());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code FilmReel} requires lesser than"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "        if (!fullPaths.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "            List\u003cPath\u003e longList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "            longList.addAll(fullPaths);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "            longList.addAll(fullPaths);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "            longList.addAll(fullPaths);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "                postNow(new UpdateFilmReelEvent(longList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "                guiRobot.interact(longList::clear);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }, \"Creation and deletion of image cards exceeded time limit\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Check that card handles are equal to each other"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param expected expected {@code FilmCardHandle} Optional"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param actual actual {@code FilmCardHandle} Optional"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertEqualCardHandles(Optional\u003cFilmCardHandle\u003e expected, Optional\u003cFilmCardHandle\u003e actual) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(expected.isPresent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertTrue(actual.isPresent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expected.get().toString(), actual.get().toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Check that card displays are equal to as expected path list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * @param pathList array to check against"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertCardListDisplay(List\u003cPath\u003e pathList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (int i \u003d 0; i \u003c pathList.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FilmCardHandle filmCard \u003d filmReelHandle.getFilmCardHandle(i).get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertNotNull(filmCard);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(Integer.toString(i + 1), filmCard.getTitle());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "            assertEquals(pathList.get(i).toString(), filmCard.getPath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private List\u003cPath\u003e setUpPaths(String[] list) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "        List\u003cPath\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "        for (String s: list) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "                Path path \u003d Paths.get(\"src\", \"test\", \"resources\", \"testimgs\", s);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "                assertNotNull(s + \"exists.\", path);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "                temp.add(path);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "            } catch (InvalidPathException ex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "                logger.info(String.format(\"%s could not be found, skipping\", s));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Initializes {@code FilmReelHandle} with a {@code FilmReel}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code FilmReel}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void initUi() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "        FilmReel filmReel \u003d new FilmReel();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "        uiPartRule.setUiPart(filmReel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "        filmReelHandle \u003d new FilmReelHandle(filmReel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new UpdateFilmReelEvent(paths));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": " * A GUI unit test class for Piconso."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void isShowingHelpWindowIsShowingReturnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void isShowingHelpWindowIsHidingReturnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void focusHelpWindowNotFocusedFocused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 3,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HistoryListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.HistoryListPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.HistoryUpdateEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Contains tests for editing list of {@code HistoryListPanel}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class HistoryListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final ArrayList\u003cString\u003e TRANSFORMATION_SAMPLE \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Arrays.asList(\"first\", \"second\", \"third\", \"fourth\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private HistoryListPanelHandle historyListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleHistoryUpdateEvent() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "        initUi();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new HistoryUpdateEvent(TRANSFORMATION_SAMPLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertListMatch();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(TRANSFORMATION_SAMPLE.size(), historyListPanelHandle.getItems().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "        TRANSFORMATION_SAMPLE.remove(2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new HistoryUpdateEvent(TRANSFORMATION_SAMPLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertListMatch();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(TRANSFORMATION_SAMPLE.size(), historyListPanelHandle.getItems().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Ensures that the lists from {@code historyListView} and {@code sampleList} match after changes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertListMatch() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(TRANSFORMATION_SAMPLE, historyListPanelHandle.getItems());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Initializes {@code historyListPanelHandle} with a {@code HistoryListPanel} and fills {@code historyListView}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void initUi() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        HistoryListPanel historyListPanel \u003d new HistoryListPanel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        uiPartRule.setUiPart(historyListPanel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        historyListPanelHandle \u003d new HistoryListPanelHandle(historyListPanel.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/LayerListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//@@author chivent"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.LayerListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LayerUpdateEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": " * Contains tests for editing list of {@code HistoryListPanel}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class LayerListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final ArrayList\u003cString\u003e LAYER_SAMPLE \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Arrays.asList(\"first\", \"second\", \"third\", \"fourth\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private LayerListPanelHandle layerListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void handleLayerUpdateEvent() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "        initUi();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new LayerUpdateEvent(LAYER_SAMPLE, Index.fromZeroBased(1)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertListMatch();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(LAYER_SAMPLE.size(), layerListPanelHandle.getItems().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LAYER_SAMPLE.remove(2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new LayerUpdateEvent(LAYER_SAMPLE, Index.fromZeroBased(2)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertListMatch();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(LAYER_SAMPLE.size(), layerListPanelHandle.getItems().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Ensures that the lists from {@code layerListView} and {@code LAYER_SAMPLE} match after changes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertListMatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(LAYER_SAMPLE, layerListPanelHandle.getItems());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Initializes {@code layerListPanelHandle} with a {@code LayerListPanel} and fills {@code layerListView}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void initUi() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        LayerListPanel layerListPanel \u003d new LayerListPanel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        uiPartRule.setUiPart(layerListPanel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        layerListPanelHandle \u003d new LayerListPanelHandle(layerListPanel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.testutil.ModelGenerator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "                    new LogicManager(ModelGenerator.getDefaultModel()), \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void closeMenuBarExitButtonExitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "        //assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void closeExternalRequestExitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "            //guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 5,
      "chivent": 3,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.DIRECTORY_ERROR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.LOGIN_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.LOGIN_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.ChangeDirectoryEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LoginStatusEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.events.ui.LogoutStatusEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String TEMP_EMAIL \u003d \"user@email.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final String TEMP_DIR \u003d \"Stub Directory\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final LoginStatusEvent LOGIN_STUB \u003d new LoginStatusEvent(TEMP_EMAIL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final ChangeDirectoryEvent DIRECTORY_STUB \u003d new ChangeDirectoryEvent(TEMP_DIR);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final LogoutStatusEvent LOGOUT_STUB \u003d new LogoutStatusEvent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //@@author chivent"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(LOGIN_STUB);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(DIRECTORY_STUB);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(String.format(LOGIN_STATUS_UPDATED, TEMP_EMAIL), TEMP_DIR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(LOGOUT_STUB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, TEMP_DIR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void moveToInvalidDirectory() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new ChangeDirectoryEvent(\"\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void loginWithoutUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "        postNow(new LoginStatusEvent(\"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertStatusBarContent(LOGIN_STATUS_INITIAL, DIRECTORY_ERROR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void loginWithNull() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception exception \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new LoginStatusEvent(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "            exception \u003d ex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(exception);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void changeDirectoryWithNull() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "        Exception exception \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "            postNow(new ChangeDirectoryEvent(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "            exception \u003d ex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertNotNull(exception);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertStatusBarContent(String expectedLoginStatus, String expectedDirectoryDisplay) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedLoginStatus, statusBarFooterHandle.getLoginStatus());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedDirectoryDisplay, statusBarFooterHandle.getDirectoryDisplay());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 72,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorNullFileUrlThrowsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorMissingFileUrlThrowsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorInvalidFileUrlThrowsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorValidFileUrlLoadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorValidFileWithFxRootUrlLoadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorNullFileNameThrowsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorMissingFileNameThrowsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void constructorInvalidFileNameThrowsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at VALID_FILE_PATH."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 8,
      "chivent": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "//TODO: Left as an example, to be deleted/replaced."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": "//package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "//import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "///**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "// * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "// */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "//public class GuiTestAssert {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "//                actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * in the correct order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "//            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "//            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * in the correct order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "chivent": 71
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "//package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": "//public class AddCommandSystemTest extends PiconsoSystemTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    public void add() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        Model model \u003d getModel();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* -------------------- Perform add operations on the shown unfiltered list --------------------------- */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "//         * spaces -\u003e added"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "//                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": "//                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": "//         * -\u003e added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        deleteAllPersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": "//                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* ------------------------ Perform add operation on the shown filtered list -------------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* ---------------------- Perform add operation while a person card is selected ----------------------- */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* --------------------------------- Perform invalid add operations ----------------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a duplicate person -\u003e rejected *//*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "//                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * instead."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chivent"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chivent"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        executeCommand(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chivent"
        },
        "content": "//        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chivent"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chivent"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "chivent": 206
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class ErrorDialogGuiTest extends PiconsoSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "public class HelpCommandSystemTest extends PiconsoSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "        // TODO: check usage of other UI components as well"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        /* TODO: assert that while the help window is open the UI updates correctly for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "         a command execution (for all UI components) */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lancelotwillow"
        },
        "content": "    public void helpMultipleCommandsOnlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lancelotwillow": 1,
      "chivent": 5,
      "-": 78
    }
  },
  {
    "path": "src/test/java/systemtests/PiconsoSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chivent"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.LOGIN_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chivent"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.LOGIN_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chivent"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chivent"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.FilmReelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.HistoryListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chivent"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chivent"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chivent"
        },
        "content": " * A system test class for Piconso, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chivent"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chivent"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chivent"
        },
        "content": "public abstract class PiconsoSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chivent"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chivent"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chivent"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(getDataFileLocation());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chivent"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chivent"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chivent"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chivent"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public FilmReelHandle getFilmReel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getFilmReel();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public HistoryListPanelHandle getHistoryPanel() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getHistoryPanel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chivent"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chivent"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chivent"
        },
        "content": "    //TODO: Add command exectutions to be used by other command tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chivent"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //TODO: Assert model equivalence"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Calls {@code StatusBarFooterHandle} to remember its current state."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chivent"
        },
        "content": "        statusBarFooterHandle.rememberLoginStatus();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chivent"
        },
        "content": "        statusBarFooterHandle.rememberDirectoryDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertFalse(handle.isLoginStatusChanged());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chivent"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chivent"
        },
        "content": "        String expectedLoginStatus \u003d String.format(LOGIN_STATUS_UPDATED, \"temp\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(expectedLoginStatus, handle.getLoginStatus());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chivent"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chivent"
        },
        "content": "        //TODO: Assert other intital UI elements"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chivent"
        },
        "content": "        assertEquals(LOGIN_STATUS_INITIAL, getStatusBarFooter().getLoginStatus());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chivent"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chivent"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chivent"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chivent"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chivent"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chivent"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chivent"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chivent"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 176
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chivent"
        },
        "content": "    public TestApp setupApplication(Path saveFileLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chivent"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(saveFileLocation));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chivent": 2,
      "-": 70
    }
  }
]
